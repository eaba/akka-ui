package akka.ui

import org.scalajs.dom.raw._
import org.scalajs.dom.experimental._
import org.scalajs.dom.experimental.mediastream._
import org.scalajs.dom.experimental.serviceworkers._
import org.scalajs.dom.experimental.sharedworkers._
import org.scalajs.dom.experimental.webrtc._

trait Binder[T <: EventTarget, L <: Listener, E <: Event]

object Binder {
  implicit val errorOnAbstractWorker = new Binder[AbstractWorker, error.type, ErrorEvent] {}
  implicit val cachedOnApplicationCache = new Binder[ApplicationCache, cached.type, Event] {}
  implicit val checkingOnApplicationCache = new Binder[ApplicationCache, checking.type, Event] {}
  implicit val downloadingOnApplicationCache = new Binder[ApplicationCache, downloading.type, Event] {}
  implicit val errorOnApplicationCache = new Binder[ApplicationCache, error.type, ErrorEvent] {}
  implicit val noupdateOnApplicationCache = new Binder[ApplicationCache, noupdate.type, Event] {}
  implicit val obsoleteOnApplicationCache = new Binder[ApplicationCache, obsolete.type, Event] {}
  implicit val progressOnApplicationCache = new Binder[ApplicationCache, progress.type, ProgressEvent] {}
  implicit val updatereadyOnApplicationCache = new Binder[ApplicationCache, updateready.type, Event] {}
  implicit val endedOnAudioBufferSourceNode = new Binder[AudioBufferSourceNode, ended.type, Event] {}
  implicit val addtrackOnAudioTrackList = new Binder[AudioTrackList, addtrack.type, TrackEvent] {}
  implicit val changeOnAudioTrackList = new Binder[AudioTrackList, change.type, Event] {}
  implicit val errorOnDedicatedWorkerGlobalScope = new Binder[DedicatedWorkerGlobalScope, error.type, ErrorEvent] {}
  implicit val languagechangeOnDedicatedWorkerGlobalScope = new Binder[DedicatedWorkerGlobalScope, languagechange.type, Event] {}
  implicit val messageOnDedicatedWorkerGlobalScope = new Binder[DedicatedWorkerGlobalScope, message.type, MessageEvent] {}
  implicit val offlineOnDedicatedWorkerGlobalScope = new Binder[DedicatedWorkerGlobalScope, offline.type, Event] {}
  implicit val onlineOnDedicatedWorkerGlobalScope = new Binder[DedicatedWorkerGlobalScope, online.type, Event] {}
  implicit val copyOnElement = new Binder[Element, copy.type, DragEvent] {}
  implicit val cutOnElement = new Binder[Element, cut.type, DragEvent] {}
  implicit val pasteOnElement = new Binder[Element, paste.type, DragEvent] {}
  implicit val errorOnEventSource = new Binder[EventSource, error.type, Event] {}
  implicit val messageOnEventSource = new Binder[EventSource, message.type, MessageEvent] {}
  implicit val openOnEventSource = new Binder[EventSource, open.type, Event] {}
  implicit val abortOnFileReader = new Binder[FileReader, abort.type, Event] {}
  implicit val errorOnFileReader = new Binder[FileReader, error.type, Event] {}
  implicit val loadOnFileReader = new Binder[FileReader, load.type, UIEvent] {}
  implicit val loadendOnFileReader = new Binder[FileReader, loadend.type, ProgressEvent] {}
  implicit val loadstartOnFileReader = new Binder[FileReader, loadstart.type, ProgressEvent] {}
  implicit val progressOnFileReader = new Binder[FileReader, progress.type, ProgressEvent] {}
  implicit val abortOnHTMLAnchorElement = new Binder[HTMLAnchorElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLAnchorElement = new Binder[HTMLAnchorElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLAnchorElement = new Binder[HTMLAnchorElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLAnchorElement = new Binder[HTMLAnchorElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLAnchorElement = new Binder[HTMLAnchorElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLAnchorElement = new Binder[HTMLAnchorElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLAnchorElement = new Binder[HTMLAnchorElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLAnchorElement = new Binder[HTMLAnchorElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLAnchorElement = new Binder[HTMLAnchorElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLAnchorElement = new Binder[HTMLAnchorElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLAnchorElement = new Binder[HTMLAnchorElement, change.type, Event] {}
  implicit val clickOnHTMLAnchorElement = new Binder[HTMLAnchorElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLAnchorElement = new Binder[HTMLAnchorElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLAnchorElement = new Binder[HTMLAnchorElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLAnchorElement = new Binder[HTMLAnchorElement, cuechange.type, Event] {}
  implicit val cutOnHTMLAnchorElement = new Binder[HTMLAnchorElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLAnchorElement = new Binder[HTMLAnchorElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLAnchorElement = new Binder[HTMLAnchorElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLAnchorElement = new Binder[HTMLAnchorElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLAnchorElement = new Binder[HTMLAnchorElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLAnchorElement = new Binder[HTMLAnchorElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLAnchorElement = new Binder[HTMLAnchorElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLAnchorElement = new Binder[HTMLAnchorElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLAnchorElement = new Binder[HTMLAnchorElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLAnchorElement = new Binder[HTMLAnchorElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLAnchorElement = new Binder[HTMLAnchorElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLAnchorElement = new Binder[HTMLAnchorElement, emptied.type, Event] {}
  implicit val endedOnHTMLAnchorElement = new Binder[HTMLAnchorElement, ended.type, Event] {}
  implicit val focusOnHTMLAnchorElement = new Binder[HTMLAnchorElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLAnchorElement = new Binder[HTMLAnchorElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLAnchorElement = new Binder[HTMLAnchorElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLAnchorElement = new Binder[HTMLAnchorElement, help.type, Event] {}
  implicit val inputOnHTMLAnchorElement = new Binder[HTMLAnchorElement, input.type, Event] {}
  implicit val keydownOnHTMLAnchorElement = new Binder[HTMLAnchorElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLAnchorElement = new Binder[HTMLAnchorElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLAnchorElement = new Binder[HTMLAnchorElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLAnchorElement = new Binder[HTMLAnchorElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLAnchorElement = new Binder[HTMLAnchorElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLAnchorElement = new Binder[HTMLAnchorElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLAnchorElement = new Binder[HTMLAnchorElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLAnchorElement = new Binder[HTMLAnchorElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLAnchorElement = new Binder[HTMLAnchorElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLAnchorElement = new Binder[HTMLAnchorElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLAnchorElement = new Binder[HTMLAnchorElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLAnchorElement = new Binder[HTMLAnchorElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLAnchorElement = new Binder[HTMLAnchorElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLAnchorElement = new Binder[HTMLAnchorElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLAnchorElement = new Binder[HTMLAnchorElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLAnchorElement = new Binder[HTMLAnchorElement, pause.type, Event] {}
  implicit val playOnHTMLAnchorElement = new Binder[HTMLAnchorElement, play.type, Event] {}
  implicit val playingOnHTMLAnchorElement = new Binder[HTMLAnchorElement, playing.type, Event] {}
  implicit val progressOnHTMLAnchorElement = new Binder[HTMLAnchorElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLAnchorElement = new Binder[HTMLAnchorElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLAnchorElement = new Binder[HTMLAnchorElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLAnchorElement = new Binder[HTMLAnchorElement, reset.type, Event] {}
  implicit val scrollOnHTMLAnchorElement = new Binder[HTMLAnchorElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLAnchorElement = new Binder[HTMLAnchorElement, seeked.type, Event] {}
  implicit val seekingOnHTMLAnchorElement = new Binder[HTMLAnchorElement, seeking.type, Event] {}
  implicit val selectOnHTMLAnchorElement = new Binder[HTMLAnchorElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLAnchorElement = new Binder[HTMLAnchorElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLAnchorElement = new Binder[HTMLAnchorElement, stalled.type, Event] {}
  implicit val submitOnHTMLAnchorElement = new Binder[HTMLAnchorElement, submit.type, Event] {}
  implicit val suspendOnHTMLAnchorElement = new Binder[HTMLAnchorElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLAnchorElement = new Binder[HTMLAnchorElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLAnchorElement = new Binder[HTMLAnchorElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLAnchorElement = new Binder[HTMLAnchorElement, waiting.type, Event] {}
  implicit val abortOnHTMLAreaElement = new Binder[HTMLAreaElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLAreaElement = new Binder[HTMLAreaElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLAreaElement = new Binder[HTMLAreaElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLAreaElement = new Binder[HTMLAreaElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLAreaElement = new Binder[HTMLAreaElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLAreaElement = new Binder[HTMLAreaElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLAreaElement = new Binder[HTMLAreaElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLAreaElement = new Binder[HTMLAreaElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLAreaElement = new Binder[HTMLAreaElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLAreaElement = new Binder[HTMLAreaElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLAreaElement = new Binder[HTMLAreaElement, change.type, Event] {}
  implicit val clickOnHTMLAreaElement = new Binder[HTMLAreaElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLAreaElement = new Binder[HTMLAreaElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLAreaElement = new Binder[HTMLAreaElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLAreaElement = new Binder[HTMLAreaElement, cuechange.type, Event] {}
  implicit val cutOnHTMLAreaElement = new Binder[HTMLAreaElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLAreaElement = new Binder[HTMLAreaElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLAreaElement = new Binder[HTMLAreaElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLAreaElement = new Binder[HTMLAreaElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLAreaElement = new Binder[HTMLAreaElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLAreaElement = new Binder[HTMLAreaElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLAreaElement = new Binder[HTMLAreaElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLAreaElement = new Binder[HTMLAreaElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLAreaElement = new Binder[HTMLAreaElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLAreaElement = new Binder[HTMLAreaElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLAreaElement = new Binder[HTMLAreaElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLAreaElement = new Binder[HTMLAreaElement, emptied.type, Event] {}
  implicit val endedOnHTMLAreaElement = new Binder[HTMLAreaElement, ended.type, Event] {}
  implicit val focusOnHTMLAreaElement = new Binder[HTMLAreaElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLAreaElement = new Binder[HTMLAreaElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLAreaElement = new Binder[HTMLAreaElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLAreaElement = new Binder[HTMLAreaElement, help.type, Event] {}
  implicit val inputOnHTMLAreaElement = new Binder[HTMLAreaElement, input.type, Event] {}
  implicit val keydownOnHTMLAreaElement = new Binder[HTMLAreaElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLAreaElement = new Binder[HTMLAreaElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLAreaElement = new Binder[HTMLAreaElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLAreaElement = new Binder[HTMLAreaElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLAreaElement = new Binder[HTMLAreaElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLAreaElement = new Binder[HTMLAreaElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLAreaElement = new Binder[HTMLAreaElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLAreaElement = new Binder[HTMLAreaElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLAreaElement = new Binder[HTMLAreaElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLAreaElement = new Binder[HTMLAreaElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLAreaElement = new Binder[HTMLAreaElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLAreaElement = new Binder[HTMLAreaElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLAreaElement = new Binder[HTMLAreaElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLAreaElement = new Binder[HTMLAreaElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLAreaElement = new Binder[HTMLAreaElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLAreaElement = new Binder[HTMLAreaElement, pause.type, Event] {}
  implicit val playOnHTMLAreaElement = new Binder[HTMLAreaElement, play.type, Event] {}
  implicit val playingOnHTMLAreaElement = new Binder[HTMLAreaElement, playing.type, Event] {}
  implicit val progressOnHTMLAreaElement = new Binder[HTMLAreaElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLAreaElement = new Binder[HTMLAreaElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLAreaElement = new Binder[HTMLAreaElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLAreaElement = new Binder[HTMLAreaElement, reset.type, Event] {}
  implicit val scrollOnHTMLAreaElement = new Binder[HTMLAreaElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLAreaElement = new Binder[HTMLAreaElement, seeked.type, Event] {}
  implicit val seekingOnHTMLAreaElement = new Binder[HTMLAreaElement, seeking.type, Event] {}
  implicit val selectOnHTMLAreaElement = new Binder[HTMLAreaElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLAreaElement = new Binder[HTMLAreaElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLAreaElement = new Binder[HTMLAreaElement, stalled.type, Event] {}
  implicit val submitOnHTMLAreaElement = new Binder[HTMLAreaElement, submit.type, Event] {}
  implicit val suspendOnHTMLAreaElement = new Binder[HTMLAreaElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLAreaElement = new Binder[HTMLAreaElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLAreaElement = new Binder[HTMLAreaElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLAreaElement = new Binder[HTMLAreaElement, waiting.type, Event] {}
  implicit val abortOnHTMLAudioElement = new Binder[HTMLAudioElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLAudioElement = new Binder[HTMLAudioElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLAudioElement = new Binder[HTMLAudioElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLAudioElement = new Binder[HTMLAudioElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLAudioElement = new Binder[HTMLAudioElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLAudioElement = new Binder[HTMLAudioElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLAudioElement = new Binder[HTMLAudioElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLAudioElement = new Binder[HTMLAudioElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLAudioElement = new Binder[HTMLAudioElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLAudioElement = new Binder[HTMLAudioElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLAudioElement = new Binder[HTMLAudioElement, change.type, Event] {}
  implicit val clickOnHTMLAudioElement = new Binder[HTMLAudioElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLAudioElement = new Binder[HTMLAudioElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLAudioElement = new Binder[HTMLAudioElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLAudioElement = new Binder[HTMLAudioElement, cuechange.type, Event] {}
  implicit val cutOnHTMLAudioElement = new Binder[HTMLAudioElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLAudioElement = new Binder[HTMLAudioElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLAudioElement = new Binder[HTMLAudioElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLAudioElement = new Binder[HTMLAudioElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLAudioElement = new Binder[HTMLAudioElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLAudioElement = new Binder[HTMLAudioElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLAudioElement = new Binder[HTMLAudioElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLAudioElement = new Binder[HTMLAudioElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLAudioElement = new Binder[HTMLAudioElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLAudioElement = new Binder[HTMLAudioElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLAudioElement = new Binder[HTMLAudioElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLAudioElement = new Binder[HTMLAudioElement, emptied.type, Event] {}
  implicit val endedOnHTMLAudioElement = new Binder[HTMLAudioElement, ended.type, Event] {}
  implicit val focusOnHTMLAudioElement = new Binder[HTMLAudioElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLAudioElement = new Binder[HTMLAudioElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLAudioElement = new Binder[HTMLAudioElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLAudioElement = new Binder[HTMLAudioElement, help.type, Event] {}
  implicit val inputOnHTMLAudioElement = new Binder[HTMLAudioElement, input.type, Event] {}
  implicit val keydownOnHTMLAudioElement = new Binder[HTMLAudioElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLAudioElement = new Binder[HTMLAudioElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLAudioElement = new Binder[HTMLAudioElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLAudioElement = new Binder[HTMLAudioElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLAudioElement = new Binder[HTMLAudioElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLAudioElement = new Binder[HTMLAudioElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLAudioElement = new Binder[HTMLAudioElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLAudioElement = new Binder[HTMLAudioElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLAudioElement = new Binder[HTMLAudioElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLAudioElement = new Binder[HTMLAudioElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLAudioElement = new Binder[HTMLAudioElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLAudioElement = new Binder[HTMLAudioElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLAudioElement = new Binder[HTMLAudioElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLAudioElement = new Binder[HTMLAudioElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLAudioElement = new Binder[HTMLAudioElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLAudioElement = new Binder[HTMLAudioElement, pause.type, Event] {}
  implicit val playOnHTMLAudioElement = new Binder[HTMLAudioElement, play.type, Event] {}
  implicit val playingOnHTMLAudioElement = new Binder[HTMLAudioElement, playing.type, Event] {}
  implicit val progressOnHTMLAudioElement = new Binder[HTMLAudioElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLAudioElement = new Binder[HTMLAudioElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLAudioElement = new Binder[HTMLAudioElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLAudioElement = new Binder[HTMLAudioElement, reset.type, Event] {}
  implicit val scrollOnHTMLAudioElement = new Binder[HTMLAudioElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLAudioElement = new Binder[HTMLAudioElement, seeked.type, Event] {}
  implicit val seekingOnHTMLAudioElement = new Binder[HTMLAudioElement, seeking.type, Event] {}
  implicit val selectOnHTMLAudioElement = new Binder[HTMLAudioElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLAudioElement = new Binder[HTMLAudioElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLAudioElement = new Binder[HTMLAudioElement, stalled.type, Event] {}
  implicit val submitOnHTMLAudioElement = new Binder[HTMLAudioElement, submit.type, Event] {}
  implicit val suspendOnHTMLAudioElement = new Binder[HTMLAudioElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLAudioElement = new Binder[HTMLAudioElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLAudioElement = new Binder[HTMLAudioElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLAudioElement = new Binder[HTMLAudioElement, waiting.type, Event] {}
  implicit val abortOnHTMLBRElement = new Binder[HTMLBRElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLBRElement = new Binder[HTMLBRElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLBRElement = new Binder[HTMLBRElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLBRElement = new Binder[HTMLBRElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLBRElement = new Binder[HTMLBRElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLBRElement = new Binder[HTMLBRElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLBRElement = new Binder[HTMLBRElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLBRElement = new Binder[HTMLBRElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLBRElement = new Binder[HTMLBRElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLBRElement = new Binder[HTMLBRElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLBRElement = new Binder[HTMLBRElement, change.type, Event] {}
  implicit val clickOnHTMLBRElement = new Binder[HTMLBRElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLBRElement = new Binder[HTMLBRElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLBRElement = new Binder[HTMLBRElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLBRElement = new Binder[HTMLBRElement, cuechange.type, Event] {}
  implicit val cutOnHTMLBRElement = new Binder[HTMLBRElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLBRElement = new Binder[HTMLBRElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLBRElement = new Binder[HTMLBRElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLBRElement = new Binder[HTMLBRElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLBRElement = new Binder[HTMLBRElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLBRElement = new Binder[HTMLBRElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLBRElement = new Binder[HTMLBRElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLBRElement = new Binder[HTMLBRElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLBRElement = new Binder[HTMLBRElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLBRElement = new Binder[HTMLBRElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLBRElement = new Binder[HTMLBRElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLBRElement = new Binder[HTMLBRElement, emptied.type, Event] {}
  implicit val endedOnHTMLBRElement = new Binder[HTMLBRElement, ended.type, Event] {}
  implicit val focusOnHTMLBRElement = new Binder[HTMLBRElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLBRElement = new Binder[HTMLBRElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLBRElement = new Binder[HTMLBRElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLBRElement = new Binder[HTMLBRElement, help.type, Event] {}
  implicit val inputOnHTMLBRElement = new Binder[HTMLBRElement, input.type, Event] {}
  implicit val keydownOnHTMLBRElement = new Binder[HTMLBRElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLBRElement = new Binder[HTMLBRElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLBRElement = new Binder[HTMLBRElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLBRElement = new Binder[HTMLBRElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLBRElement = new Binder[HTMLBRElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLBRElement = new Binder[HTMLBRElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLBRElement = new Binder[HTMLBRElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLBRElement = new Binder[HTMLBRElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLBRElement = new Binder[HTMLBRElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLBRElement = new Binder[HTMLBRElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLBRElement = new Binder[HTMLBRElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLBRElement = new Binder[HTMLBRElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLBRElement = new Binder[HTMLBRElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLBRElement = new Binder[HTMLBRElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLBRElement = new Binder[HTMLBRElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLBRElement = new Binder[HTMLBRElement, pause.type, Event] {}
  implicit val playOnHTMLBRElement = new Binder[HTMLBRElement, play.type, Event] {}
  implicit val playingOnHTMLBRElement = new Binder[HTMLBRElement, playing.type, Event] {}
  implicit val progressOnHTMLBRElement = new Binder[HTMLBRElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLBRElement = new Binder[HTMLBRElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLBRElement = new Binder[HTMLBRElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLBRElement = new Binder[HTMLBRElement, reset.type, Event] {}
  implicit val scrollOnHTMLBRElement = new Binder[HTMLBRElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLBRElement = new Binder[HTMLBRElement, seeked.type, Event] {}
  implicit val seekingOnHTMLBRElement = new Binder[HTMLBRElement, seeking.type, Event] {}
  implicit val selectOnHTMLBRElement = new Binder[HTMLBRElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLBRElement = new Binder[HTMLBRElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLBRElement = new Binder[HTMLBRElement, stalled.type, Event] {}
  implicit val submitOnHTMLBRElement = new Binder[HTMLBRElement, submit.type, Event] {}
  implicit val suspendOnHTMLBRElement = new Binder[HTMLBRElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLBRElement = new Binder[HTMLBRElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLBRElement = new Binder[HTMLBRElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLBRElement = new Binder[HTMLBRElement, waiting.type, Event] {}
  implicit val abortOnHTMLBaseElement = new Binder[HTMLBaseElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLBaseElement = new Binder[HTMLBaseElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLBaseElement = new Binder[HTMLBaseElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLBaseElement = new Binder[HTMLBaseElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLBaseElement = new Binder[HTMLBaseElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLBaseElement = new Binder[HTMLBaseElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLBaseElement = new Binder[HTMLBaseElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLBaseElement = new Binder[HTMLBaseElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLBaseElement = new Binder[HTMLBaseElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLBaseElement = new Binder[HTMLBaseElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLBaseElement = new Binder[HTMLBaseElement, change.type, Event] {}
  implicit val clickOnHTMLBaseElement = new Binder[HTMLBaseElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLBaseElement = new Binder[HTMLBaseElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLBaseElement = new Binder[HTMLBaseElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLBaseElement = new Binder[HTMLBaseElement, cuechange.type, Event] {}
  implicit val cutOnHTMLBaseElement = new Binder[HTMLBaseElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLBaseElement = new Binder[HTMLBaseElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLBaseElement = new Binder[HTMLBaseElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLBaseElement = new Binder[HTMLBaseElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLBaseElement = new Binder[HTMLBaseElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLBaseElement = new Binder[HTMLBaseElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLBaseElement = new Binder[HTMLBaseElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLBaseElement = new Binder[HTMLBaseElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLBaseElement = new Binder[HTMLBaseElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLBaseElement = new Binder[HTMLBaseElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLBaseElement = new Binder[HTMLBaseElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLBaseElement = new Binder[HTMLBaseElement, emptied.type, Event] {}
  implicit val endedOnHTMLBaseElement = new Binder[HTMLBaseElement, ended.type, Event] {}
  implicit val focusOnHTMLBaseElement = new Binder[HTMLBaseElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLBaseElement = new Binder[HTMLBaseElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLBaseElement = new Binder[HTMLBaseElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLBaseElement = new Binder[HTMLBaseElement, help.type, Event] {}
  implicit val inputOnHTMLBaseElement = new Binder[HTMLBaseElement, input.type, Event] {}
  implicit val keydownOnHTMLBaseElement = new Binder[HTMLBaseElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLBaseElement = new Binder[HTMLBaseElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLBaseElement = new Binder[HTMLBaseElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLBaseElement = new Binder[HTMLBaseElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLBaseElement = new Binder[HTMLBaseElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLBaseElement = new Binder[HTMLBaseElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLBaseElement = new Binder[HTMLBaseElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLBaseElement = new Binder[HTMLBaseElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLBaseElement = new Binder[HTMLBaseElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLBaseElement = new Binder[HTMLBaseElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLBaseElement = new Binder[HTMLBaseElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLBaseElement = new Binder[HTMLBaseElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLBaseElement = new Binder[HTMLBaseElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLBaseElement = new Binder[HTMLBaseElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLBaseElement = new Binder[HTMLBaseElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLBaseElement = new Binder[HTMLBaseElement, pause.type, Event] {}
  implicit val playOnHTMLBaseElement = new Binder[HTMLBaseElement, play.type, Event] {}
  implicit val playingOnHTMLBaseElement = new Binder[HTMLBaseElement, playing.type, Event] {}
  implicit val progressOnHTMLBaseElement = new Binder[HTMLBaseElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLBaseElement = new Binder[HTMLBaseElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLBaseElement = new Binder[HTMLBaseElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLBaseElement = new Binder[HTMLBaseElement, reset.type, Event] {}
  implicit val scrollOnHTMLBaseElement = new Binder[HTMLBaseElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLBaseElement = new Binder[HTMLBaseElement, seeked.type, Event] {}
  implicit val seekingOnHTMLBaseElement = new Binder[HTMLBaseElement, seeking.type, Event] {}
  implicit val selectOnHTMLBaseElement = new Binder[HTMLBaseElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLBaseElement = new Binder[HTMLBaseElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLBaseElement = new Binder[HTMLBaseElement, stalled.type, Event] {}
  implicit val submitOnHTMLBaseElement = new Binder[HTMLBaseElement, submit.type, Event] {}
  implicit val suspendOnHTMLBaseElement = new Binder[HTMLBaseElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLBaseElement = new Binder[HTMLBaseElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLBaseElement = new Binder[HTMLBaseElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLBaseElement = new Binder[HTMLBaseElement, waiting.type, Event] {}
  implicit val abortOnHTMLBlockElement = new Binder[HTMLBlockElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLBlockElement = new Binder[HTMLBlockElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLBlockElement = new Binder[HTMLBlockElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLBlockElement = new Binder[HTMLBlockElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLBlockElement = new Binder[HTMLBlockElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLBlockElement = new Binder[HTMLBlockElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLBlockElement = new Binder[HTMLBlockElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLBlockElement = new Binder[HTMLBlockElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLBlockElement = new Binder[HTMLBlockElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLBlockElement = new Binder[HTMLBlockElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLBlockElement = new Binder[HTMLBlockElement, change.type, Event] {}
  implicit val clickOnHTMLBlockElement = new Binder[HTMLBlockElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLBlockElement = new Binder[HTMLBlockElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLBlockElement = new Binder[HTMLBlockElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLBlockElement = new Binder[HTMLBlockElement, cuechange.type, Event] {}
  implicit val cutOnHTMLBlockElement = new Binder[HTMLBlockElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLBlockElement = new Binder[HTMLBlockElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLBlockElement = new Binder[HTMLBlockElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLBlockElement = new Binder[HTMLBlockElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLBlockElement = new Binder[HTMLBlockElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLBlockElement = new Binder[HTMLBlockElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLBlockElement = new Binder[HTMLBlockElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLBlockElement = new Binder[HTMLBlockElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLBlockElement = new Binder[HTMLBlockElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLBlockElement = new Binder[HTMLBlockElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLBlockElement = new Binder[HTMLBlockElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLBlockElement = new Binder[HTMLBlockElement, emptied.type, Event] {}
  implicit val endedOnHTMLBlockElement = new Binder[HTMLBlockElement, ended.type, Event] {}
  implicit val focusOnHTMLBlockElement = new Binder[HTMLBlockElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLBlockElement = new Binder[HTMLBlockElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLBlockElement = new Binder[HTMLBlockElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLBlockElement = new Binder[HTMLBlockElement, help.type, Event] {}
  implicit val inputOnHTMLBlockElement = new Binder[HTMLBlockElement, input.type, Event] {}
  implicit val keydownOnHTMLBlockElement = new Binder[HTMLBlockElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLBlockElement = new Binder[HTMLBlockElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLBlockElement = new Binder[HTMLBlockElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLBlockElement = new Binder[HTMLBlockElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLBlockElement = new Binder[HTMLBlockElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLBlockElement = new Binder[HTMLBlockElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLBlockElement = new Binder[HTMLBlockElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLBlockElement = new Binder[HTMLBlockElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLBlockElement = new Binder[HTMLBlockElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLBlockElement = new Binder[HTMLBlockElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLBlockElement = new Binder[HTMLBlockElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLBlockElement = new Binder[HTMLBlockElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLBlockElement = new Binder[HTMLBlockElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLBlockElement = new Binder[HTMLBlockElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLBlockElement = new Binder[HTMLBlockElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLBlockElement = new Binder[HTMLBlockElement, pause.type, Event] {}
  implicit val playOnHTMLBlockElement = new Binder[HTMLBlockElement, play.type, Event] {}
  implicit val playingOnHTMLBlockElement = new Binder[HTMLBlockElement, playing.type, Event] {}
  implicit val progressOnHTMLBlockElement = new Binder[HTMLBlockElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLBlockElement = new Binder[HTMLBlockElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLBlockElement = new Binder[HTMLBlockElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLBlockElement = new Binder[HTMLBlockElement, reset.type, Event] {}
  implicit val scrollOnHTMLBlockElement = new Binder[HTMLBlockElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLBlockElement = new Binder[HTMLBlockElement, seeked.type, Event] {}
  implicit val seekingOnHTMLBlockElement = new Binder[HTMLBlockElement, seeking.type, Event] {}
  implicit val selectOnHTMLBlockElement = new Binder[HTMLBlockElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLBlockElement = new Binder[HTMLBlockElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLBlockElement = new Binder[HTMLBlockElement, stalled.type, Event] {}
  implicit val submitOnHTMLBlockElement = new Binder[HTMLBlockElement, submit.type, Event] {}
  implicit val suspendOnHTMLBlockElement = new Binder[HTMLBlockElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLBlockElement = new Binder[HTMLBlockElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLBlockElement = new Binder[HTMLBlockElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLBlockElement = new Binder[HTMLBlockElement, waiting.type, Event] {}
  implicit val abortOnHTMLBodyElement = new Binder[HTMLBodyElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLBodyElement = new Binder[HTMLBodyElement, activate.type, UIEvent] {}
  implicit val afterprintOnHTMLBodyElement = new Binder[HTMLBodyElement, afterprint.type, Event] {}
  implicit val beforeactivateOnHTMLBodyElement = new Binder[HTMLBodyElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLBodyElement = new Binder[HTMLBodyElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLBodyElement = new Binder[HTMLBodyElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLBodyElement = new Binder[HTMLBodyElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLBodyElement = new Binder[HTMLBodyElement, beforepaste.type, DragEvent] {}
  implicit val beforeprintOnHTMLBodyElement = new Binder[HTMLBodyElement, beforeprint.type, Event] {}
  implicit val beforeunloadOnHTMLBodyElement = new Binder[HTMLBodyElement, beforeunload.type, BeforeUnloadEvent] {}
  implicit val blurOnHTMLBodyElement = new Binder[HTMLBodyElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLBodyElement = new Binder[HTMLBodyElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLBodyElement = new Binder[HTMLBodyElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLBodyElement = new Binder[HTMLBodyElement, change.type, Event] {}
  implicit val clickOnHTMLBodyElement = new Binder[HTMLBodyElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLBodyElement = new Binder[HTMLBodyElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLBodyElement = new Binder[HTMLBodyElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLBodyElement = new Binder[HTMLBodyElement, cuechange.type, Event] {}
  implicit val cutOnHTMLBodyElement = new Binder[HTMLBodyElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLBodyElement = new Binder[HTMLBodyElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLBodyElement = new Binder[HTMLBodyElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLBodyElement = new Binder[HTMLBodyElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLBodyElement = new Binder[HTMLBodyElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLBodyElement = new Binder[HTMLBodyElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLBodyElement = new Binder[HTMLBodyElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLBodyElement = new Binder[HTMLBodyElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLBodyElement = new Binder[HTMLBodyElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLBodyElement = new Binder[HTMLBodyElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLBodyElement = new Binder[HTMLBodyElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLBodyElement = new Binder[HTMLBodyElement, emptied.type, Event] {}
  implicit val endedOnHTMLBodyElement = new Binder[HTMLBodyElement, ended.type, Event] {}
  implicit val errorOnHTMLBodyElement = new Binder[HTMLBodyElement, error.type, Event] {}
  implicit val focusOnHTMLBodyElement = new Binder[HTMLBodyElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLBodyElement = new Binder[HTMLBodyElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLBodyElement = new Binder[HTMLBodyElement, focusout.type, FocusEvent] {}
  implicit val hashchangeOnHTMLBodyElement = new Binder[HTMLBodyElement, hashchange.type, Event] {}
  implicit val helpOnHTMLBodyElement = new Binder[HTMLBodyElement, help.type, Event] {}
  implicit val inputOnHTMLBodyElement = new Binder[HTMLBodyElement, input.type, Event] {}
  implicit val keydownOnHTMLBodyElement = new Binder[HTMLBodyElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLBodyElement = new Binder[HTMLBodyElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLBodyElement = new Binder[HTMLBodyElement, keyup.type, KeyboardEvent] {}
  implicit val loadOnHTMLBodyElement = new Binder[HTMLBodyElement, load.type, Event] {}
  implicit val loadeddataOnHTMLBodyElement = new Binder[HTMLBodyElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLBodyElement = new Binder[HTMLBodyElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLBodyElement = new Binder[HTMLBodyElement, loadstart.type, Event] {}
  implicit val messageOnHTMLBodyElement = new Binder[HTMLBodyElement, message.type, MessageEvent] {}
  implicit val mousedownOnHTMLBodyElement = new Binder[HTMLBodyElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLBodyElement = new Binder[HTMLBodyElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLBodyElement = new Binder[HTMLBodyElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLBodyElement = new Binder[HTMLBodyElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLBodyElement = new Binder[HTMLBodyElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLBodyElement = new Binder[HTMLBodyElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLBodyElement = new Binder[HTMLBodyElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLBodyElement = new Binder[HTMLBodyElement, mousewheel.type, WheelEvent] {}
  implicit val offlineOnHTMLBodyElement = new Binder[HTMLBodyElement, offline.type, Event] {}
  implicit val onlineOnHTMLBodyElement = new Binder[HTMLBodyElement, online.type, Event] {}
  implicit val pasteOnHTMLBodyElement = new Binder[HTMLBodyElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLBodyElement = new Binder[HTMLBodyElement, pause.type, Event] {}
  implicit val playOnHTMLBodyElement = new Binder[HTMLBodyElement, play.type, Event] {}
  implicit val playingOnHTMLBodyElement = new Binder[HTMLBodyElement, playing.type, Event] {}
  implicit val popstateOnHTMLBodyElement = new Binder[HTMLBodyElement, popstate.type, PopStateEvent] {}
  implicit val progressOnHTMLBodyElement = new Binder[HTMLBodyElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLBodyElement = new Binder[HTMLBodyElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLBodyElement = new Binder[HTMLBodyElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLBodyElement = new Binder[HTMLBodyElement, reset.type, Event] {}
  implicit val resizeOnHTMLBodyElement = new Binder[HTMLBodyElement, resize.type, UIEvent] {}
  implicit val scrollOnHTMLBodyElement = new Binder[HTMLBodyElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLBodyElement = new Binder[HTMLBodyElement, seeked.type, Event] {}
  implicit val seekingOnHTMLBodyElement = new Binder[HTMLBodyElement, seeking.type, Event] {}
  implicit val selectOnHTMLBodyElement = new Binder[HTMLBodyElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLBodyElement = new Binder[HTMLBodyElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLBodyElement = new Binder[HTMLBodyElement, stalled.type, Event] {}
  implicit val storageOnHTMLBodyElement = new Binder[HTMLBodyElement, storage.type, StorageEvent] {}
  implicit val submitOnHTMLBodyElement = new Binder[HTMLBodyElement, submit.type, Event] {}
  implicit val suspendOnHTMLBodyElement = new Binder[HTMLBodyElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLBodyElement = new Binder[HTMLBodyElement, timeupdate.type, Event] {}
  implicit val unloadOnHTMLBodyElement = new Binder[HTMLBodyElement, unload.type, Event] {}
  implicit val volumechangeOnHTMLBodyElement = new Binder[HTMLBodyElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLBodyElement = new Binder[HTMLBodyElement, waiting.type, Event] {}
  implicit val abortOnHTMLButtonElement = new Binder[HTMLButtonElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLButtonElement = new Binder[HTMLButtonElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLButtonElement = new Binder[HTMLButtonElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLButtonElement = new Binder[HTMLButtonElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLButtonElement = new Binder[HTMLButtonElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLButtonElement = new Binder[HTMLButtonElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLButtonElement = new Binder[HTMLButtonElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLButtonElement = new Binder[HTMLButtonElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLButtonElement = new Binder[HTMLButtonElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLButtonElement = new Binder[HTMLButtonElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLButtonElement = new Binder[HTMLButtonElement, change.type, Event] {}
  implicit val clickOnHTMLButtonElement = new Binder[HTMLButtonElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLButtonElement = new Binder[HTMLButtonElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLButtonElement = new Binder[HTMLButtonElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLButtonElement = new Binder[HTMLButtonElement, cuechange.type, Event] {}
  implicit val cutOnHTMLButtonElement = new Binder[HTMLButtonElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLButtonElement = new Binder[HTMLButtonElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLButtonElement = new Binder[HTMLButtonElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLButtonElement = new Binder[HTMLButtonElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLButtonElement = new Binder[HTMLButtonElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLButtonElement = new Binder[HTMLButtonElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLButtonElement = new Binder[HTMLButtonElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLButtonElement = new Binder[HTMLButtonElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLButtonElement = new Binder[HTMLButtonElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLButtonElement = new Binder[HTMLButtonElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLButtonElement = new Binder[HTMLButtonElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLButtonElement = new Binder[HTMLButtonElement, emptied.type, Event] {}
  implicit val endedOnHTMLButtonElement = new Binder[HTMLButtonElement, ended.type, Event] {}
  implicit val focusOnHTMLButtonElement = new Binder[HTMLButtonElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLButtonElement = new Binder[HTMLButtonElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLButtonElement = new Binder[HTMLButtonElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLButtonElement = new Binder[HTMLButtonElement, help.type, Event] {}
  implicit val inputOnHTMLButtonElement = new Binder[HTMLButtonElement, input.type, Event] {}
  implicit val keydownOnHTMLButtonElement = new Binder[HTMLButtonElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLButtonElement = new Binder[HTMLButtonElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLButtonElement = new Binder[HTMLButtonElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLButtonElement = new Binder[HTMLButtonElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLButtonElement = new Binder[HTMLButtonElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLButtonElement = new Binder[HTMLButtonElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLButtonElement = new Binder[HTMLButtonElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLButtonElement = new Binder[HTMLButtonElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLButtonElement = new Binder[HTMLButtonElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLButtonElement = new Binder[HTMLButtonElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLButtonElement = new Binder[HTMLButtonElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLButtonElement = new Binder[HTMLButtonElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLButtonElement = new Binder[HTMLButtonElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLButtonElement = new Binder[HTMLButtonElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLButtonElement = new Binder[HTMLButtonElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLButtonElement = new Binder[HTMLButtonElement, pause.type, Event] {}
  implicit val playOnHTMLButtonElement = new Binder[HTMLButtonElement, play.type, Event] {}
  implicit val playingOnHTMLButtonElement = new Binder[HTMLButtonElement, playing.type, Event] {}
  implicit val progressOnHTMLButtonElement = new Binder[HTMLButtonElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLButtonElement = new Binder[HTMLButtonElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLButtonElement = new Binder[HTMLButtonElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLButtonElement = new Binder[HTMLButtonElement, reset.type, Event] {}
  implicit val scrollOnHTMLButtonElement = new Binder[HTMLButtonElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLButtonElement = new Binder[HTMLButtonElement, seeked.type, Event] {}
  implicit val seekingOnHTMLButtonElement = new Binder[HTMLButtonElement, seeking.type, Event] {}
  implicit val selectOnHTMLButtonElement = new Binder[HTMLButtonElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLButtonElement = new Binder[HTMLButtonElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLButtonElement = new Binder[HTMLButtonElement, stalled.type, Event] {}
  implicit val submitOnHTMLButtonElement = new Binder[HTMLButtonElement, submit.type, Event] {}
  implicit val suspendOnHTMLButtonElement = new Binder[HTMLButtonElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLButtonElement = new Binder[HTMLButtonElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLButtonElement = new Binder[HTMLButtonElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLButtonElement = new Binder[HTMLButtonElement, waiting.type, Event] {}
  implicit val abortOnHTMLCanvasElement = new Binder[HTMLCanvasElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLCanvasElement = new Binder[HTMLCanvasElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLCanvasElement = new Binder[HTMLCanvasElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLCanvasElement = new Binder[HTMLCanvasElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLCanvasElement = new Binder[HTMLCanvasElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLCanvasElement = new Binder[HTMLCanvasElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLCanvasElement = new Binder[HTMLCanvasElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLCanvasElement = new Binder[HTMLCanvasElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLCanvasElement = new Binder[HTMLCanvasElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLCanvasElement = new Binder[HTMLCanvasElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLCanvasElement = new Binder[HTMLCanvasElement, change.type, Event] {}
  implicit val clickOnHTMLCanvasElement = new Binder[HTMLCanvasElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLCanvasElement = new Binder[HTMLCanvasElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLCanvasElement = new Binder[HTMLCanvasElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLCanvasElement = new Binder[HTMLCanvasElement, cuechange.type, Event] {}
  implicit val cutOnHTMLCanvasElement = new Binder[HTMLCanvasElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLCanvasElement = new Binder[HTMLCanvasElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLCanvasElement = new Binder[HTMLCanvasElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLCanvasElement = new Binder[HTMLCanvasElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLCanvasElement = new Binder[HTMLCanvasElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLCanvasElement = new Binder[HTMLCanvasElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLCanvasElement = new Binder[HTMLCanvasElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLCanvasElement = new Binder[HTMLCanvasElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLCanvasElement = new Binder[HTMLCanvasElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLCanvasElement = new Binder[HTMLCanvasElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLCanvasElement = new Binder[HTMLCanvasElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLCanvasElement = new Binder[HTMLCanvasElement, emptied.type, Event] {}
  implicit val endedOnHTMLCanvasElement = new Binder[HTMLCanvasElement, ended.type, Event] {}
  implicit val focusOnHTMLCanvasElement = new Binder[HTMLCanvasElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLCanvasElement = new Binder[HTMLCanvasElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLCanvasElement = new Binder[HTMLCanvasElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLCanvasElement = new Binder[HTMLCanvasElement, help.type, Event] {}
  implicit val inputOnHTMLCanvasElement = new Binder[HTMLCanvasElement, input.type, Event] {}
  implicit val keydownOnHTMLCanvasElement = new Binder[HTMLCanvasElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLCanvasElement = new Binder[HTMLCanvasElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLCanvasElement = new Binder[HTMLCanvasElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLCanvasElement = new Binder[HTMLCanvasElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLCanvasElement = new Binder[HTMLCanvasElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLCanvasElement = new Binder[HTMLCanvasElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLCanvasElement = new Binder[HTMLCanvasElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLCanvasElement = new Binder[HTMLCanvasElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLCanvasElement = new Binder[HTMLCanvasElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLCanvasElement = new Binder[HTMLCanvasElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLCanvasElement = new Binder[HTMLCanvasElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLCanvasElement = new Binder[HTMLCanvasElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLCanvasElement = new Binder[HTMLCanvasElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLCanvasElement = new Binder[HTMLCanvasElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLCanvasElement = new Binder[HTMLCanvasElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLCanvasElement = new Binder[HTMLCanvasElement, pause.type, Event] {}
  implicit val playOnHTMLCanvasElement = new Binder[HTMLCanvasElement, play.type, Event] {}
  implicit val playingOnHTMLCanvasElement = new Binder[HTMLCanvasElement, playing.type, Event] {}
  implicit val progressOnHTMLCanvasElement = new Binder[HTMLCanvasElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLCanvasElement = new Binder[HTMLCanvasElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLCanvasElement = new Binder[HTMLCanvasElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLCanvasElement = new Binder[HTMLCanvasElement, reset.type, Event] {}
  implicit val scrollOnHTMLCanvasElement = new Binder[HTMLCanvasElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLCanvasElement = new Binder[HTMLCanvasElement, seeked.type, Event] {}
  implicit val seekingOnHTMLCanvasElement = new Binder[HTMLCanvasElement, seeking.type, Event] {}
  implicit val selectOnHTMLCanvasElement = new Binder[HTMLCanvasElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLCanvasElement = new Binder[HTMLCanvasElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLCanvasElement = new Binder[HTMLCanvasElement, stalled.type, Event] {}
  implicit val submitOnHTMLCanvasElement = new Binder[HTMLCanvasElement, submit.type, Event] {}
  implicit val suspendOnHTMLCanvasElement = new Binder[HTMLCanvasElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLCanvasElement = new Binder[HTMLCanvasElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLCanvasElement = new Binder[HTMLCanvasElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLCanvasElement = new Binder[HTMLCanvasElement, waiting.type, Event] {}
  implicit val abortOnHTMLDDElement = new Binder[HTMLDDElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLDDElement = new Binder[HTMLDDElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLDDElement = new Binder[HTMLDDElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLDDElement = new Binder[HTMLDDElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLDDElement = new Binder[HTMLDDElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLDDElement = new Binder[HTMLDDElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLDDElement = new Binder[HTMLDDElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLDDElement = new Binder[HTMLDDElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLDDElement = new Binder[HTMLDDElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLDDElement = new Binder[HTMLDDElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLDDElement = new Binder[HTMLDDElement, change.type, Event] {}
  implicit val clickOnHTMLDDElement = new Binder[HTMLDDElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLDDElement = new Binder[HTMLDDElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLDDElement = new Binder[HTMLDDElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLDDElement = new Binder[HTMLDDElement, cuechange.type, Event] {}
  implicit val cutOnHTMLDDElement = new Binder[HTMLDDElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLDDElement = new Binder[HTMLDDElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLDDElement = new Binder[HTMLDDElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLDDElement = new Binder[HTMLDDElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLDDElement = new Binder[HTMLDDElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLDDElement = new Binder[HTMLDDElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLDDElement = new Binder[HTMLDDElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLDDElement = new Binder[HTMLDDElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLDDElement = new Binder[HTMLDDElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLDDElement = new Binder[HTMLDDElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLDDElement = new Binder[HTMLDDElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLDDElement = new Binder[HTMLDDElement, emptied.type, Event] {}
  implicit val endedOnHTMLDDElement = new Binder[HTMLDDElement, ended.type, Event] {}
  implicit val focusOnHTMLDDElement = new Binder[HTMLDDElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLDDElement = new Binder[HTMLDDElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLDDElement = new Binder[HTMLDDElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLDDElement = new Binder[HTMLDDElement, help.type, Event] {}
  implicit val inputOnHTMLDDElement = new Binder[HTMLDDElement, input.type, Event] {}
  implicit val keydownOnHTMLDDElement = new Binder[HTMLDDElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLDDElement = new Binder[HTMLDDElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLDDElement = new Binder[HTMLDDElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLDDElement = new Binder[HTMLDDElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLDDElement = new Binder[HTMLDDElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLDDElement = new Binder[HTMLDDElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLDDElement = new Binder[HTMLDDElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLDDElement = new Binder[HTMLDDElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLDDElement = new Binder[HTMLDDElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLDDElement = new Binder[HTMLDDElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLDDElement = new Binder[HTMLDDElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLDDElement = new Binder[HTMLDDElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLDDElement = new Binder[HTMLDDElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLDDElement = new Binder[HTMLDDElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLDDElement = new Binder[HTMLDDElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLDDElement = new Binder[HTMLDDElement, pause.type, Event] {}
  implicit val playOnHTMLDDElement = new Binder[HTMLDDElement, play.type, Event] {}
  implicit val playingOnHTMLDDElement = new Binder[HTMLDDElement, playing.type, Event] {}
  implicit val progressOnHTMLDDElement = new Binder[HTMLDDElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLDDElement = new Binder[HTMLDDElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLDDElement = new Binder[HTMLDDElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLDDElement = new Binder[HTMLDDElement, reset.type, Event] {}
  implicit val scrollOnHTMLDDElement = new Binder[HTMLDDElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLDDElement = new Binder[HTMLDDElement, seeked.type, Event] {}
  implicit val seekingOnHTMLDDElement = new Binder[HTMLDDElement, seeking.type, Event] {}
  implicit val selectOnHTMLDDElement = new Binder[HTMLDDElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLDDElement = new Binder[HTMLDDElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLDDElement = new Binder[HTMLDDElement, stalled.type, Event] {}
  implicit val submitOnHTMLDDElement = new Binder[HTMLDDElement, submit.type, Event] {}
  implicit val suspendOnHTMLDDElement = new Binder[HTMLDDElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLDDElement = new Binder[HTMLDDElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLDDElement = new Binder[HTMLDDElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLDDElement = new Binder[HTMLDDElement, waiting.type, Event] {}
  implicit val abortOnHTMLDListElement = new Binder[HTMLDListElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLDListElement = new Binder[HTMLDListElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLDListElement = new Binder[HTMLDListElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLDListElement = new Binder[HTMLDListElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLDListElement = new Binder[HTMLDListElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLDListElement = new Binder[HTMLDListElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLDListElement = new Binder[HTMLDListElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLDListElement = new Binder[HTMLDListElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLDListElement = new Binder[HTMLDListElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLDListElement = new Binder[HTMLDListElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLDListElement = new Binder[HTMLDListElement, change.type, Event] {}
  implicit val clickOnHTMLDListElement = new Binder[HTMLDListElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLDListElement = new Binder[HTMLDListElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLDListElement = new Binder[HTMLDListElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLDListElement = new Binder[HTMLDListElement, cuechange.type, Event] {}
  implicit val cutOnHTMLDListElement = new Binder[HTMLDListElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLDListElement = new Binder[HTMLDListElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLDListElement = new Binder[HTMLDListElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLDListElement = new Binder[HTMLDListElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLDListElement = new Binder[HTMLDListElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLDListElement = new Binder[HTMLDListElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLDListElement = new Binder[HTMLDListElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLDListElement = new Binder[HTMLDListElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLDListElement = new Binder[HTMLDListElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLDListElement = new Binder[HTMLDListElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLDListElement = new Binder[HTMLDListElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLDListElement = new Binder[HTMLDListElement, emptied.type, Event] {}
  implicit val endedOnHTMLDListElement = new Binder[HTMLDListElement, ended.type, Event] {}
  implicit val focusOnHTMLDListElement = new Binder[HTMLDListElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLDListElement = new Binder[HTMLDListElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLDListElement = new Binder[HTMLDListElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLDListElement = new Binder[HTMLDListElement, help.type, Event] {}
  implicit val inputOnHTMLDListElement = new Binder[HTMLDListElement, input.type, Event] {}
  implicit val keydownOnHTMLDListElement = new Binder[HTMLDListElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLDListElement = new Binder[HTMLDListElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLDListElement = new Binder[HTMLDListElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLDListElement = new Binder[HTMLDListElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLDListElement = new Binder[HTMLDListElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLDListElement = new Binder[HTMLDListElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLDListElement = new Binder[HTMLDListElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLDListElement = new Binder[HTMLDListElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLDListElement = new Binder[HTMLDListElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLDListElement = new Binder[HTMLDListElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLDListElement = new Binder[HTMLDListElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLDListElement = new Binder[HTMLDListElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLDListElement = new Binder[HTMLDListElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLDListElement = new Binder[HTMLDListElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLDListElement = new Binder[HTMLDListElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLDListElement = new Binder[HTMLDListElement, pause.type, Event] {}
  implicit val playOnHTMLDListElement = new Binder[HTMLDListElement, play.type, Event] {}
  implicit val playingOnHTMLDListElement = new Binder[HTMLDListElement, playing.type, Event] {}
  implicit val progressOnHTMLDListElement = new Binder[HTMLDListElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLDListElement = new Binder[HTMLDListElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLDListElement = new Binder[HTMLDListElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLDListElement = new Binder[HTMLDListElement, reset.type, Event] {}
  implicit val scrollOnHTMLDListElement = new Binder[HTMLDListElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLDListElement = new Binder[HTMLDListElement, seeked.type, Event] {}
  implicit val seekingOnHTMLDListElement = new Binder[HTMLDListElement, seeking.type, Event] {}
  implicit val selectOnHTMLDListElement = new Binder[HTMLDListElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLDListElement = new Binder[HTMLDListElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLDListElement = new Binder[HTMLDListElement, stalled.type, Event] {}
  implicit val submitOnHTMLDListElement = new Binder[HTMLDListElement, submit.type, Event] {}
  implicit val suspendOnHTMLDListElement = new Binder[HTMLDListElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLDListElement = new Binder[HTMLDListElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLDListElement = new Binder[HTMLDListElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLDListElement = new Binder[HTMLDListElement, waiting.type, Event] {}
  implicit val abortOnHTMLDTElement = new Binder[HTMLDTElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLDTElement = new Binder[HTMLDTElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLDTElement = new Binder[HTMLDTElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLDTElement = new Binder[HTMLDTElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLDTElement = new Binder[HTMLDTElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLDTElement = new Binder[HTMLDTElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLDTElement = new Binder[HTMLDTElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLDTElement = new Binder[HTMLDTElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLDTElement = new Binder[HTMLDTElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLDTElement = new Binder[HTMLDTElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLDTElement = new Binder[HTMLDTElement, change.type, Event] {}
  implicit val clickOnHTMLDTElement = new Binder[HTMLDTElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLDTElement = new Binder[HTMLDTElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLDTElement = new Binder[HTMLDTElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLDTElement = new Binder[HTMLDTElement, cuechange.type, Event] {}
  implicit val cutOnHTMLDTElement = new Binder[HTMLDTElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLDTElement = new Binder[HTMLDTElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLDTElement = new Binder[HTMLDTElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLDTElement = new Binder[HTMLDTElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLDTElement = new Binder[HTMLDTElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLDTElement = new Binder[HTMLDTElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLDTElement = new Binder[HTMLDTElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLDTElement = new Binder[HTMLDTElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLDTElement = new Binder[HTMLDTElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLDTElement = new Binder[HTMLDTElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLDTElement = new Binder[HTMLDTElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLDTElement = new Binder[HTMLDTElement, emptied.type, Event] {}
  implicit val endedOnHTMLDTElement = new Binder[HTMLDTElement, ended.type, Event] {}
  implicit val focusOnHTMLDTElement = new Binder[HTMLDTElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLDTElement = new Binder[HTMLDTElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLDTElement = new Binder[HTMLDTElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLDTElement = new Binder[HTMLDTElement, help.type, Event] {}
  implicit val inputOnHTMLDTElement = new Binder[HTMLDTElement, input.type, Event] {}
  implicit val keydownOnHTMLDTElement = new Binder[HTMLDTElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLDTElement = new Binder[HTMLDTElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLDTElement = new Binder[HTMLDTElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLDTElement = new Binder[HTMLDTElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLDTElement = new Binder[HTMLDTElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLDTElement = new Binder[HTMLDTElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLDTElement = new Binder[HTMLDTElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLDTElement = new Binder[HTMLDTElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLDTElement = new Binder[HTMLDTElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLDTElement = new Binder[HTMLDTElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLDTElement = new Binder[HTMLDTElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLDTElement = new Binder[HTMLDTElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLDTElement = new Binder[HTMLDTElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLDTElement = new Binder[HTMLDTElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLDTElement = new Binder[HTMLDTElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLDTElement = new Binder[HTMLDTElement, pause.type, Event] {}
  implicit val playOnHTMLDTElement = new Binder[HTMLDTElement, play.type, Event] {}
  implicit val playingOnHTMLDTElement = new Binder[HTMLDTElement, playing.type, Event] {}
  implicit val progressOnHTMLDTElement = new Binder[HTMLDTElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLDTElement = new Binder[HTMLDTElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLDTElement = new Binder[HTMLDTElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLDTElement = new Binder[HTMLDTElement, reset.type, Event] {}
  implicit val scrollOnHTMLDTElement = new Binder[HTMLDTElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLDTElement = new Binder[HTMLDTElement, seeked.type, Event] {}
  implicit val seekingOnHTMLDTElement = new Binder[HTMLDTElement, seeking.type, Event] {}
  implicit val selectOnHTMLDTElement = new Binder[HTMLDTElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLDTElement = new Binder[HTMLDTElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLDTElement = new Binder[HTMLDTElement, stalled.type, Event] {}
  implicit val submitOnHTMLDTElement = new Binder[HTMLDTElement, submit.type, Event] {}
  implicit val suspendOnHTMLDTElement = new Binder[HTMLDTElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLDTElement = new Binder[HTMLDTElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLDTElement = new Binder[HTMLDTElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLDTElement = new Binder[HTMLDTElement, waiting.type, Event] {}
  implicit val abortOnHTMLDataListElement = new Binder[HTMLDataListElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLDataListElement = new Binder[HTMLDataListElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLDataListElement = new Binder[HTMLDataListElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLDataListElement = new Binder[HTMLDataListElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLDataListElement = new Binder[HTMLDataListElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLDataListElement = new Binder[HTMLDataListElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLDataListElement = new Binder[HTMLDataListElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLDataListElement = new Binder[HTMLDataListElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLDataListElement = new Binder[HTMLDataListElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLDataListElement = new Binder[HTMLDataListElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLDataListElement = new Binder[HTMLDataListElement, change.type, Event] {}
  implicit val clickOnHTMLDataListElement = new Binder[HTMLDataListElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLDataListElement = new Binder[HTMLDataListElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLDataListElement = new Binder[HTMLDataListElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLDataListElement = new Binder[HTMLDataListElement, cuechange.type, Event] {}
  implicit val cutOnHTMLDataListElement = new Binder[HTMLDataListElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLDataListElement = new Binder[HTMLDataListElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLDataListElement = new Binder[HTMLDataListElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLDataListElement = new Binder[HTMLDataListElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLDataListElement = new Binder[HTMLDataListElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLDataListElement = new Binder[HTMLDataListElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLDataListElement = new Binder[HTMLDataListElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLDataListElement = new Binder[HTMLDataListElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLDataListElement = new Binder[HTMLDataListElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLDataListElement = new Binder[HTMLDataListElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLDataListElement = new Binder[HTMLDataListElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLDataListElement = new Binder[HTMLDataListElement, emptied.type, Event] {}
  implicit val endedOnHTMLDataListElement = new Binder[HTMLDataListElement, ended.type, Event] {}
  implicit val focusOnHTMLDataListElement = new Binder[HTMLDataListElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLDataListElement = new Binder[HTMLDataListElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLDataListElement = new Binder[HTMLDataListElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLDataListElement = new Binder[HTMLDataListElement, help.type, Event] {}
  implicit val inputOnHTMLDataListElement = new Binder[HTMLDataListElement, input.type, Event] {}
  implicit val keydownOnHTMLDataListElement = new Binder[HTMLDataListElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLDataListElement = new Binder[HTMLDataListElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLDataListElement = new Binder[HTMLDataListElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLDataListElement = new Binder[HTMLDataListElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLDataListElement = new Binder[HTMLDataListElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLDataListElement = new Binder[HTMLDataListElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLDataListElement = new Binder[HTMLDataListElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLDataListElement = new Binder[HTMLDataListElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLDataListElement = new Binder[HTMLDataListElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLDataListElement = new Binder[HTMLDataListElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLDataListElement = new Binder[HTMLDataListElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLDataListElement = new Binder[HTMLDataListElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLDataListElement = new Binder[HTMLDataListElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLDataListElement = new Binder[HTMLDataListElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLDataListElement = new Binder[HTMLDataListElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLDataListElement = new Binder[HTMLDataListElement, pause.type, Event] {}
  implicit val playOnHTMLDataListElement = new Binder[HTMLDataListElement, play.type, Event] {}
  implicit val playingOnHTMLDataListElement = new Binder[HTMLDataListElement, playing.type, Event] {}
  implicit val progressOnHTMLDataListElement = new Binder[HTMLDataListElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLDataListElement = new Binder[HTMLDataListElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLDataListElement = new Binder[HTMLDataListElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLDataListElement = new Binder[HTMLDataListElement, reset.type, Event] {}
  implicit val scrollOnHTMLDataListElement = new Binder[HTMLDataListElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLDataListElement = new Binder[HTMLDataListElement, seeked.type, Event] {}
  implicit val seekingOnHTMLDataListElement = new Binder[HTMLDataListElement, seeking.type, Event] {}
  implicit val selectOnHTMLDataListElement = new Binder[HTMLDataListElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLDataListElement = new Binder[HTMLDataListElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLDataListElement = new Binder[HTMLDataListElement, stalled.type, Event] {}
  implicit val submitOnHTMLDataListElement = new Binder[HTMLDataListElement, submit.type, Event] {}
  implicit val suspendOnHTMLDataListElement = new Binder[HTMLDataListElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLDataListElement = new Binder[HTMLDataListElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLDataListElement = new Binder[HTMLDataListElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLDataListElement = new Binder[HTMLDataListElement, waiting.type, Event] {}
  implicit val abortOnHTMLDivElement = new Binder[HTMLDivElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLDivElement = new Binder[HTMLDivElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLDivElement = new Binder[HTMLDivElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLDivElement = new Binder[HTMLDivElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLDivElement = new Binder[HTMLDivElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLDivElement = new Binder[HTMLDivElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLDivElement = new Binder[HTMLDivElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLDivElement = new Binder[HTMLDivElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLDivElement = new Binder[HTMLDivElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLDivElement = new Binder[HTMLDivElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLDivElement = new Binder[HTMLDivElement, change.type, Event] {}
  implicit val clickOnHTMLDivElement = new Binder[HTMLDivElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLDivElement = new Binder[HTMLDivElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLDivElement = new Binder[HTMLDivElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLDivElement = new Binder[HTMLDivElement, cuechange.type, Event] {}
  implicit val cutOnHTMLDivElement = new Binder[HTMLDivElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLDivElement = new Binder[HTMLDivElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLDivElement = new Binder[HTMLDivElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLDivElement = new Binder[HTMLDivElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLDivElement = new Binder[HTMLDivElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLDivElement = new Binder[HTMLDivElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLDivElement = new Binder[HTMLDivElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLDivElement = new Binder[HTMLDivElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLDivElement = new Binder[HTMLDivElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLDivElement = new Binder[HTMLDivElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLDivElement = new Binder[HTMLDivElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLDivElement = new Binder[HTMLDivElement, emptied.type, Event] {}
  implicit val endedOnHTMLDivElement = new Binder[HTMLDivElement, ended.type, Event] {}
  implicit val focusOnHTMLDivElement = new Binder[HTMLDivElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLDivElement = new Binder[HTMLDivElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLDivElement = new Binder[HTMLDivElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLDivElement = new Binder[HTMLDivElement, help.type, Event] {}
  implicit val inputOnHTMLDivElement = new Binder[HTMLDivElement, input.type, Event] {}
  implicit val keydownOnHTMLDivElement = new Binder[HTMLDivElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLDivElement = new Binder[HTMLDivElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLDivElement = new Binder[HTMLDivElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLDivElement = new Binder[HTMLDivElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLDivElement = new Binder[HTMLDivElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLDivElement = new Binder[HTMLDivElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLDivElement = new Binder[HTMLDivElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLDivElement = new Binder[HTMLDivElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLDivElement = new Binder[HTMLDivElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLDivElement = new Binder[HTMLDivElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLDivElement = new Binder[HTMLDivElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLDivElement = new Binder[HTMLDivElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLDivElement = new Binder[HTMLDivElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLDivElement = new Binder[HTMLDivElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLDivElement = new Binder[HTMLDivElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLDivElement = new Binder[HTMLDivElement, pause.type, Event] {}
  implicit val playOnHTMLDivElement = new Binder[HTMLDivElement, play.type, Event] {}
  implicit val playingOnHTMLDivElement = new Binder[HTMLDivElement, playing.type, Event] {}
  implicit val progressOnHTMLDivElement = new Binder[HTMLDivElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLDivElement = new Binder[HTMLDivElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLDivElement = new Binder[HTMLDivElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLDivElement = new Binder[HTMLDivElement, reset.type, Event] {}
  implicit val scrollOnHTMLDivElement = new Binder[HTMLDivElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLDivElement = new Binder[HTMLDivElement, seeked.type, Event] {}
  implicit val seekingOnHTMLDivElement = new Binder[HTMLDivElement, seeking.type, Event] {}
  implicit val selectOnHTMLDivElement = new Binder[HTMLDivElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLDivElement = new Binder[HTMLDivElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLDivElement = new Binder[HTMLDivElement, stalled.type, Event] {}
  implicit val submitOnHTMLDivElement = new Binder[HTMLDivElement, submit.type, Event] {}
  implicit val suspendOnHTMLDivElement = new Binder[HTMLDivElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLDivElement = new Binder[HTMLDivElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLDivElement = new Binder[HTMLDivElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLDivElement = new Binder[HTMLDivElement, waiting.type, Event] {}
  implicit val abortOnHTMLDocument = new Binder[HTMLDocument, abort.type, UIEvent] {}
  implicit val activateOnHTMLDocument = new Binder[HTMLDocument, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLDocument = new Binder[HTMLDocument, beforeactivate.type, UIEvent] {}
  implicit val beforedeactivateOnHTMLDocument = new Binder[HTMLDocument, beforedeactivate.type, UIEvent] {}
  implicit val blurOnHTMLDocument = new Binder[HTMLDocument, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLDocument = new Binder[HTMLDocument, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLDocument = new Binder[HTMLDocument, canplaythrough.type, Event] {}
  implicit val changeOnHTMLDocument = new Binder[HTMLDocument, change.type, Event] {}
  implicit val clickOnHTMLDocument = new Binder[HTMLDocument, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLDocument = new Binder[HTMLDocument, contextmenu.type, MouseEvent] {}
  implicit val dblclickOnHTMLDocument = new Binder[HTMLDocument, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLDocument = new Binder[HTMLDocument, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLDocument = new Binder[HTMLDocument, drag.type, DragEvent] {}
  implicit val dragendOnHTMLDocument = new Binder[HTMLDocument, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLDocument = new Binder[HTMLDocument, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLDocument = new Binder[HTMLDocument, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLDocument = new Binder[HTMLDocument, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLDocument = new Binder[HTMLDocument, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLDocument = new Binder[HTMLDocument, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLDocument = new Binder[HTMLDocument, durationchange.type, Event] {}
  implicit val emptiedOnHTMLDocument = new Binder[HTMLDocument, emptied.type, Event] {}
  implicit val endedOnHTMLDocument = new Binder[HTMLDocument, ended.type, Event] {}
  implicit val errorOnHTMLDocument = new Binder[HTMLDocument, error.type, Event] {}
  implicit val focusOnHTMLDocument = new Binder[HTMLDocument, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLDocument = new Binder[HTMLDocument, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLDocument = new Binder[HTMLDocument, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLDocument = new Binder[HTMLDocument, help.type, Event] {}
  implicit val inputOnHTMLDocument = new Binder[HTMLDocument, input.type, Event] {}
  implicit val keydownOnHTMLDocument = new Binder[HTMLDocument, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLDocument = new Binder[HTMLDocument, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLDocument = new Binder[HTMLDocument, keyup.type, KeyboardEvent] {}
  implicit val loadOnHTMLDocument = new Binder[HTMLDocument, load.type, Event] {}
  implicit val loadeddataOnHTMLDocument = new Binder[HTMLDocument, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLDocument = new Binder[HTMLDocument, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLDocument = new Binder[HTMLDocument, loadstart.type, Event] {}
  implicit val mousedownOnHTMLDocument = new Binder[HTMLDocument, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnHTMLDocument = new Binder[HTMLDocument, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLDocument = new Binder[HTMLDocument, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLDocument = new Binder[HTMLDocument, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLDocument = new Binder[HTMLDocument, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLDocument = new Binder[HTMLDocument, mousewheel.type, WheelEvent] {}
  implicit val pauseOnHTMLDocument = new Binder[HTMLDocument, pause.type, Event] {}
  implicit val playOnHTMLDocument = new Binder[HTMLDocument, play.type, Event] {}
  implicit val playingOnHTMLDocument = new Binder[HTMLDocument, playing.type, Event] {}
  implicit val progressOnHTMLDocument = new Binder[HTMLDocument, progress.type, Event] {}
  implicit val ratechangeOnHTMLDocument = new Binder[HTMLDocument, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLDocument = new Binder[HTMLDocument, readystatechange.type, Event] {}
  implicit val resetOnHTMLDocument = new Binder[HTMLDocument, reset.type, Event] {}
  implicit val scrollOnHTMLDocument = new Binder[HTMLDocument, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLDocument = new Binder[HTMLDocument, seeked.type, Event] {}
  implicit val seekingOnHTMLDocument = new Binder[HTMLDocument, seeking.type, Event] {}
  implicit val selectOnHTMLDocument = new Binder[HTMLDocument, select.type, UIEvent] {}
  implicit val selectionchangeOnHTMLDocument = new Binder[HTMLDocument, selectionchange.type, Event] {}
  implicit val selectstartOnHTMLDocument = new Binder[HTMLDocument, selectstart.type, Event] {}
  implicit val stalledOnHTMLDocument = new Binder[HTMLDocument, stalled.type, Event] {}
  implicit val stopOnHTMLDocument = new Binder[HTMLDocument, stop.type, Event] {}
  implicit val storagecommitOnHTMLDocument = new Binder[HTMLDocument, storagecommit.type, StorageEvent] {}
  implicit val submitOnHTMLDocument = new Binder[HTMLDocument, submit.type, Event] {}
  implicit val suspendOnHTMLDocument = new Binder[HTMLDocument, suspend.type, Event] {}
  implicit val timeupdateOnHTMLDocument = new Binder[HTMLDocument, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLDocument = new Binder[HTMLDocument, volumechange.type, Event] {}
  implicit val waitingOnHTMLDocument = new Binder[HTMLDocument, waiting.type, Event] {}
  implicit val abortOnHTMLElement = new Binder[HTMLElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLElement = new Binder[HTMLElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLElement = new Binder[HTMLElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLElement = new Binder[HTMLElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLElement = new Binder[HTMLElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLElement = new Binder[HTMLElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLElement = new Binder[HTMLElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLElement = new Binder[HTMLElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLElement = new Binder[HTMLElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLElement = new Binder[HTMLElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLElement = new Binder[HTMLElement, change.type, Event] {}
  implicit val clickOnHTMLElement = new Binder[HTMLElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLElement = new Binder[HTMLElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLElement = new Binder[HTMLElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLElement = new Binder[HTMLElement, cuechange.type, Event] {}
  implicit val cutOnHTMLElement = new Binder[HTMLElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLElement = new Binder[HTMLElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLElement = new Binder[HTMLElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLElement = new Binder[HTMLElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLElement = new Binder[HTMLElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLElement = new Binder[HTMLElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLElement = new Binder[HTMLElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLElement = new Binder[HTMLElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLElement = new Binder[HTMLElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLElement = new Binder[HTMLElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLElement = new Binder[HTMLElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLElement = new Binder[HTMLElement, emptied.type, Event] {}
  implicit val endedOnHTMLElement = new Binder[HTMLElement, ended.type, Event] {}
  implicit val focusOnHTMLElement = new Binder[HTMLElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLElement = new Binder[HTMLElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLElement = new Binder[HTMLElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLElement = new Binder[HTMLElement, help.type, Event] {}
  implicit val inputOnHTMLElement = new Binder[HTMLElement, input.type, Event] {}
  implicit val keydownOnHTMLElement = new Binder[HTMLElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLElement = new Binder[HTMLElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLElement = new Binder[HTMLElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLElement = new Binder[HTMLElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLElement = new Binder[HTMLElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLElement = new Binder[HTMLElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLElement = new Binder[HTMLElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLElement = new Binder[HTMLElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLElement = new Binder[HTMLElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLElement = new Binder[HTMLElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLElement = new Binder[HTMLElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLElement = new Binder[HTMLElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLElement = new Binder[HTMLElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLElement = new Binder[HTMLElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLElement = new Binder[HTMLElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLElement = new Binder[HTMLElement, pause.type, Event] {}
  implicit val playOnHTMLElement = new Binder[HTMLElement, play.type, Event] {}
  implicit val playingOnHTMLElement = new Binder[HTMLElement, playing.type, Event] {}
  implicit val progressOnHTMLElement = new Binder[HTMLElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLElement = new Binder[HTMLElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLElement = new Binder[HTMLElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLElement = new Binder[HTMLElement, reset.type, Event] {}
  implicit val scrollOnHTMLElement = new Binder[HTMLElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLElement = new Binder[HTMLElement, seeked.type, Event] {}
  implicit val seekingOnHTMLElement = new Binder[HTMLElement, seeking.type, Event] {}
  implicit val selectOnHTMLElement = new Binder[HTMLElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLElement = new Binder[HTMLElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLElement = new Binder[HTMLElement, stalled.type, Event] {}
  implicit val submitOnHTMLElement = new Binder[HTMLElement, submit.type, Event] {}
  implicit val suspendOnHTMLElement = new Binder[HTMLElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLElement = new Binder[HTMLElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLElement = new Binder[HTMLElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLElement = new Binder[HTMLElement, waiting.type, Event] {}
  implicit val abortOnHTMLEmbedElement = new Binder[HTMLEmbedElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLEmbedElement = new Binder[HTMLEmbedElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLEmbedElement = new Binder[HTMLEmbedElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLEmbedElement = new Binder[HTMLEmbedElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLEmbedElement = new Binder[HTMLEmbedElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLEmbedElement = new Binder[HTMLEmbedElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLEmbedElement = new Binder[HTMLEmbedElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLEmbedElement = new Binder[HTMLEmbedElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLEmbedElement = new Binder[HTMLEmbedElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLEmbedElement = new Binder[HTMLEmbedElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLEmbedElement = new Binder[HTMLEmbedElement, change.type, Event] {}
  implicit val clickOnHTMLEmbedElement = new Binder[HTMLEmbedElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLEmbedElement = new Binder[HTMLEmbedElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLEmbedElement = new Binder[HTMLEmbedElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLEmbedElement = new Binder[HTMLEmbedElement, cuechange.type, Event] {}
  implicit val cutOnHTMLEmbedElement = new Binder[HTMLEmbedElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLEmbedElement = new Binder[HTMLEmbedElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLEmbedElement = new Binder[HTMLEmbedElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLEmbedElement = new Binder[HTMLEmbedElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLEmbedElement = new Binder[HTMLEmbedElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLEmbedElement = new Binder[HTMLEmbedElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLEmbedElement = new Binder[HTMLEmbedElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLEmbedElement = new Binder[HTMLEmbedElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLEmbedElement = new Binder[HTMLEmbedElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLEmbedElement = new Binder[HTMLEmbedElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLEmbedElement = new Binder[HTMLEmbedElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLEmbedElement = new Binder[HTMLEmbedElement, emptied.type, Event] {}
  implicit val endedOnHTMLEmbedElement = new Binder[HTMLEmbedElement, ended.type, Event] {}
  implicit val focusOnHTMLEmbedElement = new Binder[HTMLEmbedElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLEmbedElement = new Binder[HTMLEmbedElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLEmbedElement = new Binder[HTMLEmbedElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLEmbedElement = new Binder[HTMLEmbedElement, help.type, Event] {}
  implicit val inputOnHTMLEmbedElement = new Binder[HTMLEmbedElement, input.type, Event] {}
  implicit val keydownOnHTMLEmbedElement = new Binder[HTMLEmbedElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLEmbedElement = new Binder[HTMLEmbedElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLEmbedElement = new Binder[HTMLEmbedElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLEmbedElement = new Binder[HTMLEmbedElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLEmbedElement = new Binder[HTMLEmbedElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLEmbedElement = new Binder[HTMLEmbedElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLEmbedElement = new Binder[HTMLEmbedElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLEmbedElement = new Binder[HTMLEmbedElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLEmbedElement = new Binder[HTMLEmbedElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLEmbedElement = new Binder[HTMLEmbedElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLEmbedElement = new Binder[HTMLEmbedElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLEmbedElement = new Binder[HTMLEmbedElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLEmbedElement = new Binder[HTMLEmbedElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLEmbedElement = new Binder[HTMLEmbedElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLEmbedElement = new Binder[HTMLEmbedElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLEmbedElement = new Binder[HTMLEmbedElement, pause.type, Event] {}
  implicit val playOnHTMLEmbedElement = new Binder[HTMLEmbedElement, play.type, Event] {}
  implicit val playingOnHTMLEmbedElement = new Binder[HTMLEmbedElement, playing.type, Event] {}
  implicit val progressOnHTMLEmbedElement = new Binder[HTMLEmbedElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLEmbedElement = new Binder[HTMLEmbedElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLEmbedElement = new Binder[HTMLEmbedElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLEmbedElement = new Binder[HTMLEmbedElement, reset.type, Event] {}
  implicit val scrollOnHTMLEmbedElement = new Binder[HTMLEmbedElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLEmbedElement = new Binder[HTMLEmbedElement, seeked.type, Event] {}
  implicit val seekingOnHTMLEmbedElement = new Binder[HTMLEmbedElement, seeking.type, Event] {}
  implicit val selectOnHTMLEmbedElement = new Binder[HTMLEmbedElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLEmbedElement = new Binder[HTMLEmbedElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLEmbedElement = new Binder[HTMLEmbedElement, stalled.type, Event] {}
  implicit val submitOnHTMLEmbedElement = new Binder[HTMLEmbedElement, submit.type, Event] {}
  implicit val suspendOnHTMLEmbedElement = new Binder[HTMLEmbedElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLEmbedElement = new Binder[HTMLEmbedElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLEmbedElement = new Binder[HTMLEmbedElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLEmbedElement = new Binder[HTMLEmbedElement, waiting.type, Event] {}
  implicit val abortOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, change.type, Event] {}
  implicit val clickOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, cuechange.type, Event] {}
  implicit val cutOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, emptied.type, Event] {}
  implicit val endedOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, ended.type, Event] {}
  implicit val focusOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, help.type, Event] {}
  implicit val inputOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, input.type, Event] {}
  implicit val keydownOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, pause.type, Event] {}
  implicit val playOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, play.type, Event] {}
  implicit val playingOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, playing.type, Event] {}
  implicit val progressOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, reset.type, Event] {}
  implicit val scrollOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, seeked.type, Event] {}
  implicit val seekingOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, seeking.type, Event] {}
  implicit val selectOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, stalled.type, Event] {}
  implicit val submitOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, submit.type, Event] {}
  implicit val suspendOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLFieldSetElement = new Binder[HTMLFieldSetElement, waiting.type, Event] {}
  implicit val abortOnHTMLFormElement = new Binder[HTMLFormElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLFormElement = new Binder[HTMLFormElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLFormElement = new Binder[HTMLFormElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLFormElement = new Binder[HTMLFormElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLFormElement = new Binder[HTMLFormElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLFormElement = new Binder[HTMLFormElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLFormElement = new Binder[HTMLFormElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLFormElement = new Binder[HTMLFormElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLFormElement = new Binder[HTMLFormElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLFormElement = new Binder[HTMLFormElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLFormElement = new Binder[HTMLFormElement, change.type, Event] {}
  implicit val clickOnHTMLFormElement = new Binder[HTMLFormElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLFormElement = new Binder[HTMLFormElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLFormElement = new Binder[HTMLFormElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLFormElement = new Binder[HTMLFormElement, cuechange.type, Event] {}
  implicit val cutOnHTMLFormElement = new Binder[HTMLFormElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLFormElement = new Binder[HTMLFormElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLFormElement = new Binder[HTMLFormElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLFormElement = new Binder[HTMLFormElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLFormElement = new Binder[HTMLFormElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLFormElement = new Binder[HTMLFormElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLFormElement = new Binder[HTMLFormElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLFormElement = new Binder[HTMLFormElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLFormElement = new Binder[HTMLFormElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLFormElement = new Binder[HTMLFormElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLFormElement = new Binder[HTMLFormElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLFormElement = new Binder[HTMLFormElement, emptied.type, Event] {}
  implicit val endedOnHTMLFormElement = new Binder[HTMLFormElement, ended.type, Event] {}
  implicit val focusOnHTMLFormElement = new Binder[HTMLFormElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLFormElement = new Binder[HTMLFormElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLFormElement = new Binder[HTMLFormElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLFormElement = new Binder[HTMLFormElement, help.type, Event] {}
  implicit val inputOnHTMLFormElement = new Binder[HTMLFormElement, input.type, Event] {}
  implicit val keydownOnHTMLFormElement = new Binder[HTMLFormElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLFormElement = new Binder[HTMLFormElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLFormElement = new Binder[HTMLFormElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLFormElement = new Binder[HTMLFormElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLFormElement = new Binder[HTMLFormElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLFormElement = new Binder[HTMLFormElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLFormElement = new Binder[HTMLFormElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLFormElement = new Binder[HTMLFormElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLFormElement = new Binder[HTMLFormElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLFormElement = new Binder[HTMLFormElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLFormElement = new Binder[HTMLFormElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLFormElement = new Binder[HTMLFormElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLFormElement = new Binder[HTMLFormElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLFormElement = new Binder[HTMLFormElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLFormElement = new Binder[HTMLFormElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLFormElement = new Binder[HTMLFormElement, pause.type, Event] {}
  implicit val playOnHTMLFormElement = new Binder[HTMLFormElement, play.type, Event] {}
  implicit val playingOnHTMLFormElement = new Binder[HTMLFormElement, playing.type, Event] {}
  implicit val progressOnHTMLFormElement = new Binder[HTMLFormElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLFormElement = new Binder[HTMLFormElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLFormElement = new Binder[HTMLFormElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLFormElement = new Binder[HTMLFormElement, reset.type, Event] {}
  implicit val scrollOnHTMLFormElement = new Binder[HTMLFormElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLFormElement = new Binder[HTMLFormElement, seeked.type, Event] {}
  implicit val seekingOnHTMLFormElement = new Binder[HTMLFormElement, seeking.type, Event] {}
  implicit val selectOnHTMLFormElement = new Binder[HTMLFormElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLFormElement = new Binder[HTMLFormElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLFormElement = new Binder[HTMLFormElement, stalled.type, Event] {}
  implicit val submitOnHTMLFormElement = new Binder[HTMLFormElement, submit.type, Event] {}
  implicit val suspendOnHTMLFormElement = new Binder[HTMLFormElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLFormElement = new Binder[HTMLFormElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLFormElement = new Binder[HTMLFormElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLFormElement = new Binder[HTMLFormElement, waiting.type, Event] {}
  implicit val abortOnHTMLHRElement = new Binder[HTMLHRElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLHRElement = new Binder[HTMLHRElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLHRElement = new Binder[HTMLHRElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLHRElement = new Binder[HTMLHRElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLHRElement = new Binder[HTMLHRElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLHRElement = new Binder[HTMLHRElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLHRElement = new Binder[HTMLHRElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLHRElement = new Binder[HTMLHRElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLHRElement = new Binder[HTMLHRElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLHRElement = new Binder[HTMLHRElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLHRElement = new Binder[HTMLHRElement, change.type, Event] {}
  implicit val clickOnHTMLHRElement = new Binder[HTMLHRElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLHRElement = new Binder[HTMLHRElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLHRElement = new Binder[HTMLHRElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLHRElement = new Binder[HTMLHRElement, cuechange.type, Event] {}
  implicit val cutOnHTMLHRElement = new Binder[HTMLHRElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLHRElement = new Binder[HTMLHRElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLHRElement = new Binder[HTMLHRElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLHRElement = new Binder[HTMLHRElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLHRElement = new Binder[HTMLHRElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLHRElement = new Binder[HTMLHRElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLHRElement = new Binder[HTMLHRElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLHRElement = new Binder[HTMLHRElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLHRElement = new Binder[HTMLHRElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLHRElement = new Binder[HTMLHRElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLHRElement = new Binder[HTMLHRElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLHRElement = new Binder[HTMLHRElement, emptied.type, Event] {}
  implicit val endedOnHTMLHRElement = new Binder[HTMLHRElement, ended.type, Event] {}
  implicit val focusOnHTMLHRElement = new Binder[HTMLHRElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLHRElement = new Binder[HTMLHRElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLHRElement = new Binder[HTMLHRElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLHRElement = new Binder[HTMLHRElement, help.type, Event] {}
  implicit val inputOnHTMLHRElement = new Binder[HTMLHRElement, input.type, Event] {}
  implicit val keydownOnHTMLHRElement = new Binder[HTMLHRElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLHRElement = new Binder[HTMLHRElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLHRElement = new Binder[HTMLHRElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLHRElement = new Binder[HTMLHRElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLHRElement = new Binder[HTMLHRElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLHRElement = new Binder[HTMLHRElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLHRElement = new Binder[HTMLHRElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLHRElement = new Binder[HTMLHRElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLHRElement = new Binder[HTMLHRElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLHRElement = new Binder[HTMLHRElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLHRElement = new Binder[HTMLHRElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLHRElement = new Binder[HTMLHRElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLHRElement = new Binder[HTMLHRElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLHRElement = new Binder[HTMLHRElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLHRElement = new Binder[HTMLHRElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLHRElement = new Binder[HTMLHRElement, pause.type, Event] {}
  implicit val playOnHTMLHRElement = new Binder[HTMLHRElement, play.type, Event] {}
  implicit val playingOnHTMLHRElement = new Binder[HTMLHRElement, playing.type, Event] {}
  implicit val progressOnHTMLHRElement = new Binder[HTMLHRElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLHRElement = new Binder[HTMLHRElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLHRElement = new Binder[HTMLHRElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLHRElement = new Binder[HTMLHRElement, reset.type, Event] {}
  implicit val scrollOnHTMLHRElement = new Binder[HTMLHRElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLHRElement = new Binder[HTMLHRElement, seeked.type, Event] {}
  implicit val seekingOnHTMLHRElement = new Binder[HTMLHRElement, seeking.type, Event] {}
  implicit val selectOnHTMLHRElement = new Binder[HTMLHRElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLHRElement = new Binder[HTMLHRElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLHRElement = new Binder[HTMLHRElement, stalled.type, Event] {}
  implicit val submitOnHTMLHRElement = new Binder[HTMLHRElement, submit.type, Event] {}
  implicit val suspendOnHTMLHRElement = new Binder[HTMLHRElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLHRElement = new Binder[HTMLHRElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLHRElement = new Binder[HTMLHRElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLHRElement = new Binder[HTMLHRElement, waiting.type, Event] {}
  implicit val abortOnHTMLHeadElement = new Binder[HTMLHeadElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLHeadElement = new Binder[HTMLHeadElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLHeadElement = new Binder[HTMLHeadElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLHeadElement = new Binder[HTMLHeadElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLHeadElement = new Binder[HTMLHeadElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLHeadElement = new Binder[HTMLHeadElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLHeadElement = new Binder[HTMLHeadElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLHeadElement = new Binder[HTMLHeadElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLHeadElement = new Binder[HTMLHeadElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLHeadElement = new Binder[HTMLHeadElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLHeadElement = new Binder[HTMLHeadElement, change.type, Event] {}
  implicit val clickOnHTMLHeadElement = new Binder[HTMLHeadElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLHeadElement = new Binder[HTMLHeadElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLHeadElement = new Binder[HTMLHeadElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLHeadElement = new Binder[HTMLHeadElement, cuechange.type, Event] {}
  implicit val cutOnHTMLHeadElement = new Binder[HTMLHeadElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLHeadElement = new Binder[HTMLHeadElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLHeadElement = new Binder[HTMLHeadElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLHeadElement = new Binder[HTMLHeadElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLHeadElement = new Binder[HTMLHeadElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLHeadElement = new Binder[HTMLHeadElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLHeadElement = new Binder[HTMLHeadElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLHeadElement = new Binder[HTMLHeadElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLHeadElement = new Binder[HTMLHeadElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLHeadElement = new Binder[HTMLHeadElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLHeadElement = new Binder[HTMLHeadElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLHeadElement = new Binder[HTMLHeadElement, emptied.type, Event] {}
  implicit val endedOnHTMLHeadElement = new Binder[HTMLHeadElement, ended.type, Event] {}
  implicit val focusOnHTMLHeadElement = new Binder[HTMLHeadElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLHeadElement = new Binder[HTMLHeadElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLHeadElement = new Binder[HTMLHeadElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLHeadElement = new Binder[HTMLHeadElement, help.type, Event] {}
  implicit val inputOnHTMLHeadElement = new Binder[HTMLHeadElement, input.type, Event] {}
  implicit val keydownOnHTMLHeadElement = new Binder[HTMLHeadElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLHeadElement = new Binder[HTMLHeadElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLHeadElement = new Binder[HTMLHeadElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLHeadElement = new Binder[HTMLHeadElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLHeadElement = new Binder[HTMLHeadElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLHeadElement = new Binder[HTMLHeadElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLHeadElement = new Binder[HTMLHeadElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLHeadElement = new Binder[HTMLHeadElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLHeadElement = new Binder[HTMLHeadElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLHeadElement = new Binder[HTMLHeadElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLHeadElement = new Binder[HTMLHeadElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLHeadElement = new Binder[HTMLHeadElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLHeadElement = new Binder[HTMLHeadElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLHeadElement = new Binder[HTMLHeadElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLHeadElement = new Binder[HTMLHeadElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLHeadElement = new Binder[HTMLHeadElement, pause.type, Event] {}
  implicit val playOnHTMLHeadElement = new Binder[HTMLHeadElement, play.type, Event] {}
  implicit val playingOnHTMLHeadElement = new Binder[HTMLHeadElement, playing.type, Event] {}
  implicit val progressOnHTMLHeadElement = new Binder[HTMLHeadElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLHeadElement = new Binder[HTMLHeadElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLHeadElement = new Binder[HTMLHeadElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLHeadElement = new Binder[HTMLHeadElement, reset.type, Event] {}
  implicit val scrollOnHTMLHeadElement = new Binder[HTMLHeadElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLHeadElement = new Binder[HTMLHeadElement, seeked.type, Event] {}
  implicit val seekingOnHTMLHeadElement = new Binder[HTMLHeadElement, seeking.type, Event] {}
  implicit val selectOnHTMLHeadElement = new Binder[HTMLHeadElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLHeadElement = new Binder[HTMLHeadElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLHeadElement = new Binder[HTMLHeadElement, stalled.type, Event] {}
  implicit val submitOnHTMLHeadElement = new Binder[HTMLHeadElement, submit.type, Event] {}
  implicit val suspendOnHTMLHeadElement = new Binder[HTMLHeadElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLHeadElement = new Binder[HTMLHeadElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLHeadElement = new Binder[HTMLHeadElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLHeadElement = new Binder[HTMLHeadElement, waiting.type, Event] {}
  implicit val abortOnHTMLHeadingElement = new Binder[HTMLHeadingElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLHeadingElement = new Binder[HTMLHeadingElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLHeadingElement = new Binder[HTMLHeadingElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLHeadingElement = new Binder[HTMLHeadingElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLHeadingElement = new Binder[HTMLHeadingElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLHeadingElement = new Binder[HTMLHeadingElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLHeadingElement = new Binder[HTMLHeadingElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLHeadingElement = new Binder[HTMLHeadingElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLHeadingElement = new Binder[HTMLHeadingElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLHeadingElement = new Binder[HTMLHeadingElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLHeadingElement = new Binder[HTMLHeadingElement, change.type, Event] {}
  implicit val clickOnHTMLHeadingElement = new Binder[HTMLHeadingElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLHeadingElement = new Binder[HTMLHeadingElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLHeadingElement = new Binder[HTMLHeadingElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLHeadingElement = new Binder[HTMLHeadingElement, cuechange.type, Event] {}
  implicit val cutOnHTMLHeadingElement = new Binder[HTMLHeadingElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLHeadingElement = new Binder[HTMLHeadingElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLHeadingElement = new Binder[HTMLHeadingElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLHeadingElement = new Binder[HTMLHeadingElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLHeadingElement = new Binder[HTMLHeadingElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLHeadingElement = new Binder[HTMLHeadingElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLHeadingElement = new Binder[HTMLHeadingElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLHeadingElement = new Binder[HTMLHeadingElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLHeadingElement = new Binder[HTMLHeadingElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLHeadingElement = new Binder[HTMLHeadingElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLHeadingElement = new Binder[HTMLHeadingElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLHeadingElement = new Binder[HTMLHeadingElement, emptied.type, Event] {}
  implicit val endedOnHTMLHeadingElement = new Binder[HTMLHeadingElement, ended.type, Event] {}
  implicit val focusOnHTMLHeadingElement = new Binder[HTMLHeadingElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLHeadingElement = new Binder[HTMLHeadingElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLHeadingElement = new Binder[HTMLHeadingElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLHeadingElement = new Binder[HTMLHeadingElement, help.type, Event] {}
  implicit val inputOnHTMLHeadingElement = new Binder[HTMLHeadingElement, input.type, Event] {}
  implicit val keydownOnHTMLHeadingElement = new Binder[HTMLHeadingElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLHeadingElement = new Binder[HTMLHeadingElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLHeadingElement = new Binder[HTMLHeadingElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLHeadingElement = new Binder[HTMLHeadingElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLHeadingElement = new Binder[HTMLHeadingElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLHeadingElement = new Binder[HTMLHeadingElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLHeadingElement = new Binder[HTMLHeadingElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLHeadingElement = new Binder[HTMLHeadingElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLHeadingElement = new Binder[HTMLHeadingElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLHeadingElement = new Binder[HTMLHeadingElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLHeadingElement = new Binder[HTMLHeadingElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLHeadingElement = new Binder[HTMLHeadingElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLHeadingElement = new Binder[HTMLHeadingElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLHeadingElement = new Binder[HTMLHeadingElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLHeadingElement = new Binder[HTMLHeadingElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLHeadingElement = new Binder[HTMLHeadingElement, pause.type, Event] {}
  implicit val playOnHTMLHeadingElement = new Binder[HTMLHeadingElement, play.type, Event] {}
  implicit val playingOnHTMLHeadingElement = new Binder[HTMLHeadingElement, playing.type, Event] {}
  implicit val progressOnHTMLHeadingElement = new Binder[HTMLHeadingElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLHeadingElement = new Binder[HTMLHeadingElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLHeadingElement = new Binder[HTMLHeadingElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLHeadingElement = new Binder[HTMLHeadingElement, reset.type, Event] {}
  implicit val scrollOnHTMLHeadingElement = new Binder[HTMLHeadingElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLHeadingElement = new Binder[HTMLHeadingElement, seeked.type, Event] {}
  implicit val seekingOnHTMLHeadingElement = new Binder[HTMLHeadingElement, seeking.type, Event] {}
  implicit val selectOnHTMLHeadingElement = new Binder[HTMLHeadingElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLHeadingElement = new Binder[HTMLHeadingElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLHeadingElement = new Binder[HTMLHeadingElement, stalled.type, Event] {}
  implicit val submitOnHTMLHeadingElement = new Binder[HTMLHeadingElement, submit.type, Event] {}
  implicit val suspendOnHTMLHeadingElement = new Binder[HTMLHeadingElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLHeadingElement = new Binder[HTMLHeadingElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLHeadingElement = new Binder[HTMLHeadingElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLHeadingElement = new Binder[HTMLHeadingElement, waiting.type, Event] {}
  implicit val abortOnHTMLHtmlElement = new Binder[HTMLHtmlElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLHtmlElement = new Binder[HTMLHtmlElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLHtmlElement = new Binder[HTMLHtmlElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLHtmlElement = new Binder[HTMLHtmlElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLHtmlElement = new Binder[HTMLHtmlElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLHtmlElement = new Binder[HTMLHtmlElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLHtmlElement = new Binder[HTMLHtmlElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLHtmlElement = new Binder[HTMLHtmlElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLHtmlElement = new Binder[HTMLHtmlElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLHtmlElement = new Binder[HTMLHtmlElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLHtmlElement = new Binder[HTMLHtmlElement, change.type, Event] {}
  implicit val clickOnHTMLHtmlElement = new Binder[HTMLHtmlElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLHtmlElement = new Binder[HTMLHtmlElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLHtmlElement = new Binder[HTMLHtmlElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLHtmlElement = new Binder[HTMLHtmlElement, cuechange.type, Event] {}
  implicit val cutOnHTMLHtmlElement = new Binder[HTMLHtmlElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLHtmlElement = new Binder[HTMLHtmlElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLHtmlElement = new Binder[HTMLHtmlElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLHtmlElement = new Binder[HTMLHtmlElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLHtmlElement = new Binder[HTMLHtmlElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLHtmlElement = new Binder[HTMLHtmlElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLHtmlElement = new Binder[HTMLHtmlElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLHtmlElement = new Binder[HTMLHtmlElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLHtmlElement = new Binder[HTMLHtmlElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLHtmlElement = new Binder[HTMLHtmlElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLHtmlElement = new Binder[HTMLHtmlElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLHtmlElement = new Binder[HTMLHtmlElement, emptied.type, Event] {}
  implicit val endedOnHTMLHtmlElement = new Binder[HTMLHtmlElement, ended.type, Event] {}
  implicit val focusOnHTMLHtmlElement = new Binder[HTMLHtmlElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLHtmlElement = new Binder[HTMLHtmlElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLHtmlElement = new Binder[HTMLHtmlElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLHtmlElement = new Binder[HTMLHtmlElement, help.type, Event] {}
  implicit val inputOnHTMLHtmlElement = new Binder[HTMLHtmlElement, input.type, Event] {}
  implicit val keydownOnHTMLHtmlElement = new Binder[HTMLHtmlElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLHtmlElement = new Binder[HTMLHtmlElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLHtmlElement = new Binder[HTMLHtmlElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLHtmlElement = new Binder[HTMLHtmlElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLHtmlElement = new Binder[HTMLHtmlElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLHtmlElement = new Binder[HTMLHtmlElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLHtmlElement = new Binder[HTMLHtmlElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLHtmlElement = new Binder[HTMLHtmlElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLHtmlElement = new Binder[HTMLHtmlElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLHtmlElement = new Binder[HTMLHtmlElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLHtmlElement = new Binder[HTMLHtmlElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLHtmlElement = new Binder[HTMLHtmlElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLHtmlElement = new Binder[HTMLHtmlElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLHtmlElement = new Binder[HTMLHtmlElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLHtmlElement = new Binder[HTMLHtmlElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLHtmlElement = new Binder[HTMLHtmlElement, pause.type, Event] {}
  implicit val playOnHTMLHtmlElement = new Binder[HTMLHtmlElement, play.type, Event] {}
  implicit val playingOnHTMLHtmlElement = new Binder[HTMLHtmlElement, playing.type, Event] {}
  implicit val progressOnHTMLHtmlElement = new Binder[HTMLHtmlElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLHtmlElement = new Binder[HTMLHtmlElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLHtmlElement = new Binder[HTMLHtmlElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLHtmlElement = new Binder[HTMLHtmlElement, reset.type, Event] {}
  implicit val scrollOnHTMLHtmlElement = new Binder[HTMLHtmlElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLHtmlElement = new Binder[HTMLHtmlElement, seeked.type, Event] {}
  implicit val seekingOnHTMLHtmlElement = new Binder[HTMLHtmlElement, seeking.type, Event] {}
  implicit val selectOnHTMLHtmlElement = new Binder[HTMLHtmlElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLHtmlElement = new Binder[HTMLHtmlElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLHtmlElement = new Binder[HTMLHtmlElement, stalled.type, Event] {}
  implicit val submitOnHTMLHtmlElement = new Binder[HTMLHtmlElement, submit.type, Event] {}
  implicit val suspendOnHTMLHtmlElement = new Binder[HTMLHtmlElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLHtmlElement = new Binder[HTMLHtmlElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLHtmlElement = new Binder[HTMLHtmlElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLHtmlElement = new Binder[HTMLHtmlElement, waiting.type, Event] {}
  implicit val abortOnHTMLIFrameElement = new Binder[HTMLIFrameElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLIFrameElement = new Binder[HTMLIFrameElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLIFrameElement = new Binder[HTMLIFrameElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLIFrameElement = new Binder[HTMLIFrameElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLIFrameElement = new Binder[HTMLIFrameElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLIFrameElement = new Binder[HTMLIFrameElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLIFrameElement = new Binder[HTMLIFrameElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLIFrameElement = new Binder[HTMLIFrameElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLIFrameElement = new Binder[HTMLIFrameElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLIFrameElement = new Binder[HTMLIFrameElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLIFrameElement = new Binder[HTMLIFrameElement, change.type, Event] {}
  implicit val clickOnHTMLIFrameElement = new Binder[HTMLIFrameElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLIFrameElement = new Binder[HTMLIFrameElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLIFrameElement = new Binder[HTMLIFrameElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLIFrameElement = new Binder[HTMLIFrameElement, cuechange.type, Event] {}
  implicit val cutOnHTMLIFrameElement = new Binder[HTMLIFrameElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLIFrameElement = new Binder[HTMLIFrameElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLIFrameElement = new Binder[HTMLIFrameElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLIFrameElement = new Binder[HTMLIFrameElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLIFrameElement = new Binder[HTMLIFrameElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLIFrameElement = new Binder[HTMLIFrameElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLIFrameElement = new Binder[HTMLIFrameElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLIFrameElement = new Binder[HTMLIFrameElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLIFrameElement = new Binder[HTMLIFrameElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLIFrameElement = new Binder[HTMLIFrameElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLIFrameElement = new Binder[HTMLIFrameElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLIFrameElement = new Binder[HTMLIFrameElement, emptied.type, Event] {}
  implicit val endedOnHTMLIFrameElement = new Binder[HTMLIFrameElement, ended.type, Event] {}
  implicit val focusOnHTMLIFrameElement = new Binder[HTMLIFrameElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLIFrameElement = new Binder[HTMLIFrameElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLIFrameElement = new Binder[HTMLIFrameElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLIFrameElement = new Binder[HTMLIFrameElement, help.type, Event] {}
  implicit val inputOnHTMLIFrameElement = new Binder[HTMLIFrameElement, input.type, Event] {}
  implicit val keydownOnHTMLIFrameElement = new Binder[HTMLIFrameElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLIFrameElement = new Binder[HTMLIFrameElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLIFrameElement = new Binder[HTMLIFrameElement, keyup.type, KeyboardEvent] {}
  implicit val loadOnHTMLIFrameElement = new Binder[HTMLIFrameElement, load.type, Event] {}
  implicit val loadeddataOnHTMLIFrameElement = new Binder[HTMLIFrameElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLIFrameElement = new Binder[HTMLIFrameElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLIFrameElement = new Binder[HTMLIFrameElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLIFrameElement = new Binder[HTMLIFrameElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLIFrameElement = new Binder[HTMLIFrameElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLIFrameElement = new Binder[HTMLIFrameElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLIFrameElement = new Binder[HTMLIFrameElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLIFrameElement = new Binder[HTMLIFrameElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLIFrameElement = new Binder[HTMLIFrameElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLIFrameElement = new Binder[HTMLIFrameElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLIFrameElement = new Binder[HTMLIFrameElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLIFrameElement = new Binder[HTMLIFrameElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLIFrameElement = new Binder[HTMLIFrameElement, pause.type, Event] {}
  implicit val playOnHTMLIFrameElement = new Binder[HTMLIFrameElement, play.type, Event] {}
  implicit val playingOnHTMLIFrameElement = new Binder[HTMLIFrameElement, playing.type, Event] {}
  implicit val progressOnHTMLIFrameElement = new Binder[HTMLIFrameElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLIFrameElement = new Binder[HTMLIFrameElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLIFrameElement = new Binder[HTMLIFrameElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLIFrameElement = new Binder[HTMLIFrameElement, reset.type, Event] {}
  implicit val scrollOnHTMLIFrameElement = new Binder[HTMLIFrameElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLIFrameElement = new Binder[HTMLIFrameElement, seeked.type, Event] {}
  implicit val seekingOnHTMLIFrameElement = new Binder[HTMLIFrameElement, seeking.type, Event] {}
  implicit val selectOnHTMLIFrameElement = new Binder[HTMLIFrameElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLIFrameElement = new Binder[HTMLIFrameElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLIFrameElement = new Binder[HTMLIFrameElement, stalled.type, Event] {}
  implicit val submitOnHTMLIFrameElement = new Binder[HTMLIFrameElement, submit.type, Event] {}
  implicit val suspendOnHTMLIFrameElement = new Binder[HTMLIFrameElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLIFrameElement = new Binder[HTMLIFrameElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLIFrameElement = new Binder[HTMLIFrameElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLIFrameElement = new Binder[HTMLIFrameElement, waiting.type, Event] {}
  implicit val abortOnHTMLImageElement = new Binder[HTMLImageElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLImageElement = new Binder[HTMLImageElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLImageElement = new Binder[HTMLImageElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLImageElement = new Binder[HTMLImageElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLImageElement = new Binder[HTMLImageElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLImageElement = new Binder[HTMLImageElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLImageElement = new Binder[HTMLImageElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLImageElement = new Binder[HTMLImageElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLImageElement = new Binder[HTMLImageElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLImageElement = new Binder[HTMLImageElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLImageElement = new Binder[HTMLImageElement, change.type, Event] {}
  implicit val clickOnHTMLImageElement = new Binder[HTMLImageElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLImageElement = new Binder[HTMLImageElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLImageElement = new Binder[HTMLImageElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLImageElement = new Binder[HTMLImageElement, cuechange.type, Event] {}
  implicit val cutOnHTMLImageElement = new Binder[HTMLImageElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLImageElement = new Binder[HTMLImageElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLImageElement = new Binder[HTMLImageElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLImageElement = new Binder[HTMLImageElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLImageElement = new Binder[HTMLImageElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLImageElement = new Binder[HTMLImageElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLImageElement = new Binder[HTMLImageElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLImageElement = new Binder[HTMLImageElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLImageElement = new Binder[HTMLImageElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLImageElement = new Binder[HTMLImageElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLImageElement = new Binder[HTMLImageElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLImageElement = new Binder[HTMLImageElement, emptied.type, Event] {}
  implicit val endedOnHTMLImageElement = new Binder[HTMLImageElement, ended.type, Event] {}
  implicit val focusOnHTMLImageElement = new Binder[HTMLImageElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLImageElement = new Binder[HTMLImageElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLImageElement = new Binder[HTMLImageElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLImageElement = new Binder[HTMLImageElement, help.type, Event] {}
  implicit val inputOnHTMLImageElement = new Binder[HTMLImageElement, input.type, Event] {}
  implicit val keydownOnHTMLImageElement = new Binder[HTMLImageElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLImageElement = new Binder[HTMLImageElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLImageElement = new Binder[HTMLImageElement, keyup.type, KeyboardEvent] {}
  implicit val loadOnHTMLImageElement = new Binder[HTMLImageElement, load.type, Event] {}
  implicit val loadeddataOnHTMLImageElement = new Binder[HTMLImageElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLImageElement = new Binder[HTMLImageElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLImageElement = new Binder[HTMLImageElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLImageElement = new Binder[HTMLImageElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLImageElement = new Binder[HTMLImageElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLImageElement = new Binder[HTMLImageElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLImageElement = new Binder[HTMLImageElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLImageElement = new Binder[HTMLImageElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLImageElement = new Binder[HTMLImageElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLImageElement = new Binder[HTMLImageElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLImageElement = new Binder[HTMLImageElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLImageElement = new Binder[HTMLImageElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLImageElement = new Binder[HTMLImageElement, pause.type, Event] {}
  implicit val playOnHTMLImageElement = new Binder[HTMLImageElement, play.type, Event] {}
  implicit val playingOnHTMLImageElement = new Binder[HTMLImageElement, playing.type, Event] {}
  implicit val progressOnHTMLImageElement = new Binder[HTMLImageElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLImageElement = new Binder[HTMLImageElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLImageElement = new Binder[HTMLImageElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLImageElement = new Binder[HTMLImageElement, reset.type, Event] {}
  implicit val scrollOnHTMLImageElement = new Binder[HTMLImageElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLImageElement = new Binder[HTMLImageElement, seeked.type, Event] {}
  implicit val seekingOnHTMLImageElement = new Binder[HTMLImageElement, seeking.type, Event] {}
  implicit val selectOnHTMLImageElement = new Binder[HTMLImageElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLImageElement = new Binder[HTMLImageElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLImageElement = new Binder[HTMLImageElement, stalled.type, Event] {}
  implicit val submitOnHTMLImageElement = new Binder[HTMLImageElement, submit.type, Event] {}
  implicit val suspendOnHTMLImageElement = new Binder[HTMLImageElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLImageElement = new Binder[HTMLImageElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLImageElement = new Binder[HTMLImageElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLImageElement = new Binder[HTMLImageElement, waiting.type, Event] {}
  implicit val abortOnHTMLInputElement = new Binder[HTMLInputElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLInputElement = new Binder[HTMLInputElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLInputElement = new Binder[HTMLInputElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLInputElement = new Binder[HTMLInputElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLInputElement = new Binder[HTMLInputElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLInputElement = new Binder[HTMLInputElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLInputElement = new Binder[HTMLInputElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLInputElement = new Binder[HTMLInputElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLInputElement = new Binder[HTMLInputElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLInputElement = new Binder[HTMLInputElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLInputElement = new Binder[HTMLInputElement, change.type, Event] {}
  implicit val clickOnHTMLInputElement = new Binder[HTMLInputElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLInputElement = new Binder[HTMLInputElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLInputElement = new Binder[HTMLInputElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLInputElement = new Binder[HTMLInputElement, cuechange.type, Event] {}
  implicit val cutOnHTMLInputElement = new Binder[HTMLInputElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLInputElement = new Binder[HTMLInputElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLInputElement = new Binder[HTMLInputElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLInputElement = new Binder[HTMLInputElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLInputElement = new Binder[HTMLInputElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLInputElement = new Binder[HTMLInputElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLInputElement = new Binder[HTMLInputElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLInputElement = new Binder[HTMLInputElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLInputElement = new Binder[HTMLInputElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLInputElement = new Binder[HTMLInputElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLInputElement = new Binder[HTMLInputElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLInputElement = new Binder[HTMLInputElement, emptied.type, Event] {}
  implicit val endedOnHTMLInputElement = new Binder[HTMLInputElement, ended.type, Event] {}
  implicit val focusOnHTMLInputElement = new Binder[HTMLInputElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLInputElement = new Binder[HTMLInputElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLInputElement = new Binder[HTMLInputElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLInputElement = new Binder[HTMLInputElement, help.type, Event] {}
  implicit val inputOnHTMLInputElement = new Binder[HTMLInputElement, input.type, Event] {}
  implicit val keydownOnHTMLInputElement = new Binder[HTMLInputElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLInputElement = new Binder[HTMLInputElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLInputElement = new Binder[HTMLInputElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLInputElement = new Binder[HTMLInputElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLInputElement = new Binder[HTMLInputElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLInputElement = new Binder[HTMLInputElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLInputElement = new Binder[HTMLInputElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLInputElement = new Binder[HTMLInputElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLInputElement = new Binder[HTMLInputElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLInputElement = new Binder[HTMLInputElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLInputElement = new Binder[HTMLInputElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLInputElement = new Binder[HTMLInputElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLInputElement = new Binder[HTMLInputElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLInputElement = new Binder[HTMLInputElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLInputElement = new Binder[HTMLInputElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLInputElement = new Binder[HTMLInputElement, pause.type, Event] {}
  implicit val playOnHTMLInputElement = new Binder[HTMLInputElement, play.type, Event] {}
  implicit val playingOnHTMLInputElement = new Binder[HTMLInputElement, playing.type, Event] {}
  implicit val progressOnHTMLInputElement = new Binder[HTMLInputElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLInputElement = new Binder[HTMLInputElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLInputElement = new Binder[HTMLInputElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLInputElement = new Binder[HTMLInputElement, reset.type, Event] {}
  implicit val scrollOnHTMLInputElement = new Binder[HTMLInputElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLInputElement = new Binder[HTMLInputElement, seeked.type, Event] {}
  implicit val seekingOnHTMLInputElement = new Binder[HTMLInputElement, seeking.type, Event] {}
  implicit val selectOnHTMLInputElement = new Binder[HTMLInputElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLInputElement = new Binder[HTMLInputElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLInputElement = new Binder[HTMLInputElement, stalled.type, Event] {}
  implicit val submitOnHTMLInputElement = new Binder[HTMLInputElement, submit.type, Event] {}
  implicit val suspendOnHTMLInputElement = new Binder[HTMLInputElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLInputElement = new Binder[HTMLInputElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLInputElement = new Binder[HTMLInputElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLInputElement = new Binder[HTMLInputElement, waiting.type, Event] {}
  implicit val abortOnHTMLLIElement = new Binder[HTMLLIElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLLIElement = new Binder[HTMLLIElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLLIElement = new Binder[HTMLLIElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLLIElement = new Binder[HTMLLIElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLLIElement = new Binder[HTMLLIElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLLIElement = new Binder[HTMLLIElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLLIElement = new Binder[HTMLLIElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLLIElement = new Binder[HTMLLIElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLLIElement = new Binder[HTMLLIElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLLIElement = new Binder[HTMLLIElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLLIElement = new Binder[HTMLLIElement, change.type, Event] {}
  implicit val clickOnHTMLLIElement = new Binder[HTMLLIElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLLIElement = new Binder[HTMLLIElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLLIElement = new Binder[HTMLLIElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLLIElement = new Binder[HTMLLIElement, cuechange.type, Event] {}
  implicit val cutOnHTMLLIElement = new Binder[HTMLLIElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLLIElement = new Binder[HTMLLIElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLLIElement = new Binder[HTMLLIElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLLIElement = new Binder[HTMLLIElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLLIElement = new Binder[HTMLLIElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLLIElement = new Binder[HTMLLIElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLLIElement = new Binder[HTMLLIElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLLIElement = new Binder[HTMLLIElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLLIElement = new Binder[HTMLLIElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLLIElement = new Binder[HTMLLIElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLLIElement = new Binder[HTMLLIElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLLIElement = new Binder[HTMLLIElement, emptied.type, Event] {}
  implicit val endedOnHTMLLIElement = new Binder[HTMLLIElement, ended.type, Event] {}
  implicit val focusOnHTMLLIElement = new Binder[HTMLLIElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLLIElement = new Binder[HTMLLIElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLLIElement = new Binder[HTMLLIElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLLIElement = new Binder[HTMLLIElement, help.type, Event] {}
  implicit val inputOnHTMLLIElement = new Binder[HTMLLIElement, input.type, Event] {}
  implicit val keydownOnHTMLLIElement = new Binder[HTMLLIElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLLIElement = new Binder[HTMLLIElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLLIElement = new Binder[HTMLLIElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLLIElement = new Binder[HTMLLIElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLLIElement = new Binder[HTMLLIElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLLIElement = new Binder[HTMLLIElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLLIElement = new Binder[HTMLLIElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLLIElement = new Binder[HTMLLIElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLLIElement = new Binder[HTMLLIElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLLIElement = new Binder[HTMLLIElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLLIElement = new Binder[HTMLLIElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLLIElement = new Binder[HTMLLIElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLLIElement = new Binder[HTMLLIElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLLIElement = new Binder[HTMLLIElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLLIElement = new Binder[HTMLLIElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLLIElement = new Binder[HTMLLIElement, pause.type, Event] {}
  implicit val playOnHTMLLIElement = new Binder[HTMLLIElement, play.type, Event] {}
  implicit val playingOnHTMLLIElement = new Binder[HTMLLIElement, playing.type, Event] {}
  implicit val progressOnHTMLLIElement = new Binder[HTMLLIElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLLIElement = new Binder[HTMLLIElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLLIElement = new Binder[HTMLLIElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLLIElement = new Binder[HTMLLIElement, reset.type, Event] {}
  implicit val scrollOnHTMLLIElement = new Binder[HTMLLIElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLLIElement = new Binder[HTMLLIElement, seeked.type, Event] {}
  implicit val seekingOnHTMLLIElement = new Binder[HTMLLIElement, seeking.type, Event] {}
  implicit val selectOnHTMLLIElement = new Binder[HTMLLIElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLLIElement = new Binder[HTMLLIElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLLIElement = new Binder[HTMLLIElement, stalled.type, Event] {}
  implicit val submitOnHTMLLIElement = new Binder[HTMLLIElement, submit.type, Event] {}
  implicit val suspendOnHTMLLIElement = new Binder[HTMLLIElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLLIElement = new Binder[HTMLLIElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLLIElement = new Binder[HTMLLIElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLLIElement = new Binder[HTMLLIElement, waiting.type, Event] {}
  implicit val abortOnHTMLLabelElement = new Binder[HTMLLabelElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLLabelElement = new Binder[HTMLLabelElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLLabelElement = new Binder[HTMLLabelElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLLabelElement = new Binder[HTMLLabelElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLLabelElement = new Binder[HTMLLabelElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLLabelElement = new Binder[HTMLLabelElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLLabelElement = new Binder[HTMLLabelElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLLabelElement = new Binder[HTMLLabelElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLLabelElement = new Binder[HTMLLabelElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLLabelElement = new Binder[HTMLLabelElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLLabelElement = new Binder[HTMLLabelElement, change.type, Event] {}
  implicit val clickOnHTMLLabelElement = new Binder[HTMLLabelElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLLabelElement = new Binder[HTMLLabelElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLLabelElement = new Binder[HTMLLabelElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLLabelElement = new Binder[HTMLLabelElement, cuechange.type, Event] {}
  implicit val cutOnHTMLLabelElement = new Binder[HTMLLabelElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLLabelElement = new Binder[HTMLLabelElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLLabelElement = new Binder[HTMLLabelElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLLabelElement = new Binder[HTMLLabelElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLLabelElement = new Binder[HTMLLabelElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLLabelElement = new Binder[HTMLLabelElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLLabelElement = new Binder[HTMLLabelElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLLabelElement = new Binder[HTMLLabelElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLLabelElement = new Binder[HTMLLabelElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLLabelElement = new Binder[HTMLLabelElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLLabelElement = new Binder[HTMLLabelElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLLabelElement = new Binder[HTMLLabelElement, emptied.type, Event] {}
  implicit val endedOnHTMLLabelElement = new Binder[HTMLLabelElement, ended.type, Event] {}
  implicit val focusOnHTMLLabelElement = new Binder[HTMLLabelElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLLabelElement = new Binder[HTMLLabelElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLLabelElement = new Binder[HTMLLabelElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLLabelElement = new Binder[HTMLLabelElement, help.type, Event] {}
  implicit val inputOnHTMLLabelElement = new Binder[HTMLLabelElement, input.type, Event] {}
  implicit val keydownOnHTMLLabelElement = new Binder[HTMLLabelElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLLabelElement = new Binder[HTMLLabelElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLLabelElement = new Binder[HTMLLabelElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLLabelElement = new Binder[HTMLLabelElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLLabelElement = new Binder[HTMLLabelElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLLabelElement = new Binder[HTMLLabelElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLLabelElement = new Binder[HTMLLabelElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLLabelElement = new Binder[HTMLLabelElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLLabelElement = new Binder[HTMLLabelElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLLabelElement = new Binder[HTMLLabelElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLLabelElement = new Binder[HTMLLabelElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLLabelElement = new Binder[HTMLLabelElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLLabelElement = new Binder[HTMLLabelElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLLabelElement = new Binder[HTMLLabelElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLLabelElement = new Binder[HTMLLabelElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLLabelElement = new Binder[HTMLLabelElement, pause.type, Event] {}
  implicit val playOnHTMLLabelElement = new Binder[HTMLLabelElement, play.type, Event] {}
  implicit val playingOnHTMLLabelElement = new Binder[HTMLLabelElement, playing.type, Event] {}
  implicit val progressOnHTMLLabelElement = new Binder[HTMLLabelElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLLabelElement = new Binder[HTMLLabelElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLLabelElement = new Binder[HTMLLabelElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLLabelElement = new Binder[HTMLLabelElement, reset.type, Event] {}
  implicit val scrollOnHTMLLabelElement = new Binder[HTMLLabelElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLLabelElement = new Binder[HTMLLabelElement, seeked.type, Event] {}
  implicit val seekingOnHTMLLabelElement = new Binder[HTMLLabelElement, seeking.type, Event] {}
  implicit val selectOnHTMLLabelElement = new Binder[HTMLLabelElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLLabelElement = new Binder[HTMLLabelElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLLabelElement = new Binder[HTMLLabelElement, stalled.type, Event] {}
  implicit val submitOnHTMLLabelElement = new Binder[HTMLLabelElement, submit.type, Event] {}
  implicit val suspendOnHTMLLabelElement = new Binder[HTMLLabelElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLLabelElement = new Binder[HTMLLabelElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLLabelElement = new Binder[HTMLLabelElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLLabelElement = new Binder[HTMLLabelElement, waiting.type, Event] {}
  implicit val abortOnHTMLLegendElement = new Binder[HTMLLegendElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLLegendElement = new Binder[HTMLLegendElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLLegendElement = new Binder[HTMLLegendElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLLegendElement = new Binder[HTMLLegendElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLLegendElement = new Binder[HTMLLegendElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLLegendElement = new Binder[HTMLLegendElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLLegendElement = new Binder[HTMLLegendElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLLegendElement = new Binder[HTMLLegendElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLLegendElement = new Binder[HTMLLegendElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLLegendElement = new Binder[HTMLLegendElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLLegendElement = new Binder[HTMLLegendElement, change.type, Event] {}
  implicit val clickOnHTMLLegendElement = new Binder[HTMLLegendElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLLegendElement = new Binder[HTMLLegendElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLLegendElement = new Binder[HTMLLegendElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLLegendElement = new Binder[HTMLLegendElement, cuechange.type, Event] {}
  implicit val cutOnHTMLLegendElement = new Binder[HTMLLegendElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLLegendElement = new Binder[HTMLLegendElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLLegendElement = new Binder[HTMLLegendElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLLegendElement = new Binder[HTMLLegendElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLLegendElement = new Binder[HTMLLegendElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLLegendElement = new Binder[HTMLLegendElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLLegendElement = new Binder[HTMLLegendElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLLegendElement = new Binder[HTMLLegendElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLLegendElement = new Binder[HTMLLegendElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLLegendElement = new Binder[HTMLLegendElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLLegendElement = new Binder[HTMLLegendElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLLegendElement = new Binder[HTMLLegendElement, emptied.type, Event] {}
  implicit val endedOnHTMLLegendElement = new Binder[HTMLLegendElement, ended.type, Event] {}
  implicit val focusOnHTMLLegendElement = new Binder[HTMLLegendElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLLegendElement = new Binder[HTMLLegendElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLLegendElement = new Binder[HTMLLegendElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLLegendElement = new Binder[HTMLLegendElement, help.type, Event] {}
  implicit val inputOnHTMLLegendElement = new Binder[HTMLLegendElement, input.type, Event] {}
  implicit val keydownOnHTMLLegendElement = new Binder[HTMLLegendElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLLegendElement = new Binder[HTMLLegendElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLLegendElement = new Binder[HTMLLegendElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLLegendElement = new Binder[HTMLLegendElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLLegendElement = new Binder[HTMLLegendElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLLegendElement = new Binder[HTMLLegendElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLLegendElement = new Binder[HTMLLegendElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLLegendElement = new Binder[HTMLLegendElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLLegendElement = new Binder[HTMLLegendElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLLegendElement = new Binder[HTMLLegendElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLLegendElement = new Binder[HTMLLegendElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLLegendElement = new Binder[HTMLLegendElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLLegendElement = new Binder[HTMLLegendElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLLegendElement = new Binder[HTMLLegendElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLLegendElement = new Binder[HTMLLegendElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLLegendElement = new Binder[HTMLLegendElement, pause.type, Event] {}
  implicit val playOnHTMLLegendElement = new Binder[HTMLLegendElement, play.type, Event] {}
  implicit val playingOnHTMLLegendElement = new Binder[HTMLLegendElement, playing.type, Event] {}
  implicit val progressOnHTMLLegendElement = new Binder[HTMLLegendElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLLegendElement = new Binder[HTMLLegendElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLLegendElement = new Binder[HTMLLegendElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLLegendElement = new Binder[HTMLLegendElement, reset.type, Event] {}
  implicit val scrollOnHTMLLegendElement = new Binder[HTMLLegendElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLLegendElement = new Binder[HTMLLegendElement, seeked.type, Event] {}
  implicit val seekingOnHTMLLegendElement = new Binder[HTMLLegendElement, seeking.type, Event] {}
  implicit val selectOnHTMLLegendElement = new Binder[HTMLLegendElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLLegendElement = new Binder[HTMLLegendElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLLegendElement = new Binder[HTMLLegendElement, stalled.type, Event] {}
  implicit val submitOnHTMLLegendElement = new Binder[HTMLLegendElement, submit.type, Event] {}
  implicit val suspendOnHTMLLegendElement = new Binder[HTMLLegendElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLLegendElement = new Binder[HTMLLegendElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLLegendElement = new Binder[HTMLLegendElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLLegendElement = new Binder[HTMLLegendElement, waiting.type, Event] {}
  implicit val abortOnHTMLLinkElement = new Binder[HTMLLinkElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLLinkElement = new Binder[HTMLLinkElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLLinkElement = new Binder[HTMLLinkElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLLinkElement = new Binder[HTMLLinkElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLLinkElement = new Binder[HTMLLinkElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLLinkElement = new Binder[HTMLLinkElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLLinkElement = new Binder[HTMLLinkElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLLinkElement = new Binder[HTMLLinkElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLLinkElement = new Binder[HTMLLinkElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLLinkElement = new Binder[HTMLLinkElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLLinkElement = new Binder[HTMLLinkElement, change.type, Event] {}
  implicit val clickOnHTMLLinkElement = new Binder[HTMLLinkElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLLinkElement = new Binder[HTMLLinkElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLLinkElement = new Binder[HTMLLinkElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLLinkElement = new Binder[HTMLLinkElement, cuechange.type, Event] {}
  implicit val cutOnHTMLLinkElement = new Binder[HTMLLinkElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLLinkElement = new Binder[HTMLLinkElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLLinkElement = new Binder[HTMLLinkElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLLinkElement = new Binder[HTMLLinkElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLLinkElement = new Binder[HTMLLinkElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLLinkElement = new Binder[HTMLLinkElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLLinkElement = new Binder[HTMLLinkElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLLinkElement = new Binder[HTMLLinkElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLLinkElement = new Binder[HTMLLinkElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLLinkElement = new Binder[HTMLLinkElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLLinkElement = new Binder[HTMLLinkElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLLinkElement = new Binder[HTMLLinkElement, emptied.type, Event] {}
  implicit val endedOnHTMLLinkElement = new Binder[HTMLLinkElement, ended.type, Event] {}
  implicit val focusOnHTMLLinkElement = new Binder[HTMLLinkElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLLinkElement = new Binder[HTMLLinkElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLLinkElement = new Binder[HTMLLinkElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLLinkElement = new Binder[HTMLLinkElement, help.type, Event] {}
  implicit val inputOnHTMLLinkElement = new Binder[HTMLLinkElement, input.type, Event] {}
  implicit val keydownOnHTMLLinkElement = new Binder[HTMLLinkElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLLinkElement = new Binder[HTMLLinkElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLLinkElement = new Binder[HTMLLinkElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLLinkElement = new Binder[HTMLLinkElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLLinkElement = new Binder[HTMLLinkElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLLinkElement = new Binder[HTMLLinkElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLLinkElement = new Binder[HTMLLinkElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLLinkElement = new Binder[HTMLLinkElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLLinkElement = new Binder[HTMLLinkElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLLinkElement = new Binder[HTMLLinkElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLLinkElement = new Binder[HTMLLinkElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLLinkElement = new Binder[HTMLLinkElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLLinkElement = new Binder[HTMLLinkElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLLinkElement = new Binder[HTMLLinkElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLLinkElement = new Binder[HTMLLinkElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLLinkElement = new Binder[HTMLLinkElement, pause.type, Event] {}
  implicit val playOnHTMLLinkElement = new Binder[HTMLLinkElement, play.type, Event] {}
  implicit val playingOnHTMLLinkElement = new Binder[HTMLLinkElement, playing.type, Event] {}
  implicit val progressOnHTMLLinkElement = new Binder[HTMLLinkElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLLinkElement = new Binder[HTMLLinkElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLLinkElement = new Binder[HTMLLinkElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLLinkElement = new Binder[HTMLLinkElement, reset.type, Event] {}
  implicit val scrollOnHTMLLinkElement = new Binder[HTMLLinkElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLLinkElement = new Binder[HTMLLinkElement, seeked.type, Event] {}
  implicit val seekingOnHTMLLinkElement = new Binder[HTMLLinkElement, seeking.type, Event] {}
  implicit val selectOnHTMLLinkElement = new Binder[HTMLLinkElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLLinkElement = new Binder[HTMLLinkElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLLinkElement = new Binder[HTMLLinkElement, stalled.type, Event] {}
  implicit val submitOnHTMLLinkElement = new Binder[HTMLLinkElement, submit.type, Event] {}
  implicit val suspendOnHTMLLinkElement = new Binder[HTMLLinkElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLLinkElement = new Binder[HTMLLinkElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLLinkElement = new Binder[HTMLLinkElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLLinkElement = new Binder[HTMLLinkElement, waiting.type, Event] {}
  implicit val abortOnHTMLMapElement = new Binder[HTMLMapElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLMapElement = new Binder[HTMLMapElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLMapElement = new Binder[HTMLMapElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLMapElement = new Binder[HTMLMapElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLMapElement = new Binder[HTMLMapElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLMapElement = new Binder[HTMLMapElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLMapElement = new Binder[HTMLMapElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLMapElement = new Binder[HTMLMapElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLMapElement = new Binder[HTMLMapElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLMapElement = new Binder[HTMLMapElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLMapElement = new Binder[HTMLMapElement, change.type, Event] {}
  implicit val clickOnHTMLMapElement = new Binder[HTMLMapElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLMapElement = new Binder[HTMLMapElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLMapElement = new Binder[HTMLMapElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLMapElement = new Binder[HTMLMapElement, cuechange.type, Event] {}
  implicit val cutOnHTMLMapElement = new Binder[HTMLMapElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLMapElement = new Binder[HTMLMapElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLMapElement = new Binder[HTMLMapElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLMapElement = new Binder[HTMLMapElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLMapElement = new Binder[HTMLMapElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLMapElement = new Binder[HTMLMapElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLMapElement = new Binder[HTMLMapElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLMapElement = new Binder[HTMLMapElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLMapElement = new Binder[HTMLMapElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLMapElement = new Binder[HTMLMapElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLMapElement = new Binder[HTMLMapElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLMapElement = new Binder[HTMLMapElement, emptied.type, Event] {}
  implicit val endedOnHTMLMapElement = new Binder[HTMLMapElement, ended.type, Event] {}
  implicit val focusOnHTMLMapElement = new Binder[HTMLMapElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLMapElement = new Binder[HTMLMapElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLMapElement = new Binder[HTMLMapElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLMapElement = new Binder[HTMLMapElement, help.type, Event] {}
  implicit val inputOnHTMLMapElement = new Binder[HTMLMapElement, input.type, Event] {}
  implicit val keydownOnHTMLMapElement = new Binder[HTMLMapElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLMapElement = new Binder[HTMLMapElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLMapElement = new Binder[HTMLMapElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLMapElement = new Binder[HTMLMapElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLMapElement = new Binder[HTMLMapElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLMapElement = new Binder[HTMLMapElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLMapElement = new Binder[HTMLMapElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLMapElement = new Binder[HTMLMapElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLMapElement = new Binder[HTMLMapElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLMapElement = new Binder[HTMLMapElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLMapElement = new Binder[HTMLMapElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLMapElement = new Binder[HTMLMapElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLMapElement = new Binder[HTMLMapElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLMapElement = new Binder[HTMLMapElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLMapElement = new Binder[HTMLMapElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLMapElement = new Binder[HTMLMapElement, pause.type, Event] {}
  implicit val playOnHTMLMapElement = new Binder[HTMLMapElement, play.type, Event] {}
  implicit val playingOnHTMLMapElement = new Binder[HTMLMapElement, playing.type, Event] {}
  implicit val progressOnHTMLMapElement = new Binder[HTMLMapElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLMapElement = new Binder[HTMLMapElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLMapElement = new Binder[HTMLMapElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLMapElement = new Binder[HTMLMapElement, reset.type, Event] {}
  implicit val scrollOnHTMLMapElement = new Binder[HTMLMapElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLMapElement = new Binder[HTMLMapElement, seeked.type, Event] {}
  implicit val seekingOnHTMLMapElement = new Binder[HTMLMapElement, seeking.type, Event] {}
  implicit val selectOnHTMLMapElement = new Binder[HTMLMapElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLMapElement = new Binder[HTMLMapElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLMapElement = new Binder[HTMLMapElement, stalled.type, Event] {}
  implicit val submitOnHTMLMapElement = new Binder[HTMLMapElement, submit.type, Event] {}
  implicit val suspendOnHTMLMapElement = new Binder[HTMLMapElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLMapElement = new Binder[HTMLMapElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLMapElement = new Binder[HTMLMapElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLMapElement = new Binder[HTMLMapElement, waiting.type, Event] {}
  implicit val abortOnHTMLMediaElement = new Binder[HTMLMediaElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLMediaElement = new Binder[HTMLMediaElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLMediaElement = new Binder[HTMLMediaElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLMediaElement = new Binder[HTMLMediaElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLMediaElement = new Binder[HTMLMediaElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLMediaElement = new Binder[HTMLMediaElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLMediaElement = new Binder[HTMLMediaElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLMediaElement = new Binder[HTMLMediaElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLMediaElement = new Binder[HTMLMediaElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLMediaElement = new Binder[HTMLMediaElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLMediaElement = new Binder[HTMLMediaElement, change.type, Event] {}
  implicit val clickOnHTMLMediaElement = new Binder[HTMLMediaElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLMediaElement = new Binder[HTMLMediaElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLMediaElement = new Binder[HTMLMediaElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLMediaElement = new Binder[HTMLMediaElement, cuechange.type, Event] {}
  implicit val cutOnHTMLMediaElement = new Binder[HTMLMediaElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLMediaElement = new Binder[HTMLMediaElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLMediaElement = new Binder[HTMLMediaElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLMediaElement = new Binder[HTMLMediaElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLMediaElement = new Binder[HTMLMediaElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLMediaElement = new Binder[HTMLMediaElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLMediaElement = new Binder[HTMLMediaElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLMediaElement = new Binder[HTMLMediaElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLMediaElement = new Binder[HTMLMediaElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLMediaElement = new Binder[HTMLMediaElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLMediaElement = new Binder[HTMLMediaElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLMediaElement = new Binder[HTMLMediaElement, emptied.type, Event] {}
  implicit val endedOnHTMLMediaElement = new Binder[HTMLMediaElement, ended.type, Event] {}
  implicit val focusOnHTMLMediaElement = new Binder[HTMLMediaElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLMediaElement = new Binder[HTMLMediaElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLMediaElement = new Binder[HTMLMediaElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLMediaElement = new Binder[HTMLMediaElement, help.type, Event] {}
  implicit val inputOnHTMLMediaElement = new Binder[HTMLMediaElement, input.type, Event] {}
  implicit val keydownOnHTMLMediaElement = new Binder[HTMLMediaElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLMediaElement = new Binder[HTMLMediaElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLMediaElement = new Binder[HTMLMediaElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLMediaElement = new Binder[HTMLMediaElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLMediaElement = new Binder[HTMLMediaElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLMediaElement = new Binder[HTMLMediaElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLMediaElement = new Binder[HTMLMediaElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLMediaElement = new Binder[HTMLMediaElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLMediaElement = new Binder[HTMLMediaElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLMediaElement = new Binder[HTMLMediaElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLMediaElement = new Binder[HTMLMediaElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLMediaElement = new Binder[HTMLMediaElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLMediaElement = new Binder[HTMLMediaElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLMediaElement = new Binder[HTMLMediaElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLMediaElement = new Binder[HTMLMediaElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLMediaElement = new Binder[HTMLMediaElement, pause.type, Event] {}
  implicit val playOnHTMLMediaElement = new Binder[HTMLMediaElement, play.type, Event] {}
  implicit val playingOnHTMLMediaElement = new Binder[HTMLMediaElement, playing.type, Event] {}
  implicit val progressOnHTMLMediaElement = new Binder[HTMLMediaElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLMediaElement = new Binder[HTMLMediaElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLMediaElement = new Binder[HTMLMediaElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLMediaElement = new Binder[HTMLMediaElement, reset.type, Event] {}
  implicit val scrollOnHTMLMediaElement = new Binder[HTMLMediaElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLMediaElement = new Binder[HTMLMediaElement, seeked.type, Event] {}
  implicit val seekingOnHTMLMediaElement = new Binder[HTMLMediaElement, seeking.type, Event] {}
  implicit val selectOnHTMLMediaElement = new Binder[HTMLMediaElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLMediaElement = new Binder[HTMLMediaElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLMediaElement = new Binder[HTMLMediaElement, stalled.type, Event] {}
  implicit val submitOnHTMLMediaElement = new Binder[HTMLMediaElement, submit.type, Event] {}
  implicit val suspendOnHTMLMediaElement = new Binder[HTMLMediaElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLMediaElement = new Binder[HTMLMediaElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLMediaElement = new Binder[HTMLMediaElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLMediaElement = new Binder[HTMLMediaElement, waiting.type, Event] {}
  implicit val abortOnHTMLMenuElement = new Binder[HTMLMenuElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLMenuElement = new Binder[HTMLMenuElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLMenuElement = new Binder[HTMLMenuElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLMenuElement = new Binder[HTMLMenuElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLMenuElement = new Binder[HTMLMenuElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLMenuElement = new Binder[HTMLMenuElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLMenuElement = new Binder[HTMLMenuElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLMenuElement = new Binder[HTMLMenuElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLMenuElement = new Binder[HTMLMenuElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLMenuElement = new Binder[HTMLMenuElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLMenuElement = new Binder[HTMLMenuElement, change.type, Event] {}
  implicit val clickOnHTMLMenuElement = new Binder[HTMLMenuElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLMenuElement = new Binder[HTMLMenuElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLMenuElement = new Binder[HTMLMenuElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLMenuElement = new Binder[HTMLMenuElement, cuechange.type, Event] {}
  implicit val cutOnHTMLMenuElement = new Binder[HTMLMenuElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLMenuElement = new Binder[HTMLMenuElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLMenuElement = new Binder[HTMLMenuElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLMenuElement = new Binder[HTMLMenuElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLMenuElement = new Binder[HTMLMenuElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLMenuElement = new Binder[HTMLMenuElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLMenuElement = new Binder[HTMLMenuElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLMenuElement = new Binder[HTMLMenuElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLMenuElement = new Binder[HTMLMenuElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLMenuElement = new Binder[HTMLMenuElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLMenuElement = new Binder[HTMLMenuElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLMenuElement = new Binder[HTMLMenuElement, emptied.type, Event] {}
  implicit val endedOnHTMLMenuElement = new Binder[HTMLMenuElement, ended.type, Event] {}
  implicit val focusOnHTMLMenuElement = new Binder[HTMLMenuElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLMenuElement = new Binder[HTMLMenuElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLMenuElement = new Binder[HTMLMenuElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLMenuElement = new Binder[HTMLMenuElement, help.type, Event] {}
  implicit val inputOnHTMLMenuElement = new Binder[HTMLMenuElement, input.type, Event] {}
  implicit val keydownOnHTMLMenuElement = new Binder[HTMLMenuElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLMenuElement = new Binder[HTMLMenuElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLMenuElement = new Binder[HTMLMenuElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLMenuElement = new Binder[HTMLMenuElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLMenuElement = new Binder[HTMLMenuElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLMenuElement = new Binder[HTMLMenuElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLMenuElement = new Binder[HTMLMenuElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLMenuElement = new Binder[HTMLMenuElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLMenuElement = new Binder[HTMLMenuElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLMenuElement = new Binder[HTMLMenuElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLMenuElement = new Binder[HTMLMenuElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLMenuElement = new Binder[HTMLMenuElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLMenuElement = new Binder[HTMLMenuElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLMenuElement = new Binder[HTMLMenuElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLMenuElement = new Binder[HTMLMenuElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLMenuElement = new Binder[HTMLMenuElement, pause.type, Event] {}
  implicit val playOnHTMLMenuElement = new Binder[HTMLMenuElement, play.type, Event] {}
  implicit val playingOnHTMLMenuElement = new Binder[HTMLMenuElement, playing.type, Event] {}
  implicit val progressOnHTMLMenuElement = new Binder[HTMLMenuElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLMenuElement = new Binder[HTMLMenuElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLMenuElement = new Binder[HTMLMenuElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLMenuElement = new Binder[HTMLMenuElement, reset.type, Event] {}
  implicit val scrollOnHTMLMenuElement = new Binder[HTMLMenuElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLMenuElement = new Binder[HTMLMenuElement, seeked.type, Event] {}
  implicit val seekingOnHTMLMenuElement = new Binder[HTMLMenuElement, seeking.type, Event] {}
  implicit val selectOnHTMLMenuElement = new Binder[HTMLMenuElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLMenuElement = new Binder[HTMLMenuElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLMenuElement = new Binder[HTMLMenuElement, stalled.type, Event] {}
  implicit val submitOnHTMLMenuElement = new Binder[HTMLMenuElement, submit.type, Event] {}
  implicit val suspendOnHTMLMenuElement = new Binder[HTMLMenuElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLMenuElement = new Binder[HTMLMenuElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLMenuElement = new Binder[HTMLMenuElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLMenuElement = new Binder[HTMLMenuElement, waiting.type, Event] {}
  implicit val abortOnHTMLMetaElement = new Binder[HTMLMetaElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLMetaElement = new Binder[HTMLMetaElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLMetaElement = new Binder[HTMLMetaElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLMetaElement = new Binder[HTMLMetaElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLMetaElement = new Binder[HTMLMetaElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLMetaElement = new Binder[HTMLMetaElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLMetaElement = new Binder[HTMLMetaElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLMetaElement = new Binder[HTMLMetaElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLMetaElement = new Binder[HTMLMetaElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLMetaElement = new Binder[HTMLMetaElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLMetaElement = new Binder[HTMLMetaElement, change.type, Event] {}
  implicit val clickOnHTMLMetaElement = new Binder[HTMLMetaElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLMetaElement = new Binder[HTMLMetaElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLMetaElement = new Binder[HTMLMetaElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLMetaElement = new Binder[HTMLMetaElement, cuechange.type, Event] {}
  implicit val cutOnHTMLMetaElement = new Binder[HTMLMetaElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLMetaElement = new Binder[HTMLMetaElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLMetaElement = new Binder[HTMLMetaElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLMetaElement = new Binder[HTMLMetaElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLMetaElement = new Binder[HTMLMetaElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLMetaElement = new Binder[HTMLMetaElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLMetaElement = new Binder[HTMLMetaElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLMetaElement = new Binder[HTMLMetaElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLMetaElement = new Binder[HTMLMetaElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLMetaElement = new Binder[HTMLMetaElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLMetaElement = new Binder[HTMLMetaElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLMetaElement = new Binder[HTMLMetaElement, emptied.type, Event] {}
  implicit val endedOnHTMLMetaElement = new Binder[HTMLMetaElement, ended.type, Event] {}
  implicit val focusOnHTMLMetaElement = new Binder[HTMLMetaElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLMetaElement = new Binder[HTMLMetaElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLMetaElement = new Binder[HTMLMetaElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLMetaElement = new Binder[HTMLMetaElement, help.type, Event] {}
  implicit val inputOnHTMLMetaElement = new Binder[HTMLMetaElement, input.type, Event] {}
  implicit val keydownOnHTMLMetaElement = new Binder[HTMLMetaElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLMetaElement = new Binder[HTMLMetaElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLMetaElement = new Binder[HTMLMetaElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLMetaElement = new Binder[HTMLMetaElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLMetaElement = new Binder[HTMLMetaElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLMetaElement = new Binder[HTMLMetaElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLMetaElement = new Binder[HTMLMetaElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLMetaElement = new Binder[HTMLMetaElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLMetaElement = new Binder[HTMLMetaElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLMetaElement = new Binder[HTMLMetaElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLMetaElement = new Binder[HTMLMetaElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLMetaElement = new Binder[HTMLMetaElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLMetaElement = new Binder[HTMLMetaElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLMetaElement = new Binder[HTMLMetaElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLMetaElement = new Binder[HTMLMetaElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLMetaElement = new Binder[HTMLMetaElement, pause.type, Event] {}
  implicit val playOnHTMLMetaElement = new Binder[HTMLMetaElement, play.type, Event] {}
  implicit val playingOnHTMLMetaElement = new Binder[HTMLMetaElement, playing.type, Event] {}
  implicit val progressOnHTMLMetaElement = new Binder[HTMLMetaElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLMetaElement = new Binder[HTMLMetaElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLMetaElement = new Binder[HTMLMetaElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLMetaElement = new Binder[HTMLMetaElement, reset.type, Event] {}
  implicit val scrollOnHTMLMetaElement = new Binder[HTMLMetaElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLMetaElement = new Binder[HTMLMetaElement, seeked.type, Event] {}
  implicit val seekingOnHTMLMetaElement = new Binder[HTMLMetaElement, seeking.type, Event] {}
  implicit val selectOnHTMLMetaElement = new Binder[HTMLMetaElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLMetaElement = new Binder[HTMLMetaElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLMetaElement = new Binder[HTMLMetaElement, stalled.type, Event] {}
  implicit val submitOnHTMLMetaElement = new Binder[HTMLMetaElement, submit.type, Event] {}
  implicit val suspendOnHTMLMetaElement = new Binder[HTMLMetaElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLMetaElement = new Binder[HTMLMetaElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLMetaElement = new Binder[HTMLMetaElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLMetaElement = new Binder[HTMLMetaElement, waiting.type, Event] {}
  implicit val abortOnHTMLModElement = new Binder[HTMLModElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLModElement = new Binder[HTMLModElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLModElement = new Binder[HTMLModElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLModElement = new Binder[HTMLModElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLModElement = new Binder[HTMLModElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLModElement = new Binder[HTMLModElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLModElement = new Binder[HTMLModElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLModElement = new Binder[HTMLModElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLModElement = new Binder[HTMLModElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLModElement = new Binder[HTMLModElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLModElement = new Binder[HTMLModElement, change.type, Event] {}
  implicit val clickOnHTMLModElement = new Binder[HTMLModElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLModElement = new Binder[HTMLModElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLModElement = new Binder[HTMLModElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLModElement = new Binder[HTMLModElement, cuechange.type, Event] {}
  implicit val cutOnHTMLModElement = new Binder[HTMLModElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLModElement = new Binder[HTMLModElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLModElement = new Binder[HTMLModElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLModElement = new Binder[HTMLModElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLModElement = new Binder[HTMLModElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLModElement = new Binder[HTMLModElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLModElement = new Binder[HTMLModElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLModElement = new Binder[HTMLModElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLModElement = new Binder[HTMLModElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLModElement = new Binder[HTMLModElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLModElement = new Binder[HTMLModElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLModElement = new Binder[HTMLModElement, emptied.type, Event] {}
  implicit val endedOnHTMLModElement = new Binder[HTMLModElement, ended.type, Event] {}
  implicit val focusOnHTMLModElement = new Binder[HTMLModElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLModElement = new Binder[HTMLModElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLModElement = new Binder[HTMLModElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLModElement = new Binder[HTMLModElement, help.type, Event] {}
  implicit val inputOnHTMLModElement = new Binder[HTMLModElement, input.type, Event] {}
  implicit val keydownOnHTMLModElement = new Binder[HTMLModElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLModElement = new Binder[HTMLModElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLModElement = new Binder[HTMLModElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLModElement = new Binder[HTMLModElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLModElement = new Binder[HTMLModElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLModElement = new Binder[HTMLModElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLModElement = new Binder[HTMLModElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLModElement = new Binder[HTMLModElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLModElement = new Binder[HTMLModElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLModElement = new Binder[HTMLModElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLModElement = new Binder[HTMLModElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLModElement = new Binder[HTMLModElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLModElement = new Binder[HTMLModElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLModElement = new Binder[HTMLModElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLModElement = new Binder[HTMLModElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLModElement = new Binder[HTMLModElement, pause.type, Event] {}
  implicit val playOnHTMLModElement = new Binder[HTMLModElement, play.type, Event] {}
  implicit val playingOnHTMLModElement = new Binder[HTMLModElement, playing.type, Event] {}
  implicit val progressOnHTMLModElement = new Binder[HTMLModElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLModElement = new Binder[HTMLModElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLModElement = new Binder[HTMLModElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLModElement = new Binder[HTMLModElement, reset.type, Event] {}
  implicit val scrollOnHTMLModElement = new Binder[HTMLModElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLModElement = new Binder[HTMLModElement, seeked.type, Event] {}
  implicit val seekingOnHTMLModElement = new Binder[HTMLModElement, seeking.type, Event] {}
  implicit val selectOnHTMLModElement = new Binder[HTMLModElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLModElement = new Binder[HTMLModElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLModElement = new Binder[HTMLModElement, stalled.type, Event] {}
  implicit val submitOnHTMLModElement = new Binder[HTMLModElement, submit.type, Event] {}
  implicit val suspendOnHTMLModElement = new Binder[HTMLModElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLModElement = new Binder[HTMLModElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLModElement = new Binder[HTMLModElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLModElement = new Binder[HTMLModElement, waiting.type, Event] {}
  implicit val abortOnHTMLOListElement = new Binder[HTMLOListElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLOListElement = new Binder[HTMLOListElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLOListElement = new Binder[HTMLOListElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLOListElement = new Binder[HTMLOListElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLOListElement = new Binder[HTMLOListElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLOListElement = new Binder[HTMLOListElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLOListElement = new Binder[HTMLOListElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLOListElement = new Binder[HTMLOListElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLOListElement = new Binder[HTMLOListElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLOListElement = new Binder[HTMLOListElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLOListElement = new Binder[HTMLOListElement, change.type, Event] {}
  implicit val clickOnHTMLOListElement = new Binder[HTMLOListElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLOListElement = new Binder[HTMLOListElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLOListElement = new Binder[HTMLOListElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLOListElement = new Binder[HTMLOListElement, cuechange.type, Event] {}
  implicit val cutOnHTMLOListElement = new Binder[HTMLOListElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLOListElement = new Binder[HTMLOListElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLOListElement = new Binder[HTMLOListElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLOListElement = new Binder[HTMLOListElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLOListElement = new Binder[HTMLOListElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLOListElement = new Binder[HTMLOListElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLOListElement = new Binder[HTMLOListElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLOListElement = new Binder[HTMLOListElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLOListElement = new Binder[HTMLOListElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLOListElement = new Binder[HTMLOListElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLOListElement = new Binder[HTMLOListElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLOListElement = new Binder[HTMLOListElement, emptied.type, Event] {}
  implicit val endedOnHTMLOListElement = new Binder[HTMLOListElement, ended.type, Event] {}
  implicit val focusOnHTMLOListElement = new Binder[HTMLOListElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLOListElement = new Binder[HTMLOListElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLOListElement = new Binder[HTMLOListElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLOListElement = new Binder[HTMLOListElement, help.type, Event] {}
  implicit val inputOnHTMLOListElement = new Binder[HTMLOListElement, input.type, Event] {}
  implicit val keydownOnHTMLOListElement = new Binder[HTMLOListElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLOListElement = new Binder[HTMLOListElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLOListElement = new Binder[HTMLOListElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLOListElement = new Binder[HTMLOListElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLOListElement = new Binder[HTMLOListElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLOListElement = new Binder[HTMLOListElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLOListElement = new Binder[HTMLOListElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLOListElement = new Binder[HTMLOListElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLOListElement = new Binder[HTMLOListElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLOListElement = new Binder[HTMLOListElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLOListElement = new Binder[HTMLOListElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLOListElement = new Binder[HTMLOListElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLOListElement = new Binder[HTMLOListElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLOListElement = new Binder[HTMLOListElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLOListElement = new Binder[HTMLOListElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLOListElement = new Binder[HTMLOListElement, pause.type, Event] {}
  implicit val playOnHTMLOListElement = new Binder[HTMLOListElement, play.type, Event] {}
  implicit val playingOnHTMLOListElement = new Binder[HTMLOListElement, playing.type, Event] {}
  implicit val progressOnHTMLOListElement = new Binder[HTMLOListElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLOListElement = new Binder[HTMLOListElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLOListElement = new Binder[HTMLOListElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLOListElement = new Binder[HTMLOListElement, reset.type, Event] {}
  implicit val scrollOnHTMLOListElement = new Binder[HTMLOListElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLOListElement = new Binder[HTMLOListElement, seeked.type, Event] {}
  implicit val seekingOnHTMLOListElement = new Binder[HTMLOListElement, seeking.type, Event] {}
  implicit val selectOnHTMLOListElement = new Binder[HTMLOListElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLOListElement = new Binder[HTMLOListElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLOListElement = new Binder[HTMLOListElement, stalled.type, Event] {}
  implicit val submitOnHTMLOListElement = new Binder[HTMLOListElement, submit.type, Event] {}
  implicit val suspendOnHTMLOListElement = new Binder[HTMLOListElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLOListElement = new Binder[HTMLOListElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLOListElement = new Binder[HTMLOListElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLOListElement = new Binder[HTMLOListElement, waiting.type, Event] {}
  implicit val abortOnHTMLObjectElement = new Binder[HTMLObjectElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLObjectElement = new Binder[HTMLObjectElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLObjectElement = new Binder[HTMLObjectElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLObjectElement = new Binder[HTMLObjectElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLObjectElement = new Binder[HTMLObjectElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLObjectElement = new Binder[HTMLObjectElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLObjectElement = new Binder[HTMLObjectElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLObjectElement = new Binder[HTMLObjectElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLObjectElement = new Binder[HTMLObjectElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLObjectElement = new Binder[HTMLObjectElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLObjectElement = new Binder[HTMLObjectElement, change.type, Event] {}
  implicit val clickOnHTMLObjectElement = new Binder[HTMLObjectElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLObjectElement = new Binder[HTMLObjectElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLObjectElement = new Binder[HTMLObjectElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLObjectElement = new Binder[HTMLObjectElement, cuechange.type, Event] {}
  implicit val cutOnHTMLObjectElement = new Binder[HTMLObjectElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLObjectElement = new Binder[HTMLObjectElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLObjectElement = new Binder[HTMLObjectElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLObjectElement = new Binder[HTMLObjectElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLObjectElement = new Binder[HTMLObjectElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLObjectElement = new Binder[HTMLObjectElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLObjectElement = new Binder[HTMLObjectElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLObjectElement = new Binder[HTMLObjectElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLObjectElement = new Binder[HTMLObjectElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLObjectElement = new Binder[HTMLObjectElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLObjectElement = new Binder[HTMLObjectElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLObjectElement = new Binder[HTMLObjectElement, emptied.type, Event] {}
  implicit val endedOnHTMLObjectElement = new Binder[HTMLObjectElement, ended.type, Event] {}
  implicit val focusOnHTMLObjectElement = new Binder[HTMLObjectElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLObjectElement = new Binder[HTMLObjectElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLObjectElement = new Binder[HTMLObjectElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLObjectElement = new Binder[HTMLObjectElement, help.type, Event] {}
  implicit val inputOnHTMLObjectElement = new Binder[HTMLObjectElement, input.type, Event] {}
  implicit val keydownOnHTMLObjectElement = new Binder[HTMLObjectElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLObjectElement = new Binder[HTMLObjectElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLObjectElement = new Binder[HTMLObjectElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLObjectElement = new Binder[HTMLObjectElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLObjectElement = new Binder[HTMLObjectElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLObjectElement = new Binder[HTMLObjectElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLObjectElement = new Binder[HTMLObjectElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLObjectElement = new Binder[HTMLObjectElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLObjectElement = new Binder[HTMLObjectElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLObjectElement = new Binder[HTMLObjectElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLObjectElement = new Binder[HTMLObjectElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLObjectElement = new Binder[HTMLObjectElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLObjectElement = new Binder[HTMLObjectElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLObjectElement = new Binder[HTMLObjectElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLObjectElement = new Binder[HTMLObjectElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLObjectElement = new Binder[HTMLObjectElement, pause.type, Event] {}
  implicit val playOnHTMLObjectElement = new Binder[HTMLObjectElement, play.type, Event] {}
  implicit val playingOnHTMLObjectElement = new Binder[HTMLObjectElement, playing.type, Event] {}
  implicit val progressOnHTMLObjectElement = new Binder[HTMLObjectElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLObjectElement = new Binder[HTMLObjectElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLObjectElement = new Binder[HTMLObjectElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLObjectElement = new Binder[HTMLObjectElement, reset.type, Event] {}
  implicit val scrollOnHTMLObjectElement = new Binder[HTMLObjectElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLObjectElement = new Binder[HTMLObjectElement, seeked.type, Event] {}
  implicit val seekingOnHTMLObjectElement = new Binder[HTMLObjectElement, seeking.type, Event] {}
  implicit val selectOnHTMLObjectElement = new Binder[HTMLObjectElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLObjectElement = new Binder[HTMLObjectElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLObjectElement = new Binder[HTMLObjectElement, stalled.type, Event] {}
  implicit val submitOnHTMLObjectElement = new Binder[HTMLObjectElement, submit.type, Event] {}
  implicit val suspendOnHTMLObjectElement = new Binder[HTMLObjectElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLObjectElement = new Binder[HTMLObjectElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLObjectElement = new Binder[HTMLObjectElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLObjectElement = new Binder[HTMLObjectElement, waiting.type, Event] {}
  implicit val abortOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, change.type, Event] {}
  implicit val clickOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, cuechange.type, Event] {}
  implicit val cutOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, emptied.type, Event] {}
  implicit val endedOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, ended.type, Event] {}
  implicit val focusOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, help.type, Event] {}
  implicit val inputOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, input.type, Event] {}
  implicit val keydownOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, pause.type, Event] {}
  implicit val playOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, play.type, Event] {}
  implicit val playingOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, playing.type, Event] {}
  implicit val progressOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, reset.type, Event] {}
  implicit val scrollOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, seeked.type, Event] {}
  implicit val seekingOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, seeking.type, Event] {}
  implicit val selectOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, stalled.type, Event] {}
  implicit val submitOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, submit.type, Event] {}
  implicit val suspendOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLOptGroupElement = new Binder[HTMLOptGroupElement, waiting.type, Event] {}
  implicit val abortOnHTMLOptionElement = new Binder[HTMLOptionElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLOptionElement = new Binder[HTMLOptionElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLOptionElement = new Binder[HTMLOptionElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLOptionElement = new Binder[HTMLOptionElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLOptionElement = new Binder[HTMLOptionElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLOptionElement = new Binder[HTMLOptionElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLOptionElement = new Binder[HTMLOptionElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLOptionElement = new Binder[HTMLOptionElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLOptionElement = new Binder[HTMLOptionElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLOptionElement = new Binder[HTMLOptionElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLOptionElement = new Binder[HTMLOptionElement, change.type, Event] {}
  implicit val clickOnHTMLOptionElement = new Binder[HTMLOptionElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLOptionElement = new Binder[HTMLOptionElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLOptionElement = new Binder[HTMLOptionElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLOptionElement = new Binder[HTMLOptionElement, cuechange.type, Event] {}
  implicit val cutOnHTMLOptionElement = new Binder[HTMLOptionElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLOptionElement = new Binder[HTMLOptionElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLOptionElement = new Binder[HTMLOptionElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLOptionElement = new Binder[HTMLOptionElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLOptionElement = new Binder[HTMLOptionElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLOptionElement = new Binder[HTMLOptionElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLOptionElement = new Binder[HTMLOptionElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLOptionElement = new Binder[HTMLOptionElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLOptionElement = new Binder[HTMLOptionElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLOptionElement = new Binder[HTMLOptionElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLOptionElement = new Binder[HTMLOptionElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLOptionElement = new Binder[HTMLOptionElement, emptied.type, Event] {}
  implicit val endedOnHTMLOptionElement = new Binder[HTMLOptionElement, ended.type, Event] {}
  implicit val focusOnHTMLOptionElement = new Binder[HTMLOptionElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLOptionElement = new Binder[HTMLOptionElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLOptionElement = new Binder[HTMLOptionElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLOptionElement = new Binder[HTMLOptionElement, help.type, Event] {}
  implicit val inputOnHTMLOptionElement = new Binder[HTMLOptionElement, input.type, Event] {}
  implicit val keydownOnHTMLOptionElement = new Binder[HTMLOptionElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLOptionElement = new Binder[HTMLOptionElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLOptionElement = new Binder[HTMLOptionElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLOptionElement = new Binder[HTMLOptionElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLOptionElement = new Binder[HTMLOptionElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLOptionElement = new Binder[HTMLOptionElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLOptionElement = new Binder[HTMLOptionElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLOptionElement = new Binder[HTMLOptionElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLOptionElement = new Binder[HTMLOptionElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLOptionElement = new Binder[HTMLOptionElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLOptionElement = new Binder[HTMLOptionElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLOptionElement = new Binder[HTMLOptionElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLOptionElement = new Binder[HTMLOptionElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLOptionElement = new Binder[HTMLOptionElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLOptionElement = new Binder[HTMLOptionElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLOptionElement = new Binder[HTMLOptionElement, pause.type, Event] {}
  implicit val playOnHTMLOptionElement = new Binder[HTMLOptionElement, play.type, Event] {}
  implicit val playingOnHTMLOptionElement = new Binder[HTMLOptionElement, playing.type, Event] {}
  implicit val progressOnHTMLOptionElement = new Binder[HTMLOptionElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLOptionElement = new Binder[HTMLOptionElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLOptionElement = new Binder[HTMLOptionElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLOptionElement = new Binder[HTMLOptionElement, reset.type, Event] {}
  implicit val scrollOnHTMLOptionElement = new Binder[HTMLOptionElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLOptionElement = new Binder[HTMLOptionElement, seeked.type, Event] {}
  implicit val seekingOnHTMLOptionElement = new Binder[HTMLOptionElement, seeking.type, Event] {}
  implicit val selectOnHTMLOptionElement = new Binder[HTMLOptionElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLOptionElement = new Binder[HTMLOptionElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLOptionElement = new Binder[HTMLOptionElement, stalled.type, Event] {}
  implicit val submitOnHTMLOptionElement = new Binder[HTMLOptionElement, submit.type, Event] {}
  implicit val suspendOnHTMLOptionElement = new Binder[HTMLOptionElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLOptionElement = new Binder[HTMLOptionElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLOptionElement = new Binder[HTMLOptionElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLOptionElement = new Binder[HTMLOptionElement, waiting.type, Event] {}
  implicit val abortOnHTMLParagraphElement = new Binder[HTMLParagraphElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLParagraphElement = new Binder[HTMLParagraphElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLParagraphElement = new Binder[HTMLParagraphElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLParagraphElement = new Binder[HTMLParagraphElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLParagraphElement = new Binder[HTMLParagraphElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLParagraphElement = new Binder[HTMLParagraphElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLParagraphElement = new Binder[HTMLParagraphElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLParagraphElement = new Binder[HTMLParagraphElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLParagraphElement = new Binder[HTMLParagraphElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLParagraphElement = new Binder[HTMLParagraphElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLParagraphElement = new Binder[HTMLParagraphElement, change.type, Event] {}
  implicit val clickOnHTMLParagraphElement = new Binder[HTMLParagraphElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLParagraphElement = new Binder[HTMLParagraphElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLParagraphElement = new Binder[HTMLParagraphElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLParagraphElement = new Binder[HTMLParagraphElement, cuechange.type, Event] {}
  implicit val cutOnHTMLParagraphElement = new Binder[HTMLParagraphElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLParagraphElement = new Binder[HTMLParagraphElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLParagraphElement = new Binder[HTMLParagraphElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLParagraphElement = new Binder[HTMLParagraphElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLParagraphElement = new Binder[HTMLParagraphElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLParagraphElement = new Binder[HTMLParagraphElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLParagraphElement = new Binder[HTMLParagraphElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLParagraphElement = new Binder[HTMLParagraphElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLParagraphElement = new Binder[HTMLParagraphElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLParagraphElement = new Binder[HTMLParagraphElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLParagraphElement = new Binder[HTMLParagraphElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLParagraphElement = new Binder[HTMLParagraphElement, emptied.type, Event] {}
  implicit val endedOnHTMLParagraphElement = new Binder[HTMLParagraphElement, ended.type, Event] {}
  implicit val focusOnHTMLParagraphElement = new Binder[HTMLParagraphElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLParagraphElement = new Binder[HTMLParagraphElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLParagraphElement = new Binder[HTMLParagraphElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLParagraphElement = new Binder[HTMLParagraphElement, help.type, Event] {}
  implicit val inputOnHTMLParagraphElement = new Binder[HTMLParagraphElement, input.type, Event] {}
  implicit val keydownOnHTMLParagraphElement = new Binder[HTMLParagraphElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLParagraphElement = new Binder[HTMLParagraphElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLParagraphElement = new Binder[HTMLParagraphElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLParagraphElement = new Binder[HTMLParagraphElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLParagraphElement = new Binder[HTMLParagraphElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLParagraphElement = new Binder[HTMLParagraphElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLParagraphElement = new Binder[HTMLParagraphElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLParagraphElement = new Binder[HTMLParagraphElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLParagraphElement = new Binder[HTMLParagraphElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLParagraphElement = new Binder[HTMLParagraphElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLParagraphElement = new Binder[HTMLParagraphElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLParagraphElement = new Binder[HTMLParagraphElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLParagraphElement = new Binder[HTMLParagraphElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLParagraphElement = new Binder[HTMLParagraphElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLParagraphElement = new Binder[HTMLParagraphElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLParagraphElement = new Binder[HTMLParagraphElement, pause.type, Event] {}
  implicit val playOnHTMLParagraphElement = new Binder[HTMLParagraphElement, play.type, Event] {}
  implicit val playingOnHTMLParagraphElement = new Binder[HTMLParagraphElement, playing.type, Event] {}
  implicit val progressOnHTMLParagraphElement = new Binder[HTMLParagraphElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLParagraphElement = new Binder[HTMLParagraphElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLParagraphElement = new Binder[HTMLParagraphElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLParagraphElement = new Binder[HTMLParagraphElement, reset.type, Event] {}
  implicit val scrollOnHTMLParagraphElement = new Binder[HTMLParagraphElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLParagraphElement = new Binder[HTMLParagraphElement, seeked.type, Event] {}
  implicit val seekingOnHTMLParagraphElement = new Binder[HTMLParagraphElement, seeking.type, Event] {}
  implicit val selectOnHTMLParagraphElement = new Binder[HTMLParagraphElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLParagraphElement = new Binder[HTMLParagraphElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLParagraphElement = new Binder[HTMLParagraphElement, stalled.type, Event] {}
  implicit val submitOnHTMLParagraphElement = new Binder[HTMLParagraphElement, submit.type, Event] {}
  implicit val suspendOnHTMLParagraphElement = new Binder[HTMLParagraphElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLParagraphElement = new Binder[HTMLParagraphElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLParagraphElement = new Binder[HTMLParagraphElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLParagraphElement = new Binder[HTMLParagraphElement, waiting.type, Event] {}
  implicit val abortOnHTMLParamElement = new Binder[HTMLParamElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLParamElement = new Binder[HTMLParamElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLParamElement = new Binder[HTMLParamElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLParamElement = new Binder[HTMLParamElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLParamElement = new Binder[HTMLParamElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLParamElement = new Binder[HTMLParamElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLParamElement = new Binder[HTMLParamElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLParamElement = new Binder[HTMLParamElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLParamElement = new Binder[HTMLParamElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLParamElement = new Binder[HTMLParamElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLParamElement = new Binder[HTMLParamElement, change.type, Event] {}
  implicit val clickOnHTMLParamElement = new Binder[HTMLParamElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLParamElement = new Binder[HTMLParamElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLParamElement = new Binder[HTMLParamElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLParamElement = new Binder[HTMLParamElement, cuechange.type, Event] {}
  implicit val cutOnHTMLParamElement = new Binder[HTMLParamElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLParamElement = new Binder[HTMLParamElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLParamElement = new Binder[HTMLParamElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLParamElement = new Binder[HTMLParamElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLParamElement = new Binder[HTMLParamElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLParamElement = new Binder[HTMLParamElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLParamElement = new Binder[HTMLParamElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLParamElement = new Binder[HTMLParamElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLParamElement = new Binder[HTMLParamElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLParamElement = new Binder[HTMLParamElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLParamElement = new Binder[HTMLParamElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLParamElement = new Binder[HTMLParamElement, emptied.type, Event] {}
  implicit val endedOnHTMLParamElement = new Binder[HTMLParamElement, ended.type, Event] {}
  implicit val focusOnHTMLParamElement = new Binder[HTMLParamElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLParamElement = new Binder[HTMLParamElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLParamElement = new Binder[HTMLParamElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLParamElement = new Binder[HTMLParamElement, help.type, Event] {}
  implicit val inputOnHTMLParamElement = new Binder[HTMLParamElement, input.type, Event] {}
  implicit val keydownOnHTMLParamElement = new Binder[HTMLParamElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLParamElement = new Binder[HTMLParamElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLParamElement = new Binder[HTMLParamElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLParamElement = new Binder[HTMLParamElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLParamElement = new Binder[HTMLParamElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLParamElement = new Binder[HTMLParamElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLParamElement = new Binder[HTMLParamElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLParamElement = new Binder[HTMLParamElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLParamElement = new Binder[HTMLParamElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLParamElement = new Binder[HTMLParamElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLParamElement = new Binder[HTMLParamElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLParamElement = new Binder[HTMLParamElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLParamElement = new Binder[HTMLParamElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLParamElement = new Binder[HTMLParamElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLParamElement = new Binder[HTMLParamElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLParamElement = new Binder[HTMLParamElement, pause.type, Event] {}
  implicit val playOnHTMLParamElement = new Binder[HTMLParamElement, play.type, Event] {}
  implicit val playingOnHTMLParamElement = new Binder[HTMLParamElement, playing.type, Event] {}
  implicit val progressOnHTMLParamElement = new Binder[HTMLParamElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLParamElement = new Binder[HTMLParamElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLParamElement = new Binder[HTMLParamElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLParamElement = new Binder[HTMLParamElement, reset.type, Event] {}
  implicit val scrollOnHTMLParamElement = new Binder[HTMLParamElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLParamElement = new Binder[HTMLParamElement, seeked.type, Event] {}
  implicit val seekingOnHTMLParamElement = new Binder[HTMLParamElement, seeking.type, Event] {}
  implicit val selectOnHTMLParamElement = new Binder[HTMLParamElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLParamElement = new Binder[HTMLParamElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLParamElement = new Binder[HTMLParamElement, stalled.type, Event] {}
  implicit val submitOnHTMLParamElement = new Binder[HTMLParamElement, submit.type, Event] {}
  implicit val suspendOnHTMLParamElement = new Binder[HTMLParamElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLParamElement = new Binder[HTMLParamElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLParamElement = new Binder[HTMLParamElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLParamElement = new Binder[HTMLParamElement, waiting.type, Event] {}
  implicit val abortOnHTMLPhraseElement = new Binder[HTMLPhraseElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLPhraseElement = new Binder[HTMLPhraseElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLPhraseElement = new Binder[HTMLPhraseElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLPhraseElement = new Binder[HTMLPhraseElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLPhraseElement = new Binder[HTMLPhraseElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLPhraseElement = new Binder[HTMLPhraseElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLPhraseElement = new Binder[HTMLPhraseElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLPhraseElement = new Binder[HTMLPhraseElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLPhraseElement = new Binder[HTMLPhraseElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLPhraseElement = new Binder[HTMLPhraseElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLPhraseElement = new Binder[HTMLPhraseElement, change.type, Event] {}
  implicit val clickOnHTMLPhraseElement = new Binder[HTMLPhraseElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLPhraseElement = new Binder[HTMLPhraseElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLPhraseElement = new Binder[HTMLPhraseElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLPhraseElement = new Binder[HTMLPhraseElement, cuechange.type, Event] {}
  implicit val cutOnHTMLPhraseElement = new Binder[HTMLPhraseElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLPhraseElement = new Binder[HTMLPhraseElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLPhraseElement = new Binder[HTMLPhraseElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLPhraseElement = new Binder[HTMLPhraseElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLPhraseElement = new Binder[HTMLPhraseElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLPhraseElement = new Binder[HTMLPhraseElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLPhraseElement = new Binder[HTMLPhraseElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLPhraseElement = new Binder[HTMLPhraseElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLPhraseElement = new Binder[HTMLPhraseElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLPhraseElement = new Binder[HTMLPhraseElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLPhraseElement = new Binder[HTMLPhraseElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLPhraseElement = new Binder[HTMLPhraseElement, emptied.type, Event] {}
  implicit val endedOnHTMLPhraseElement = new Binder[HTMLPhraseElement, ended.type, Event] {}
  implicit val focusOnHTMLPhraseElement = new Binder[HTMLPhraseElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLPhraseElement = new Binder[HTMLPhraseElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLPhraseElement = new Binder[HTMLPhraseElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLPhraseElement = new Binder[HTMLPhraseElement, help.type, Event] {}
  implicit val inputOnHTMLPhraseElement = new Binder[HTMLPhraseElement, input.type, Event] {}
  implicit val keydownOnHTMLPhraseElement = new Binder[HTMLPhraseElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLPhraseElement = new Binder[HTMLPhraseElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLPhraseElement = new Binder[HTMLPhraseElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLPhraseElement = new Binder[HTMLPhraseElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLPhraseElement = new Binder[HTMLPhraseElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLPhraseElement = new Binder[HTMLPhraseElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLPhraseElement = new Binder[HTMLPhraseElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLPhraseElement = new Binder[HTMLPhraseElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLPhraseElement = new Binder[HTMLPhraseElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLPhraseElement = new Binder[HTMLPhraseElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLPhraseElement = new Binder[HTMLPhraseElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLPhraseElement = new Binder[HTMLPhraseElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLPhraseElement = new Binder[HTMLPhraseElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLPhraseElement = new Binder[HTMLPhraseElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLPhraseElement = new Binder[HTMLPhraseElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLPhraseElement = new Binder[HTMLPhraseElement, pause.type, Event] {}
  implicit val playOnHTMLPhraseElement = new Binder[HTMLPhraseElement, play.type, Event] {}
  implicit val playingOnHTMLPhraseElement = new Binder[HTMLPhraseElement, playing.type, Event] {}
  implicit val progressOnHTMLPhraseElement = new Binder[HTMLPhraseElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLPhraseElement = new Binder[HTMLPhraseElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLPhraseElement = new Binder[HTMLPhraseElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLPhraseElement = new Binder[HTMLPhraseElement, reset.type, Event] {}
  implicit val scrollOnHTMLPhraseElement = new Binder[HTMLPhraseElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLPhraseElement = new Binder[HTMLPhraseElement, seeked.type, Event] {}
  implicit val seekingOnHTMLPhraseElement = new Binder[HTMLPhraseElement, seeking.type, Event] {}
  implicit val selectOnHTMLPhraseElement = new Binder[HTMLPhraseElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLPhraseElement = new Binder[HTMLPhraseElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLPhraseElement = new Binder[HTMLPhraseElement, stalled.type, Event] {}
  implicit val submitOnHTMLPhraseElement = new Binder[HTMLPhraseElement, submit.type, Event] {}
  implicit val suspendOnHTMLPhraseElement = new Binder[HTMLPhraseElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLPhraseElement = new Binder[HTMLPhraseElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLPhraseElement = new Binder[HTMLPhraseElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLPhraseElement = new Binder[HTMLPhraseElement, waiting.type, Event] {}
  implicit val abortOnHTMLPreElement = new Binder[HTMLPreElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLPreElement = new Binder[HTMLPreElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLPreElement = new Binder[HTMLPreElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLPreElement = new Binder[HTMLPreElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLPreElement = new Binder[HTMLPreElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLPreElement = new Binder[HTMLPreElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLPreElement = new Binder[HTMLPreElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLPreElement = new Binder[HTMLPreElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLPreElement = new Binder[HTMLPreElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLPreElement = new Binder[HTMLPreElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLPreElement = new Binder[HTMLPreElement, change.type, Event] {}
  implicit val clickOnHTMLPreElement = new Binder[HTMLPreElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLPreElement = new Binder[HTMLPreElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLPreElement = new Binder[HTMLPreElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLPreElement = new Binder[HTMLPreElement, cuechange.type, Event] {}
  implicit val cutOnHTMLPreElement = new Binder[HTMLPreElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLPreElement = new Binder[HTMLPreElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLPreElement = new Binder[HTMLPreElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLPreElement = new Binder[HTMLPreElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLPreElement = new Binder[HTMLPreElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLPreElement = new Binder[HTMLPreElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLPreElement = new Binder[HTMLPreElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLPreElement = new Binder[HTMLPreElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLPreElement = new Binder[HTMLPreElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLPreElement = new Binder[HTMLPreElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLPreElement = new Binder[HTMLPreElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLPreElement = new Binder[HTMLPreElement, emptied.type, Event] {}
  implicit val endedOnHTMLPreElement = new Binder[HTMLPreElement, ended.type, Event] {}
  implicit val focusOnHTMLPreElement = new Binder[HTMLPreElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLPreElement = new Binder[HTMLPreElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLPreElement = new Binder[HTMLPreElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLPreElement = new Binder[HTMLPreElement, help.type, Event] {}
  implicit val inputOnHTMLPreElement = new Binder[HTMLPreElement, input.type, Event] {}
  implicit val keydownOnHTMLPreElement = new Binder[HTMLPreElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLPreElement = new Binder[HTMLPreElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLPreElement = new Binder[HTMLPreElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLPreElement = new Binder[HTMLPreElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLPreElement = new Binder[HTMLPreElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLPreElement = new Binder[HTMLPreElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLPreElement = new Binder[HTMLPreElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLPreElement = new Binder[HTMLPreElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLPreElement = new Binder[HTMLPreElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLPreElement = new Binder[HTMLPreElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLPreElement = new Binder[HTMLPreElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLPreElement = new Binder[HTMLPreElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLPreElement = new Binder[HTMLPreElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLPreElement = new Binder[HTMLPreElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLPreElement = new Binder[HTMLPreElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLPreElement = new Binder[HTMLPreElement, pause.type, Event] {}
  implicit val playOnHTMLPreElement = new Binder[HTMLPreElement, play.type, Event] {}
  implicit val playingOnHTMLPreElement = new Binder[HTMLPreElement, playing.type, Event] {}
  implicit val progressOnHTMLPreElement = new Binder[HTMLPreElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLPreElement = new Binder[HTMLPreElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLPreElement = new Binder[HTMLPreElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLPreElement = new Binder[HTMLPreElement, reset.type, Event] {}
  implicit val scrollOnHTMLPreElement = new Binder[HTMLPreElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLPreElement = new Binder[HTMLPreElement, seeked.type, Event] {}
  implicit val seekingOnHTMLPreElement = new Binder[HTMLPreElement, seeking.type, Event] {}
  implicit val selectOnHTMLPreElement = new Binder[HTMLPreElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLPreElement = new Binder[HTMLPreElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLPreElement = new Binder[HTMLPreElement, stalled.type, Event] {}
  implicit val submitOnHTMLPreElement = new Binder[HTMLPreElement, submit.type, Event] {}
  implicit val suspendOnHTMLPreElement = new Binder[HTMLPreElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLPreElement = new Binder[HTMLPreElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLPreElement = new Binder[HTMLPreElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLPreElement = new Binder[HTMLPreElement, waiting.type, Event] {}
  implicit val abortOnHTMLProgressElement = new Binder[HTMLProgressElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLProgressElement = new Binder[HTMLProgressElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLProgressElement = new Binder[HTMLProgressElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLProgressElement = new Binder[HTMLProgressElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLProgressElement = new Binder[HTMLProgressElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLProgressElement = new Binder[HTMLProgressElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLProgressElement = new Binder[HTMLProgressElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLProgressElement = new Binder[HTMLProgressElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLProgressElement = new Binder[HTMLProgressElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLProgressElement = new Binder[HTMLProgressElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLProgressElement = new Binder[HTMLProgressElement, change.type, Event] {}
  implicit val clickOnHTMLProgressElement = new Binder[HTMLProgressElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLProgressElement = new Binder[HTMLProgressElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLProgressElement = new Binder[HTMLProgressElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLProgressElement = new Binder[HTMLProgressElement, cuechange.type, Event] {}
  implicit val cutOnHTMLProgressElement = new Binder[HTMLProgressElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLProgressElement = new Binder[HTMLProgressElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLProgressElement = new Binder[HTMLProgressElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLProgressElement = new Binder[HTMLProgressElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLProgressElement = new Binder[HTMLProgressElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLProgressElement = new Binder[HTMLProgressElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLProgressElement = new Binder[HTMLProgressElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLProgressElement = new Binder[HTMLProgressElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLProgressElement = new Binder[HTMLProgressElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLProgressElement = new Binder[HTMLProgressElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLProgressElement = new Binder[HTMLProgressElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLProgressElement = new Binder[HTMLProgressElement, emptied.type, Event] {}
  implicit val endedOnHTMLProgressElement = new Binder[HTMLProgressElement, ended.type, Event] {}
  implicit val focusOnHTMLProgressElement = new Binder[HTMLProgressElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLProgressElement = new Binder[HTMLProgressElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLProgressElement = new Binder[HTMLProgressElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLProgressElement = new Binder[HTMLProgressElement, help.type, Event] {}
  implicit val inputOnHTMLProgressElement = new Binder[HTMLProgressElement, input.type, Event] {}
  implicit val keydownOnHTMLProgressElement = new Binder[HTMLProgressElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLProgressElement = new Binder[HTMLProgressElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLProgressElement = new Binder[HTMLProgressElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLProgressElement = new Binder[HTMLProgressElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLProgressElement = new Binder[HTMLProgressElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLProgressElement = new Binder[HTMLProgressElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLProgressElement = new Binder[HTMLProgressElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLProgressElement = new Binder[HTMLProgressElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLProgressElement = new Binder[HTMLProgressElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLProgressElement = new Binder[HTMLProgressElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLProgressElement = new Binder[HTMLProgressElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLProgressElement = new Binder[HTMLProgressElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLProgressElement = new Binder[HTMLProgressElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLProgressElement = new Binder[HTMLProgressElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLProgressElement = new Binder[HTMLProgressElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLProgressElement = new Binder[HTMLProgressElement, pause.type, Event] {}
  implicit val playOnHTMLProgressElement = new Binder[HTMLProgressElement, play.type, Event] {}
  implicit val playingOnHTMLProgressElement = new Binder[HTMLProgressElement, playing.type, Event] {}
  implicit val progressOnHTMLProgressElement = new Binder[HTMLProgressElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLProgressElement = new Binder[HTMLProgressElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLProgressElement = new Binder[HTMLProgressElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLProgressElement = new Binder[HTMLProgressElement, reset.type, Event] {}
  implicit val scrollOnHTMLProgressElement = new Binder[HTMLProgressElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLProgressElement = new Binder[HTMLProgressElement, seeked.type, Event] {}
  implicit val seekingOnHTMLProgressElement = new Binder[HTMLProgressElement, seeking.type, Event] {}
  implicit val selectOnHTMLProgressElement = new Binder[HTMLProgressElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLProgressElement = new Binder[HTMLProgressElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLProgressElement = new Binder[HTMLProgressElement, stalled.type, Event] {}
  implicit val submitOnHTMLProgressElement = new Binder[HTMLProgressElement, submit.type, Event] {}
  implicit val suspendOnHTMLProgressElement = new Binder[HTMLProgressElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLProgressElement = new Binder[HTMLProgressElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLProgressElement = new Binder[HTMLProgressElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLProgressElement = new Binder[HTMLProgressElement, waiting.type, Event] {}
  implicit val abortOnHTMLQuoteElement = new Binder[HTMLQuoteElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLQuoteElement = new Binder[HTMLQuoteElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLQuoteElement = new Binder[HTMLQuoteElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLQuoteElement = new Binder[HTMLQuoteElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLQuoteElement = new Binder[HTMLQuoteElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLQuoteElement = new Binder[HTMLQuoteElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLQuoteElement = new Binder[HTMLQuoteElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLQuoteElement = new Binder[HTMLQuoteElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLQuoteElement = new Binder[HTMLQuoteElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLQuoteElement = new Binder[HTMLQuoteElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLQuoteElement = new Binder[HTMLQuoteElement, change.type, Event] {}
  implicit val clickOnHTMLQuoteElement = new Binder[HTMLQuoteElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLQuoteElement = new Binder[HTMLQuoteElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLQuoteElement = new Binder[HTMLQuoteElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLQuoteElement = new Binder[HTMLQuoteElement, cuechange.type, Event] {}
  implicit val cutOnHTMLQuoteElement = new Binder[HTMLQuoteElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLQuoteElement = new Binder[HTMLQuoteElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLQuoteElement = new Binder[HTMLQuoteElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLQuoteElement = new Binder[HTMLQuoteElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLQuoteElement = new Binder[HTMLQuoteElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLQuoteElement = new Binder[HTMLQuoteElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLQuoteElement = new Binder[HTMLQuoteElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLQuoteElement = new Binder[HTMLQuoteElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLQuoteElement = new Binder[HTMLQuoteElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLQuoteElement = new Binder[HTMLQuoteElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLQuoteElement = new Binder[HTMLQuoteElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLQuoteElement = new Binder[HTMLQuoteElement, emptied.type, Event] {}
  implicit val endedOnHTMLQuoteElement = new Binder[HTMLQuoteElement, ended.type, Event] {}
  implicit val focusOnHTMLQuoteElement = new Binder[HTMLQuoteElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLQuoteElement = new Binder[HTMLQuoteElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLQuoteElement = new Binder[HTMLQuoteElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLQuoteElement = new Binder[HTMLQuoteElement, help.type, Event] {}
  implicit val inputOnHTMLQuoteElement = new Binder[HTMLQuoteElement, input.type, Event] {}
  implicit val keydownOnHTMLQuoteElement = new Binder[HTMLQuoteElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLQuoteElement = new Binder[HTMLQuoteElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLQuoteElement = new Binder[HTMLQuoteElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLQuoteElement = new Binder[HTMLQuoteElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLQuoteElement = new Binder[HTMLQuoteElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLQuoteElement = new Binder[HTMLQuoteElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLQuoteElement = new Binder[HTMLQuoteElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLQuoteElement = new Binder[HTMLQuoteElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLQuoteElement = new Binder[HTMLQuoteElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLQuoteElement = new Binder[HTMLQuoteElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLQuoteElement = new Binder[HTMLQuoteElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLQuoteElement = new Binder[HTMLQuoteElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLQuoteElement = new Binder[HTMLQuoteElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLQuoteElement = new Binder[HTMLQuoteElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLQuoteElement = new Binder[HTMLQuoteElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLQuoteElement = new Binder[HTMLQuoteElement, pause.type, Event] {}
  implicit val playOnHTMLQuoteElement = new Binder[HTMLQuoteElement, play.type, Event] {}
  implicit val playingOnHTMLQuoteElement = new Binder[HTMLQuoteElement, playing.type, Event] {}
  implicit val progressOnHTMLQuoteElement = new Binder[HTMLQuoteElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLQuoteElement = new Binder[HTMLQuoteElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLQuoteElement = new Binder[HTMLQuoteElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLQuoteElement = new Binder[HTMLQuoteElement, reset.type, Event] {}
  implicit val scrollOnHTMLQuoteElement = new Binder[HTMLQuoteElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLQuoteElement = new Binder[HTMLQuoteElement, seeked.type, Event] {}
  implicit val seekingOnHTMLQuoteElement = new Binder[HTMLQuoteElement, seeking.type, Event] {}
  implicit val selectOnHTMLQuoteElement = new Binder[HTMLQuoteElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLQuoteElement = new Binder[HTMLQuoteElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLQuoteElement = new Binder[HTMLQuoteElement, stalled.type, Event] {}
  implicit val submitOnHTMLQuoteElement = new Binder[HTMLQuoteElement, submit.type, Event] {}
  implicit val suspendOnHTMLQuoteElement = new Binder[HTMLQuoteElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLQuoteElement = new Binder[HTMLQuoteElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLQuoteElement = new Binder[HTMLQuoteElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLQuoteElement = new Binder[HTMLQuoteElement, waiting.type, Event] {}
  implicit val abortOnHTMLScriptElement = new Binder[HTMLScriptElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLScriptElement = new Binder[HTMLScriptElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLScriptElement = new Binder[HTMLScriptElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLScriptElement = new Binder[HTMLScriptElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLScriptElement = new Binder[HTMLScriptElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLScriptElement = new Binder[HTMLScriptElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLScriptElement = new Binder[HTMLScriptElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLScriptElement = new Binder[HTMLScriptElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLScriptElement = new Binder[HTMLScriptElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLScriptElement = new Binder[HTMLScriptElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLScriptElement = new Binder[HTMLScriptElement, change.type, Event] {}
  implicit val clickOnHTMLScriptElement = new Binder[HTMLScriptElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLScriptElement = new Binder[HTMLScriptElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLScriptElement = new Binder[HTMLScriptElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLScriptElement = new Binder[HTMLScriptElement, cuechange.type, Event] {}
  implicit val cutOnHTMLScriptElement = new Binder[HTMLScriptElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLScriptElement = new Binder[HTMLScriptElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLScriptElement = new Binder[HTMLScriptElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLScriptElement = new Binder[HTMLScriptElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLScriptElement = new Binder[HTMLScriptElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLScriptElement = new Binder[HTMLScriptElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLScriptElement = new Binder[HTMLScriptElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLScriptElement = new Binder[HTMLScriptElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLScriptElement = new Binder[HTMLScriptElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLScriptElement = new Binder[HTMLScriptElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLScriptElement = new Binder[HTMLScriptElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLScriptElement = new Binder[HTMLScriptElement, emptied.type, Event] {}
  implicit val endedOnHTMLScriptElement = new Binder[HTMLScriptElement, ended.type, Event] {}
  implicit val focusOnHTMLScriptElement = new Binder[HTMLScriptElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLScriptElement = new Binder[HTMLScriptElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLScriptElement = new Binder[HTMLScriptElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLScriptElement = new Binder[HTMLScriptElement, help.type, Event] {}
  implicit val inputOnHTMLScriptElement = new Binder[HTMLScriptElement, input.type, Event] {}
  implicit val keydownOnHTMLScriptElement = new Binder[HTMLScriptElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLScriptElement = new Binder[HTMLScriptElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLScriptElement = new Binder[HTMLScriptElement, keyup.type, KeyboardEvent] {}
  implicit val loadOnHTMLScriptElement = new Binder[HTMLScriptElement, load.type, Event] {}
  implicit val loadeddataOnHTMLScriptElement = new Binder[HTMLScriptElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLScriptElement = new Binder[HTMLScriptElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLScriptElement = new Binder[HTMLScriptElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLScriptElement = new Binder[HTMLScriptElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLScriptElement = new Binder[HTMLScriptElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLScriptElement = new Binder[HTMLScriptElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLScriptElement = new Binder[HTMLScriptElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLScriptElement = new Binder[HTMLScriptElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLScriptElement = new Binder[HTMLScriptElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLScriptElement = new Binder[HTMLScriptElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLScriptElement = new Binder[HTMLScriptElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLScriptElement = new Binder[HTMLScriptElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLScriptElement = new Binder[HTMLScriptElement, pause.type, Event] {}
  implicit val playOnHTMLScriptElement = new Binder[HTMLScriptElement, play.type, Event] {}
  implicit val playingOnHTMLScriptElement = new Binder[HTMLScriptElement, playing.type, Event] {}
  implicit val progressOnHTMLScriptElement = new Binder[HTMLScriptElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLScriptElement = new Binder[HTMLScriptElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLScriptElement = new Binder[HTMLScriptElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLScriptElement = new Binder[HTMLScriptElement, reset.type, Event] {}
  implicit val scrollOnHTMLScriptElement = new Binder[HTMLScriptElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLScriptElement = new Binder[HTMLScriptElement, seeked.type, Event] {}
  implicit val seekingOnHTMLScriptElement = new Binder[HTMLScriptElement, seeking.type, Event] {}
  implicit val selectOnHTMLScriptElement = new Binder[HTMLScriptElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLScriptElement = new Binder[HTMLScriptElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLScriptElement = new Binder[HTMLScriptElement, stalled.type, Event] {}
  implicit val submitOnHTMLScriptElement = new Binder[HTMLScriptElement, submit.type, Event] {}
  implicit val suspendOnHTMLScriptElement = new Binder[HTMLScriptElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLScriptElement = new Binder[HTMLScriptElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLScriptElement = new Binder[HTMLScriptElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLScriptElement = new Binder[HTMLScriptElement, waiting.type, Event] {}
  implicit val abortOnHTMLSelectElement = new Binder[HTMLSelectElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLSelectElement = new Binder[HTMLSelectElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLSelectElement = new Binder[HTMLSelectElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLSelectElement = new Binder[HTMLSelectElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLSelectElement = new Binder[HTMLSelectElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLSelectElement = new Binder[HTMLSelectElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLSelectElement = new Binder[HTMLSelectElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLSelectElement = new Binder[HTMLSelectElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLSelectElement = new Binder[HTMLSelectElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLSelectElement = new Binder[HTMLSelectElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLSelectElement = new Binder[HTMLSelectElement, change.type, Event] {}
  implicit val clickOnHTMLSelectElement = new Binder[HTMLSelectElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLSelectElement = new Binder[HTMLSelectElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLSelectElement = new Binder[HTMLSelectElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLSelectElement = new Binder[HTMLSelectElement, cuechange.type, Event] {}
  implicit val cutOnHTMLSelectElement = new Binder[HTMLSelectElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLSelectElement = new Binder[HTMLSelectElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLSelectElement = new Binder[HTMLSelectElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLSelectElement = new Binder[HTMLSelectElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLSelectElement = new Binder[HTMLSelectElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLSelectElement = new Binder[HTMLSelectElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLSelectElement = new Binder[HTMLSelectElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLSelectElement = new Binder[HTMLSelectElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLSelectElement = new Binder[HTMLSelectElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLSelectElement = new Binder[HTMLSelectElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLSelectElement = new Binder[HTMLSelectElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLSelectElement = new Binder[HTMLSelectElement, emptied.type, Event] {}
  implicit val endedOnHTMLSelectElement = new Binder[HTMLSelectElement, ended.type, Event] {}
  implicit val focusOnHTMLSelectElement = new Binder[HTMLSelectElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLSelectElement = new Binder[HTMLSelectElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLSelectElement = new Binder[HTMLSelectElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLSelectElement = new Binder[HTMLSelectElement, help.type, Event] {}
  implicit val inputOnHTMLSelectElement = new Binder[HTMLSelectElement, input.type, Event] {}
  implicit val keydownOnHTMLSelectElement = new Binder[HTMLSelectElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLSelectElement = new Binder[HTMLSelectElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLSelectElement = new Binder[HTMLSelectElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLSelectElement = new Binder[HTMLSelectElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLSelectElement = new Binder[HTMLSelectElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLSelectElement = new Binder[HTMLSelectElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLSelectElement = new Binder[HTMLSelectElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLSelectElement = new Binder[HTMLSelectElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLSelectElement = new Binder[HTMLSelectElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLSelectElement = new Binder[HTMLSelectElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLSelectElement = new Binder[HTMLSelectElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLSelectElement = new Binder[HTMLSelectElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLSelectElement = new Binder[HTMLSelectElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLSelectElement = new Binder[HTMLSelectElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLSelectElement = new Binder[HTMLSelectElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLSelectElement = new Binder[HTMLSelectElement, pause.type, Event] {}
  implicit val playOnHTMLSelectElement = new Binder[HTMLSelectElement, play.type, Event] {}
  implicit val playingOnHTMLSelectElement = new Binder[HTMLSelectElement, playing.type, Event] {}
  implicit val progressOnHTMLSelectElement = new Binder[HTMLSelectElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLSelectElement = new Binder[HTMLSelectElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLSelectElement = new Binder[HTMLSelectElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLSelectElement = new Binder[HTMLSelectElement, reset.type, Event] {}
  implicit val scrollOnHTMLSelectElement = new Binder[HTMLSelectElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLSelectElement = new Binder[HTMLSelectElement, seeked.type, Event] {}
  implicit val seekingOnHTMLSelectElement = new Binder[HTMLSelectElement, seeking.type, Event] {}
  implicit val selectOnHTMLSelectElement = new Binder[HTMLSelectElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLSelectElement = new Binder[HTMLSelectElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLSelectElement = new Binder[HTMLSelectElement, stalled.type, Event] {}
  implicit val submitOnHTMLSelectElement = new Binder[HTMLSelectElement, submit.type, Event] {}
  implicit val suspendOnHTMLSelectElement = new Binder[HTMLSelectElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLSelectElement = new Binder[HTMLSelectElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLSelectElement = new Binder[HTMLSelectElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLSelectElement = new Binder[HTMLSelectElement, waiting.type, Event] {}
  implicit val abortOnHTMLSourceElement = new Binder[HTMLSourceElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLSourceElement = new Binder[HTMLSourceElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLSourceElement = new Binder[HTMLSourceElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLSourceElement = new Binder[HTMLSourceElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLSourceElement = new Binder[HTMLSourceElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLSourceElement = new Binder[HTMLSourceElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLSourceElement = new Binder[HTMLSourceElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLSourceElement = new Binder[HTMLSourceElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLSourceElement = new Binder[HTMLSourceElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLSourceElement = new Binder[HTMLSourceElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLSourceElement = new Binder[HTMLSourceElement, change.type, Event] {}
  implicit val clickOnHTMLSourceElement = new Binder[HTMLSourceElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLSourceElement = new Binder[HTMLSourceElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLSourceElement = new Binder[HTMLSourceElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLSourceElement = new Binder[HTMLSourceElement, cuechange.type, Event] {}
  implicit val cutOnHTMLSourceElement = new Binder[HTMLSourceElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLSourceElement = new Binder[HTMLSourceElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLSourceElement = new Binder[HTMLSourceElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLSourceElement = new Binder[HTMLSourceElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLSourceElement = new Binder[HTMLSourceElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLSourceElement = new Binder[HTMLSourceElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLSourceElement = new Binder[HTMLSourceElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLSourceElement = new Binder[HTMLSourceElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLSourceElement = new Binder[HTMLSourceElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLSourceElement = new Binder[HTMLSourceElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLSourceElement = new Binder[HTMLSourceElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLSourceElement = new Binder[HTMLSourceElement, emptied.type, Event] {}
  implicit val endedOnHTMLSourceElement = new Binder[HTMLSourceElement, ended.type, Event] {}
  implicit val focusOnHTMLSourceElement = new Binder[HTMLSourceElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLSourceElement = new Binder[HTMLSourceElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLSourceElement = new Binder[HTMLSourceElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLSourceElement = new Binder[HTMLSourceElement, help.type, Event] {}
  implicit val inputOnHTMLSourceElement = new Binder[HTMLSourceElement, input.type, Event] {}
  implicit val keydownOnHTMLSourceElement = new Binder[HTMLSourceElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLSourceElement = new Binder[HTMLSourceElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLSourceElement = new Binder[HTMLSourceElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLSourceElement = new Binder[HTMLSourceElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLSourceElement = new Binder[HTMLSourceElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLSourceElement = new Binder[HTMLSourceElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLSourceElement = new Binder[HTMLSourceElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLSourceElement = new Binder[HTMLSourceElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLSourceElement = new Binder[HTMLSourceElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLSourceElement = new Binder[HTMLSourceElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLSourceElement = new Binder[HTMLSourceElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLSourceElement = new Binder[HTMLSourceElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLSourceElement = new Binder[HTMLSourceElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLSourceElement = new Binder[HTMLSourceElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLSourceElement = new Binder[HTMLSourceElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLSourceElement = new Binder[HTMLSourceElement, pause.type, Event] {}
  implicit val playOnHTMLSourceElement = new Binder[HTMLSourceElement, play.type, Event] {}
  implicit val playingOnHTMLSourceElement = new Binder[HTMLSourceElement, playing.type, Event] {}
  implicit val progressOnHTMLSourceElement = new Binder[HTMLSourceElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLSourceElement = new Binder[HTMLSourceElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLSourceElement = new Binder[HTMLSourceElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLSourceElement = new Binder[HTMLSourceElement, reset.type, Event] {}
  implicit val scrollOnHTMLSourceElement = new Binder[HTMLSourceElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLSourceElement = new Binder[HTMLSourceElement, seeked.type, Event] {}
  implicit val seekingOnHTMLSourceElement = new Binder[HTMLSourceElement, seeking.type, Event] {}
  implicit val selectOnHTMLSourceElement = new Binder[HTMLSourceElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLSourceElement = new Binder[HTMLSourceElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLSourceElement = new Binder[HTMLSourceElement, stalled.type, Event] {}
  implicit val submitOnHTMLSourceElement = new Binder[HTMLSourceElement, submit.type, Event] {}
  implicit val suspendOnHTMLSourceElement = new Binder[HTMLSourceElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLSourceElement = new Binder[HTMLSourceElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLSourceElement = new Binder[HTMLSourceElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLSourceElement = new Binder[HTMLSourceElement, waiting.type, Event] {}
  implicit val abortOnHTMLSpanElement = new Binder[HTMLSpanElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLSpanElement = new Binder[HTMLSpanElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLSpanElement = new Binder[HTMLSpanElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLSpanElement = new Binder[HTMLSpanElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLSpanElement = new Binder[HTMLSpanElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLSpanElement = new Binder[HTMLSpanElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLSpanElement = new Binder[HTMLSpanElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLSpanElement = new Binder[HTMLSpanElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLSpanElement = new Binder[HTMLSpanElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLSpanElement = new Binder[HTMLSpanElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLSpanElement = new Binder[HTMLSpanElement, change.type, Event] {}
  implicit val clickOnHTMLSpanElement = new Binder[HTMLSpanElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLSpanElement = new Binder[HTMLSpanElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLSpanElement = new Binder[HTMLSpanElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLSpanElement = new Binder[HTMLSpanElement, cuechange.type, Event] {}
  implicit val cutOnHTMLSpanElement = new Binder[HTMLSpanElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLSpanElement = new Binder[HTMLSpanElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLSpanElement = new Binder[HTMLSpanElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLSpanElement = new Binder[HTMLSpanElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLSpanElement = new Binder[HTMLSpanElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLSpanElement = new Binder[HTMLSpanElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLSpanElement = new Binder[HTMLSpanElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLSpanElement = new Binder[HTMLSpanElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLSpanElement = new Binder[HTMLSpanElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLSpanElement = new Binder[HTMLSpanElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLSpanElement = new Binder[HTMLSpanElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLSpanElement = new Binder[HTMLSpanElement, emptied.type, Event] {}
  implicit val endedOnHTMLSpanElement = new Binder[HTMLSpanElement, ended.type, Event] {}
  implicit val focusOnHTMLSpanElement = new Binder[HTMLSpanElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLSpanElement = new Binder[HTMLSpanElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLSpanElement = new Binder[HTMLSpanElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLSpanElement = new Binder[HTMLSpanElement, help.type, Event] {}
  implicit val inputOnHTMLSpanElement = new Binder[HTMLSpanElement, input.type, Event] {}
  implicit val keydownOnHTMLSpanElement = new Binder[HTMLSpanElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLSpanElement = new Binder[HTMLSpanElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLSpanElement = new Binder[HTMLSpanElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLSpanElement = new Binder[HTMLSpanElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLSpanElement = new Binder[HTMLSpanElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLSpanElement = new Binder[HTMLSpanElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLSpanElement = new Binder[HTMLSpanElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLSpanElement = new Binder[HTMLSpanElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLSpanElement = new Binder[HTMLSpanElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLSpanElement = new Binder[HTMLSpanElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLSpanElement = new Binder[HTMLSpanElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLSpanElement = new Binder[HTMLSpanElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLSpanElement = new Binder[HTMLSpanElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLSpanElement = new Binder[HTMLSpanElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLSpanElement = new Binder[HTMLSpanElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLSpanElement = new Binder[HTMLSpanElement, pause.type, Event] {}
  implicit val playOnHTMLSpanElement = new Binder[HTMLSpanElement, play.type, Event] {}
  implicit val playingOnHTMLSpanElement = new Binder[HTMLSpanElement, playing.type, Event] {}
  implicit val progressOnHTMLSpanElement = new Binder[HTMLSpanElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLSpanElement = new Binder[HTMLSpanElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLSpanElement = new Binder[HTMLSpanElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLSpanElement = new Binder[HTMLSpanElement, reset.type, Event] {}
  implicit val scrollOnHTMLSpanElement = new Binder[HTMLSpanElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLSpanElement = new Binder[HTMLSpanElement, seeked.type, Event] {}
  implicit val seekingOnHTMLSpanElement = new Binder[HTMLSpanElement, seeking.type, Event] {}
  implicit val selectOnHTMLSpanElement = new Binder[HTMLSpanElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLSpanElement = new Binder[HTMLSpanElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLSpanElement = new Binder[HTMLSpanElement, stalled.type, Event] {}
  implicit val submitOnHTMLSpanElement = new Binder[HTMLSpanElement, submit.type, Event] {}
  implicit val suspendOnHTMLSpanElement = new Binder[HTMLSpanElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLSpanElement = new Binder[HTMLSpanElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLSpanElement = new Binder[HTMLSpanElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLSpanElement = new Binder[HTMLSpanElement, waiting.type, Event] {}
  implicit val abortOnHTMLStyleElement = new Binder[HTMLStyleElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLStyleElement = new Binder[HTMLStyleElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLStyleElement = new Binder[HTMLStyleElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLStyleElement = new Binder[HTMLStyleElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLStyleElement = new Binder[HTMLStyleElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLStyleElement = new Binder[HTMLStyleElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLStyleElement = new Binder[HTMLStyleElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLStyleElement = new Binder[HTMLStyleElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLStyleElement = new Binder[HTMLStyleElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLStyleElement = new Binder[HTMLStyleElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLStyleElement = new Binder[HTMLStyleElement, change.type, Event] {}
  implicit val clickOnHTMLStyleElement = new Binder[HTMLStyleElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLStyleElement = new Binder[HTMLStyleElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLStyleElement = new Binder[HTMLStyleElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLStyleElement = new Binder[HTMLStyleElement, cuechange.type, Event] {}
  implicit val cutOnHTMLStyleElement = new Binder[HTMLStyleElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLStyleElement = new Binder[HTMLStyleElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLStyleElement = new Binder[HTMLStyleElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLStyleElement = new Binder[HTMLStyleElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLStyleElement = new Binder[HTMLStyleElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLStyleElement = new Binder[HTMLStyleElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLStyleElement = new Binder[HTMLStyleElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLStyleElement = new Binder[HTMLStyleElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLStyleElement = new Binder[HTMLStyleElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLStyleElement = new Binder[HTMLStyleElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLStyleElement = new Binder[HTMLStyleElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLStyleElement = new Binder[HTMLStyleElement, emptied.type, Event] {}
  implicit val endedOnHTMLStyleElement = new Binder[HTMLStyleElement, ended.type, Event] {}
  implicit val focusOnHTMLStyleElement = new Binder[HTMLStyleElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLStyleElement = new Binder[HTMLStyleElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLStyleElement = new Binder[HTMLStyleElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLStyleElement = new Binder[HTMLStyleElement, help.type, Event] {}
  implicit val inputOnHTMLStyleElement = new Binder[HTMLStyleElement, input.type, Event] {}
  implicit val keydownOnHTMLStyleElement = new Binder[HTMLStyleElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLStyleElement = new Binder[HTMLStyleElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLStyleElement = new Binder[HTMLStyleElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLStyleElement = new Binder[HTMLStyleElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLStyleElement = new Binder[HTMLStyleElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLStyleElement = new Binder[HTMLStyleElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLStyleElement = new Binder[HTMLStyleElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLStyleElement = new Binder[HTMLStyleElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLStyleElement = new Binder[HTMLStyleElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLStyleElement = new Binder[HTMLStyleElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLStyleElement = new Binder[HTMLStyleElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLStyleElement = new Binder[HTMLStyleElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLStyleElement = new Binder[HTMLStyleElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLStyleElement = new Binder[HTMLStyleElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLStyleElement = new Binder[HTMLStyleElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLStyleElement = new Binder[HTMLStyleElement, pause.type, Event] {}
  implicit val playOnHTMLStyleElement = new Binder[HTMLStyleElement, play.type, Event] {}
  implicit val playingOnHTMLStyleElement = new Binder[HTMLStyleElement, playing.type, Event] {}
  implicit val progressOnHTMLStyleElement = new Binder[HTMLStyleElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLStyleElement = new Binder[HTMLStyleElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLStyleElement = new Binder[HTMLStyleElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLStyleElement = new Binder[HTMLStyleElement, reset.type, Event] {}
  implicit val scrollOnHTMLStyleElement = new Binder[HTMLStyleElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLStyleElement = new Binder[HTMLStyleElement, seeked.type, Event] {}
  implicit val seekingOnHTMLStyleElement = new Binder[HTMLStyleElement, seeking.type, Event] {}
  implicit val selectOnHTMLStyleElement = new Binder[HTMLStyleElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLStyleElement = new Binder[HTMLStyleElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLStyleElement = new Binder[HTMLStyleElement, stalled.type, Event] {}
  implicit val submitOnHTMLStyleElement = new Binder[HTMLStyleElement, submit.type, Event] {}
  implicit val suspendOnHTMLStyleElement = new Binder[HTMLStyleElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLStyleElement = new Binder[HTMLStyleElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLStyleElement = new Binder[HTMLStyleElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLStyleElement = new Binder[HTMLStyleElement, waiting.type, Event] {}
  implicit val abortOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, change.type, Event] {}
  implicit val clickOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, cuechange.type, Event] {}
  implicit val cutOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, emptied.type, Event] {}
  implicit val endedOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, ended.type, Event] {}
  implicit val focusOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, help.type, Event] {}
  implicit val inputOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, input.type, Event] {}
  implicit val keydownOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, pause.type, Event] {}
  implicit val playOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, play.type, Event] {}
  implicit val playingOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, playing.type, Event] {}
  implicit val progressOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, reset.type, Event] {}
  implicit val scrollOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, seeked.type, Event] {}
  implicit val seekingOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, seeking.type, Event] {}
  implicit val selectOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, stalled.type, Event] {}
  implicit val submitOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, submit.type, Event] {}
  implicit val suspendOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLTableCaptionElement = new Binder[HTMLTableCaptionElement, waiting.type, Event] {}
  implicit val abortOnHTMLTableCellElement = new Binder[HTMLTableCellElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLTableCellElement = new Binder[HTMLTableCellElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLTableCellElement = new Binder[HTMLTableCellElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLTableCellElement = new Binder[HTMLTableCellElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLTableCellElement = new Binder[HTMLTableCellElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLTableCellElement = new Binder[HTMLTableCellElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLTableCellElement = new Binder[HTMLTableCellElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLTableCellElement = new Binder[HTMLTableCellElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLTableCellElement = new Binder[HTMLTableCellElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLTableCellElement = new Binder[HTMLTableCellElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLTableCellElement = new Binder[HTMLTableCellElement, change.type, Event] {}
  implicit val clickOnHTMLTableCellElement = new Binder[HTMLTableCellElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLTableCellElement = new Binder[HTMLTableCellElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLTableCellElement = new Binder[HTMLTableCellElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLTableCellElement = new Binder[HTMLTableCellElement, cuechange.type, Event] {}
  implicit val cutOnHTMLTableCellElement = new Binder[HTMLTableCellElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLTableCellElement = new Binder[HTMLTableCellElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLTableCellElement = new Binder[HTMLTableCellElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLTableCellElement = new Binder[HTMLTableCellElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLTableCellElement = new Binder[HTMLTableCellElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLTableCellElement = new Binder[HTMLTableCellElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLTableCellElement = new Binder[HTMLTableCellElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLTableCellElement = new Binder[HTMLTableCellElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLTableCellElement = new Binder[HTMLTableCellElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLTableCellElement = new Binder[HTMLTableCellElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLTableCellElement = new Binder[HTMLTableCellElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLTableCellElement = new Binder[HTMLTableCellElement, emptied.type, Event] {}
  implicit val endedOnHTMLTableCellElement = new Binder[HTMLTableCellElement, ended.type, Event] {}
  implicit val focusOnHTMLTableCellElement = new Binder[HTMLTableCellElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLTableCellElement = new Binder[HTMLTableCellElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLTableCellElement = new Binder[HTMLTableCellElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLTableCellElement = new Binder[HTMLTableCellElement, help.type, Event] {}
  implicit val inputOnHTMLTableCellElement = new Binder[HTMLTableCellElement, input.type, Event] {}
  implicit val keydownOnHTMLTableCellElement = new Binder[HTMLTableCellElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLTableCellElement = new Binder[HTMLTableCellElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLTableCellElement = new Binder[HTMLTableCellElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLTableCellElement = new Binder[HTMLTableCellElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLTableCellElement = new Binder[HTMLTableCellElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLTableCellElement = new Binder[HTMLTableCellElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLTableCellElement = new Binder[HTMLTableCellElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLTableCellElement = new Binder[HTMLTableCellElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLTableCellElement = new Binder[HTMLTableCellElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLTableCellElement = new Binder[HTMLTableCellElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLTableCellElement = new Binder[HTMLTableCellElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLTableCellElement = new Binder[HTMLTableCellElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLTableCellElement = new Binder[HTMLTableCellElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLTableCellElement = new Binder[HTMLTableCellElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLTableCellElement = new Binder[HTMLTableCellElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLTableCellElement = new Binder[HTMLTableCellElement, pause.type, Event] {}
  implicit val playOnHTMLTableCellElement = new Binder[HTMLTableCellElement, play.type, Event] {}
  implicit val playingOnHTMLTableCellElement = new Binder[HTMLTableCellElement, playing.type, Event] {}
  implicit val progressOnHTMLTableCellElement = new Binder[HTMLTableCellElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLTableCellElement = new Binder[HTMLTableCellElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLTableCellElement = new Binder[HTMLTableCellElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLTableCellElement = new Binder[HTMLTableCellElement, reset.type, Event] {}
  implicit val scrollOnHTMLTableCellElement = new Binder[HTMLTableCellElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLTableCellElement = new Binder[HTMLTableCellElement, seeked.type, Event] {}
  implicit val seekingOnHTMLTableCellElement = new Binder[HTMLTableCellElement, seeking.type, Event] {}
  implicit val selectOnHTMLTableCellElement = new Binder[HTMLTableCellElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLTableCellElement = new Binder[HTMLTableCellElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLTableCellElement = new Binder[HTMLTableCellElement, stalled.type, Event] {}
  implicit val submitOnHTMLTableCellElement = new Binder[HTMLTableCellElement, submit.type, Event] {}
  implicit val suspendOnHTMLTableCellElement = new Binder[HTMLTableCellElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLTableCellElement = new Binder[HTMLTableCellElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLTableCellElement = new Binder[HTMLTableCellElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLTableCellElement = new Binder[HTMLTableCellElement, waiting.type, Event] {}
  implicit val abortOnHTMLTableColElement = new Binder[HTMLTableColElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLTableColElement = new Binder[HTMLTableColElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLTableColElement = new Binder[HTMLTableColElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLTableColElement = new Binder[HTMLTableColElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLTableColElement = new Binder[HTMLTableColElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLTableColElement = new Binder[HTMLTableColElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLTableColElement = new Binder[HTMLTableColElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLTableColElement = new Binder[HTMLTableColElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLTableColElement = new Binder[HTMLTableColElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLTableColElement = new Binder[HTMLTableColElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLTableColElement = new Binder[HTMLTableColElement, change.type, Event] {}
  implicit val clickOnHTMLTableColElement = new Binder[HTMLTableColElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLTableColElement = new Binder[HTMLTableColElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLTableColElement = new Binder[HTMLTableColElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLTableColElement = new Binder[HTMLTableColElement, cuechange.type, Event] {}
  implicit val cutOnHTMLTableColElement = new Binder[HTMLTableColElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLTableColElement = new Binder[HTMLTableColElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLTableColElement = new Binder[HTMLTableColElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLTableColElement = new Binder[HTMLTableColElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLTableColElement = new Binder[HTMLTableColElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLTableColElement = new Binder[HTMLTableColElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLTableColElement = new Binder[HTMLTableColElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLTableColElement = new Binder[HTMLTableColElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLTableColElement = new Binder[HTMLTableColElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLTableColElement = new Binder[HTMLTableColElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLTableColElement = new Binder[HTMLTableColElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLTableColElement = new Binder[HTMLTableColElement, emptied.type, Event] {}
  implicit val endedOnHTMLTableColElement = new Binder[HTMLTableColElement, ended.type, Event] {}
  implicit val focusOnHTMLTableColElement = new Binder[HTMLTableColElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLTableColElement = new Binder[HTMLTableColElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLTableColElement = new Binder[HTMLTableColElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLTableColElement = new Binder[HTMLTableColElement, help.type, Event] {}
  implicit val inputOnHTMLTableColElement = new Binder[HTMLTableColElement, input.type, Event] {}
  implicit val keydownOnHTMLTableColElement = new Binder[HTMLTableColElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLTableColElement = new Binder[HTMLTableColElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLTableColElement = new Binder[HTMLTableColElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLTableColElement = new Binder[HTMLTableColElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLTableColElement = new Binder[HTMLTableColElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLTableColElement = new Binder[HTMLTableColElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLTableColElement = new Binder[HTMLTableColElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLTableColElement = new Binder[HTMLTableColElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLTableColElement = new Binder[HTMLTableColElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLTableColElement = new Binder[HTMLTableColElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLTableColElement = new Binder[HTMLTableColElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLTableColElement = new Binder[HTMLTableColElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLTableColElement = new Binder[HTMLTableColElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLTableColElement = new Binder[HTMLTableColElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLTableColElement = new Binder[HTMLTableColElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLTableColElement = new Binder[HTMLTableColElement, pause.type, Event] {}
  implicit val playOnHTMLTableColElement = new Binder[HTMLTableColElement, play.type, Event] {}
  implicit val playingOnHTMLTableColElement = new Binder[HTMLTableColElement, playing.type, Event] {}
  implicit val progressOnHTMLTableColElement = new Binder[HTMLTableColElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLTableColElement = new Binder[HTMLTableColElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLTableColElement = new Binder[HTMLTableColElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLTableColElement = new Binder[HTMLTableColElement, reset.type, Event] {}
  implicit val scrollOnHTMLTableColElement = new Binder[HTMLTableColElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLTableColElement = new Binder[HTMLTableColElement, seeked.type, Event] {}
  implicit val seekingOnHTMLTableColElement = new Binder[HTMLTableColElement, seeking.type, Event] {}
  implicit val selectOnHTMLTableColElement = new Binder[HTMLTableColElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLTableColElement = new Binder[HTMLTableColElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLTableColElement = new Binder[HTMLTableColElement, stalled.type, Event] {}
  implicit val submitOnHTMLTableColElement = new Binder[HTMLTableColElement, submit.type, Event] {}
  implicit val suspendOnHTMLTableColElement = new Binder[HTMLTableColElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLTableColElement = new Binder[HTMLTableColElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLTableColElement = new Binder[HTMLTableColElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLTableColElement = new Binder[HTMLTableColElement, waiting.type, Event] {}
  implicit val abortOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, change.type, Event] {}
  implicit val clickOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, cuechange.type, Event] {}
  implicit val cutOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, emptied.type, Event] {}
  implicit val endedOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, ended.type, Event] {}
  implicit val focusOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, help.type, Event] {}
  implicit val inputOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, input.type, Event] {}
  implicit val keydownOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, pause.type, Event] {}
  implicit val playOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, play.type, Event] {}
  implicit val playingOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, playing.type, Event] {}
  implicit val progressOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, reset.type, Event] {}
  implicit val scrollOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, seeked.type, Event] {}
  implicit val seekingOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, seeking.type, Event] {}
  implicit val selectOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, stalled.type, Event] {}
  implicit val submitOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, submit.type, Event] {}
  implicit val suspendOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLTableDataCellElement = new Binder[HTMLTableDataCellElement, waiting.type, Event] {}
  implicit val abortOnHTMLTableElement = new Binder[HTMLTableElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLTableElement = new Binder[HTMLTableElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLTableElement = new Binder[HTMLTableElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLTableElement = new Binder[HTMLTableElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLTableElement = new Binder[HTMLTableElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLTableElement = new Binder[HTMLTableElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLTableElement = new Binder[HTMLTableElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLTableElement = new Binder[HTMLTableElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLTableElement = new Binder[HTMLTableElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLTableElement = new Binder[HTMLTableElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLTableElement = new Binder[HTMLTableElement, change.type, Event] {}
  implicit val clickOnHTMLTableElement = new Binder[HTMLTableElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLTableElement = new Binder[HTMLTableElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLTableElement = new Binder[HTMLTableElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLTableElement = new Binder[HTMLTableElement, cuechange.type, Event] {}
  implicit val cutOnHTMLTableElement = new Binder[HTMLTableElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLTableElement = new Binder[HTMLTableElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLTableElement = new Binder[HTMLTableElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLTableElement = new Binder[HTMLTableElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLTableElement = new Binder[HTMLTableElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLTableElement = new Binder[HTMLTableElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLTableElement = new Binder[HTMLTableElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLTableElement = new Binder[HTMLTableElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLTableElement = new Binder[HTMLTableElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLTableElement = new Binder[HTMLTableElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLTableElement = new Binder[HTMLTableElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLTableElement = new Binder[HTMLTableElement, emptied.type, Event] {}
  implicit val endedOnHTMLTableElement = new Binder[HTMLTableElement, ended.type, Event] {}
  implicit val focusOnHTMLTableElement = new Binder[HTMLTableElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLTableElement = new Binder[HTMLTableElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLTableElement = new Binder[HTMLTableElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLTableElement = new Binder[HTMLTableElement, help.type, Event] {}
  implicit val inputOnHTMLTableElement = new Binder[HTMLTableElement, input.type, Event] {}
  implicit val keydownOnHTMLTableElement = new Binder[HTMLTableElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLTableElement = new Binder[HTMLTableElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLTableElement = new Binder[HTMLTableElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLTableElement = new Binder[HTMLTableElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLTableElement = new Binder[HTMLTableElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLTableElement = new Binder[HTMLTableElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLTableElement = new Binder[HTMLTableElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLTableElement = new Binder[HTMLTableElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLTableElement = new Binder[HTMLTableElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLTableElement = new Binder[HTMLTableElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLTableElement = new Binder[HTMLTableElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLTableElement = new Binder[HTMLTableElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLTableElement = new Binder[HTMLTableElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLTableElement = new Binder[HTMLTableElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLTableElement = new Binder[HTMLTableElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLTableElement = new Binder[HTMLTableElement, pause.type, Event] {}
  implicit val playOnHTMLTableElement = new Binder[HTMLTableElement, play.type, Event] {}
  implicit val playingOnHTMLTableElement = new Binder[HTMLTableElement, playing.type, Event] {}
  implicit val progressOnHTMLTableElement = new Binder[HTMLTableElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLTableElement = new Binder[HTMLTableElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLTableElement = new Binder[HTMLTableElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLTableElement = new Binder[HTMLTableElement, reset.type, Event] {}
  implicit val scrollOnHTMLTableElement = new Binder[HTMLTableElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLTableElement = new Binder[HTMLTableElement, seeked.type, Event] {}
  implicit val seekingOnHTMLTableElement = new Binder[HTMLTableElement, seeking.type, Event] {}
  implicit val selectOnHTMLTableElement = new Binder[HTMLTableElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLTableElement = new Binder[HTMLTableElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLTableElement = new Binder[HTMLTableElement, stalled.type, Event] {}
  implicit val submitOnHTMLTableElement = new Binder[HTMLTableElement, submit.type, Event] {}
  implicit val suspendOnHTMLTableElement = new Binder[HTMLTableElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLTableElement = new Binder[HTMLTableElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLTableElement = new Binder[HTMLTableElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLTableElement = new Binder[HTMLTableElement, waiting.type, Event] {}
  implicit val abortOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, change.type, Event] {}
  implicit val clickOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, cuechange.type, Event] {}
  implicit val cutOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, emptied.type, Event] {}
  implicit val endedOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, ended.type, Event] {}
  implicit val focusOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, help.type, Event] {}
  implicit val inputOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, input.type, Event] {}
  implicit val keydownOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, pause.type, Event] {}
  implicit val playOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, play.type, Event] {}
  implicit val playingOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, playing.type, Event] {}
  implicit val progressOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, reset.type, Event] {}
  implicit val scrollOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, seeked.type, Event] {}
  implicit val seekingOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, seeking.type, Event] {}
  implicit val selectOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, stalled.type, Event] {}
  implicit val submitOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, submit.type, Event] {}
  implicit val suspendOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLTableHeaderCellElement = new Binder[HTMLTableHeaderCellElement, waiting.type, Event] {}
  implicit val abortOnHTMLTableRowElement = new Binder[HTMLTableRowElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLTableRowElement = new Binder[HTMLTableRowElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLTableRowElement = new Binder[HTMLTableRowElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLTableRowElement = new Binder[HTMLTableRowElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLTableRowElement = new Binder[HTMLTableRowElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLTableRowElement = new Binder[HTMLTableRowElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLTableRowElement = new Binder[HTMLTableRowElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLTableRowElement = new Binder[HTMLTableRowElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLTableRowElement = new Binder[HTMLTableRowElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLTableRowElement = new Binder[HTMLTableRowElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLTableRowElement = new Binder[HTMLTableRowElement, change.type, Event] {}
  implicit val clickOnHTMLTableRowElement = new Binder[HTMLTableRowElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLTableRowElement = new Binder[HTMLTableRowElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLTableRowElement = new Binder[HTMLTableRowElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLTableRowElement = new Binder[HTMLTableRowElement, cuechange.type, Event] {}
  implicit val cutOnHTMLTableRowElement = new Binder[HTMLTableRowElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLTableRowElement = new Binder[HTMLTableRowElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLTableRowElement = new Binder[HTMLTableRowElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLTableRowElement = new Binder[HTMLTableRowElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLTableRowElement = new Binder[HTMLTableRowElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLTableRowElement = new Binder[HTMLTableRowElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLTableRowElement = new Binder[HTMLTableRowElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLTableRowElement = new Binder[HTMLTableRowElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLTableRowElement = new Binder[HTMLTableRowElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLTableRowElement = new Binder[HTMLTableRowElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLTableRowElement = new Binder[HTMLTableRowElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLTableRowElement = new Binder[HTMLTableRowElement, emptied.type, Event] {}
  implicit val endedOnHTMLTableRowElement = new Binder[HTMLTableRowElement, ended.type, Event] {}
  implicit val focusOnHTMLTableRowElement = new Binder[HTMLTableRowElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLTableRowElement = new Binder[HTMLTableRowElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLTableRowElement = new Binder[HTMLTableRowElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLTableRowElement = new Binder[HTMLTableRowElement, help.type, Event] {}
  implicit val inputOnHTMLTableRowElement = new Binder[HTMLTableRowElement, input.type, Event] {}
  implicit val keydownOnHTMLTableRowElement = new Binder[HTMLTableRowElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLTableRowElement = new Binder[HTMLTableRowElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLTableRowElement = new Binder[HTMLTableRowElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLTableRowElement = new Binder[HTMLTableRowElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLTableRowElement = new Binder[HTMLTableRowElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLTableRowElement = new Binder[HTMLTableRowElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLTableRowElement = new Binder[HTMLTableRowElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLTableRowElement = new Binder[HTMLTableRowElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLTableRowElement = new Binder[HTMLTableRowElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLTableRowElement = new Binder[HTMLTableRowElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLTableRowElement = new Binder[HTMLTableRowElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLTableRowElement = new Binder[HTMLTableRowElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLTableRowElement = new Binder[HTMLTableRowElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLTableRowElement = new Binder[HTMLTableRowElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLTableRowElement = new Binder[HTMLTableRowElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLTableRowElement = new Binder[HTMLTableRowElement, pause.type, Event] {}
  implicit val playOnHTMLTableRowElement = new Binder[HTMLTableRowElement, play.type, Event] {}
  implicit val playingOnHTMLTableRowElement = new Binder[HTMLTableRowElement, playing.type, Event] {}
  implicit val progressOnHTMLTableRowElement = new Binder[HTMLTableRowElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLTableRowElement = new Binder[HTMLTableRowElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLTableRowElement = new Binder[HTMLTableRowElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLTableRowElement = new Binder[HTMLTableRowElement, reset.type, Event] {}
  implicit val scrollOnHTMLTableRowElement = new Binder[HTMLTableRowElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLTableRowElement = new Binder[HTMLTableRowElement, seeked.type, Event] {}
  implicit val seekingOnHTMLTableRowElement = new Binder[HTMLTableRowElement, seeking.type, Event] {}
  implicit val selectOnHTMLTableRowElement = new Binder[HTMLTableRowElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLTableRowElement = new Binder[HTMLTableRowElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLTableRowElement = new Binder[HTMLTableRowElement, stalled.type, Event] {}
  implicit val submitOnHTMLTableRowElement = new Binder[HTMLTableRowElement, submit.type, Event] {}
  implicit val suspendOnHTMLTableRowElement = new Binder[HTMLTableRowElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLTableRowElement = new Binder[HTMLTableRowElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLTableRowElement = new Binder[HTMLTableRowElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLTableRowElement = new Binder[HTMLTableRowElement, waiting.type, Event] {}
  implicit val abortOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, change.type, Event] {}
  implicit val clickOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, cuechange.type, Event] {}
  implicit val cutOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, emptied.type, Event] {}
  implicit val endedOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, ended.type, Event] {}
  implicit val focusOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, help.type, Event] {}
  implicit val inputOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, input.type, Event] {}
  implicit val keydownOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, pause.type, Event] {}
  implicit val playOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, play.type, Event] {}
  implicit val playingOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, playing.type, Event] {}
  implicit val progressOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, reset.type, Event] {}
  implicit val scrollOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, seeked.type, Event] {}
  implicit val seekingOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, seeking.type, Event] {}
  implicit val selectOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, stalled.type, Event] {}
  implicit val submitOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, submit.type, Event] {}
  implicit val suspendOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLTableSectionElement = new Binder[HTMLTableSectionElement, waiting.type, Event] {}
  implicit val abortOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, change.type, Event] {}
  implicit val clickOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, cuechange.type, Event] {}
  implicit val cutOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, emptied.type, Event] {}
  implicit val endedOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, ended.type, Event] {}
  implicit val focusOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, help.type, Event] {}
  implicit val inputOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, input.type, Event] {}
  implicit val keydownOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, pause.type, Event] {}
  implicit val playOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, play.type, Event] {}
  implicit val playingOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, playing.type, Event] {}
  implicit val progressOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, reset.type, Event] {}
  implicit val scrollOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, seeked.type, Event] {}
  implicit val seekingOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, seeking.type, Event] {}
  implicit val selectOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, stalled.type, Event] {}
  implicit val submitOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, submit.type, Event] {}
  implicit val suspendOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLTextAreaElement = new Binder[HTMLTextAreaElement, waiting.type, Event] {}
  implicit val abortOnHTMLTitleElement = new Binder[HTMLTitleElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLTitleElement = new Binder[HTMLTitleElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLTitleElement = new Binder[HTMLTitleElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLTitleElement = new Binder[HTMLTitleElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLTitleElement = new Binder[HTMLTitleElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLTitleElement = new Binder[HTMLTitleElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLTitleElement = new Binder[HTMLTitleElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLTitleElement = new Binder[HTMLTitleElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLTitleElement = new Binder[HTMLTitleElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLTitleElement = new Binder[HTMLTitleElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLTitleElement = new Binder[HTMLTitleElement, change.type, Event] {}
  implicit val clickOnHTMLTitleElement = new Binder[HTMLTitleElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLTitleElement = new Binder[HTMLTitleElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLTitleElement = new Binder[HTMLTitleElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLTitleElement = new Binder[HTMLTitleElement, cuechange.type, Event] {}
  implicit val cutOnHTMLTitleElement = new Binder[HTMLTitleElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLTitleElement = new Binder[HTMLTitleElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLTitleElement = new Binder[HTMLTitleElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLTitleElement = new Binder[HTMLTitleElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLTitleElement = new Binder[HTMLTitleElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLTitleElement = new Binder[HTMLTitleElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLTitleElement = new Binder[HTMLTitleElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLTitleElement = new Binder[HTMLTitleElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLTitleElement = new Binder[HTMLTitleElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLTitleElement = new Binder[HTMLTitleElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLTitleElement = new Binder[HTMLTitleElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLTitleElement = new Binder[HTMLTitleElement, emptied.type, Event] {}
  implicit val endedOnHTMLTitleElement = new Binder[HTMLTitleElement, ended.type, Event] {}
  implicit val focusOnHTMLTitleElement = new Binder[HTMLTitleElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLTitleElement = new Binder[HTMLTitleElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLTitleElement = new Binder[HTMLTitleElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLTitleElement = new Binder[HTMLTitleElement, help.type, Event] {}
  implicit val inputOnHTMLTitleElement = new Binder[HTMLTitleElement, input.type, Event] {}
  implicit val keydownOnHTMLTitleElement = new Binder[HTMLTitleElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLTitleElement = new Binder[HTMLTitleElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLTitleElement = new Binder[HTMLTitleElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLTitleElement = new Binder[HTMLTitleElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLTitleElement = new Binder[HTMLTitleElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLTitleElement = new Binder[HTMLTitleElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLTitleElement = new Binder[HTMLTitleElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLTitleElement = new Binder[HTMLTitleElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLTitleElement = new Binder[HTMLTitleElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLTitleElement = new Binder[HTMLTitleElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLTitleElement = new Binder[HTMLTitleElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLTitleElement = new Binder[HTMLTitleElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLTitleElement = new Binder[HTMLTitleElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLTitleElement = new Binder[HTMLTitleElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLTitleElement = new Binder[HTMLTitleElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLTitleElement = new Binder[HTMLTitleElement, pause.type, Event] {}
  implicit val playOnHTMLTitleElement = new Binder[HTMLTitleElement, play.type, Event] {}
  implicit val playingOnHTMLTitleElement = new Binder[HTMLTitleElement, playing.type, Event] {}
  implicit val progressOnHTMLTitleElement = new Binder[HTMLTitleElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLTitleElement = new Binder[HTMLTitleElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLTitleElement = new Binder[HTMLTitleElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLTitleElement = new Binder[HTMLTitleElement, reset.type, Event] {}
  implicit val scrollOnHTMLTitleElement = new Binder[HTMLTitleElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLTitleElement = new Binder[HTMLTitleElement, seeked.type, Event] {}
  implicit val seekingOnHTMLTitleElement = new Binder[HTMLTitleElement, seeking.type, Event] {}
  implicit val selectOnHTMLTitleElement = new Binder[HTMLTitleElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLTitleElement = new Binder[HTMLTitleElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLTitleElement = new Binder[HTMLTitleElement, stalled.type, Event] {}
  implicit val submitOnHTMLTitleElement = new Binder[HTMLTitleElement, submit.type, Event] {}
  implicit val suspendOnHTMLTitleElement = new Binder[HTMLTitleElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLTitleElement = new Binder[HTMLTitleElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLTitleElement = new Binder[HTMLTitleElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLTitleElement = new Binder[HTMLTitleElement, waiting.type, Event] {}
  implicit val abortOnHTMLTrackElement = new Binder[HTMLTrackElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLTrackElement = new Binder[HTMLTrackElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLTrackElement = new Binder[HTMLTrackElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLTrackElement = new Binder[HTMLTrackElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLTrackElement = new Binder[HTMLTrackElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLTrackElement = new Binder[HTMLTrackElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLTrackElement = new Binder[HTMLTrackElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLTrackElement = new Binder[HTMLTrackElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLTrackElement = new Binder[HTMLTrackElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLTrackElement = new Binder[HTMLTrackElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLTrackElement = new Binder[HTMLTrackElement, change.type, Event] {}
  implicit val clickOnHTMLTrackElement = new Binder[HTMLTrackElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLTrackElement = new Binder[HTMLTrackElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLTrackElement = new Binder[HTMLTrackElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLTrackElement = new Binder[HTMLTrackElement, cuechange.type, Event] {}
  implicit val cutOnHTMLTrackElement = new Binder[HTMLTrackElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLTrackElement = new Binder[HTMLTrackElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLTrackElement = new Binder[HTMLTrackElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLTrackElement = new Binder[HTMLTrackElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLTrackElement = new Binder[HTMLTrackElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLTrackElement = new Binder[HTMLTrackElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLTrackElement = new Binder[HTMLTrackElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLTrackElement = new Binder[HTMLTrackElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLTrackElement = new Binder[HTMLTrackElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLTrackElement = new Binder[HTMLTrackElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLTrackElement = new Binder[HTMLTrackElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLTrackElement = new Binder[HTMLTrackElement, emptied.type, Event] {}
  implicit val endedOnHTMLTrackElement = new Binder[HTMLTrackElement, ended.type, Event] {}
  implicit val focusOnHTMLTrackElement = new Binder[HTMLTrackElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLTrackElement = new Binder[HTMLTrackElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLTrackElement = new Binder[HTMLTrackElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLTrackElement = new Binder[HTMLTrackElement, help.type, Event] {}
  implicit val inputOnHTMLTrackElement = new Binder[HTMLTrackElement, input.type, Event] {}
  implicit val keydownOnHTMLTrackElement = new Binder[HTMLTrackElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLTrackElement = new Binder[HTMLTrackElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLTrackElement = new Binder[HTMLTrackElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLTrackElement = new Binder[HTMLTrackElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLTrackElement = new Binder[HTMLTrackElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLTrackElement = new Binder[HTMLTrackElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLTrackElement = new Binder[HTMLTrackElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLTrackElement = new Binder[HTMLTrackElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLTrackElement = new Binder[HTMLTrackElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLTrackElement = new Binder[HTMLTrackElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLTrackElement = new Binder[HTMLTrackElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLTrackElement = new Binder[HTMLTrackElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLTrackElement = new Binder[HTMLTrackElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLTrackElement = new Binder[HTMLTrackElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLTrackElement = new Binder[HTMLTrackElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLTrackElement = new Binder[HTMLTrackElement, pause.type, Event] {}
  implicit val playOnHTMLTrackElement = new Binder[HTMLTrackElement, play.type, Event] {}
  implicit val playingOnHTMLTrackElement = new Binder[HTMLTrackElement, playing.type, Event] {}
  implicit val progressOnHTMLTrackElement = new Binder[HTMLTrackElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLTrackElement = new Binder[HTMLTrackElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLTrackElement = new Binder[HTMLTrackElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLTrackElement = new Binder[HTMLTrackElement, reset.type, Event] {}
  implicit val scrollOnHTMLTrackElement = new Binder[HTMLTrackElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLTrackElement = new Binder[HTMLTrackElement, seeked.type, Event] {}
  implicit val seekingOnHTMLTrackElement = new Binder[HTMLTrackElement, seeking.type, Event] {}
  implicit val selectOnHTMLTrackElement = new Binder[HTMLTrackElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLTrackElement = new Binder[HTMLTrackElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLTrackElement = new Binder[HTMLTrackElement, stalled.type, Event] {}
  implicit val submitOnHTMLTrackElement = new Binder[HTMLTrackElement, submit.type, Event] {}
  implicit val suspendOnHTMLTrackElement = new Binder[HTMLTrackElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLTrackElement = new Binder[HTMLTrackElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLTrackElement = new Binder[HTMLTrackElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLTrackElement = new Binder[HTMLTrackElement, waiting.type, Event] {}
  implicit val abortOnHTMLUListElement = new Binder[HTMLUListElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLUListElement = new Binder[HTMLUListElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLUListElement = new Binder[HTMLUListElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLUListElement = new Binder[HTMLUListElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLUListElement = new Binder[HTMLUListElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLUListElement = new Binder[HTMLUListElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLUListElement = new Binder[HTMLUListElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLUListElement = new Binder[HTMLUListElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLUListElement = new Binder[HTMLUListElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLUListElement = new Binder[HTMLUListElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLUListElement = new Binder[HTMLUListElement, change.type, Event] {}
  implicit val clickOnHTMLUListElement = new Binder[HTMLUListElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLUListElement = new Binder[HTMLUListElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLUListElement = new Binder[HTMLUListElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLUListElement = new Binder[HTMLUListElement, cuechange.type, Event] {}
  implicit val cutOnHTMLUListElement = new Binder[HTMLUListElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLUListElement = new Binder[HTMLUListElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLUListElement = new Binder[HTMLUListElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLUListElement = new Binder[HTMLUListElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLUListElement = new Binder[HTMLUListElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLUListElement = new Binder[HTMLUListElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLUListElement = new Binder[HTMLUListElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLUListElement = new Binder[HTMLUListElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLUListElement = new Binder[HTMLUListElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLUListElement = new Binder[HTMLUListElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLUListElement = new Binder[HTMLUListElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLUListElement = new Binder[HTMLUListElement, emptied.type, Event] {}
  implicit val endedOnHTMLUListElement = new Binder[HTMLUListElement, ended.type, Event] {}
  implicit val focusOnHTMLUListElement = new Binder[HTMLUListElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLUListElement = new Binder[HTMLUListElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLUListElement = new Binder[HTMLUListElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLUListElement = new Binder[HTMLUListElement, help.type, Event] {}
  implicit val inputOnHTMLUListElement = new Binder[HTMLUListElement, input.type, Event] {}
  implicit val keydownOnHTMLUListElement = new Binder[HTMLUListElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLUListElement = new Binder[HTMLUListElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLUListElement = new Binder[HTMLUListElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLUListElement = new Binder[HTMLUListElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLUListElement = new Binder[HTMLUListElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLUListElement = new Binder[HTMLUListElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLUListElement = new Binder[HTMLUListElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLUListElement = new Binder[HTMLUListElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLUListElement = new Binder[HTMLUListElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLUListElement = new Binder[HTMLUListElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLUListElement = new Binder[HTMLUListElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLUListElement = new Binder[HTMLUListElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLUListElement = new Binder[HTMLUListElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLUListElement = new Binder[HTMLUListElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLUListElement = new Binder[HTMLUListElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLUListElement = new Binder[HTMLUListElement, pause.type, Event] {}
  implicit val playOnHTMLUListElement = new Binder[HTMLUListElement, play.type, Event] {}
  implicit val playingOnHTMLUListElement = new Binder[HTMLUListElement, playing.type, Event] {}
  implicit val progressOnHTMLUListElement = new Binder[HTMLUListElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLUListElement = new Binder[HTMLUListElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLUListElement = new Binder[HTMLUListElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLUListElement = new Binder[HTMLUListElement, reset.type, Event] {}
  implicit val scrollOnHTMLUListElement = new Binder[HTMLUListElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLUListElement = new Binder[HTMLUListElement, seeked.type, Event] {}
  implicit val seekingOnHTMLUListElement = new Binder[HTMLUListElement, seeking.type, Event] {}
  implicit val selectOnHTMLUListElement = new Binder[HTMLUListElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLUListElement = new Binder[HTMLUListElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLUListElement = new Binder[HTMLUListElement, stalled.type, Event] {}
  implicit val submitOnHTMLUListElement = new Binder[HTMLUListElement, submit.type, Event] {}
  implicit val suspendOnHTMLUListElement = new Binder[HTMLUListElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLUListElement = new Binder[HTMLUListElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLUListElement = new Binder[HTMLUListElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLUListElement = new Binder[HTMLUListElement, waiting.type, Event] {}
  implicit val abortOnHTMLUnknownElement = new Binder[HTMLUnknownElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLUnknownElement = new Binder[HTMLUnknownElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLUnknownElement = new Binder[HTMLUnknownElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLUnknownElement = new Binder[HTMLUnknownElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLUnknownElement = new Binder[HTMLUnknownElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLUnknownElement = new Binder[HTMLUnknownElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLUnknownElement = new Binder[HTMLUnknownElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLUnknownElement = new Binder[HTMLUnknownElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLUnknownElement = new Binder[HTMLUnknownElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLUnknownElement = new Binder[HTMLUnknownElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLUnknownElement = new Binder[HTMLUnknownElement, change.type, Event] {}
  implicit val clickOnHTMLUnknownElement = new Binder[HTMLUnknownElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLUnknownElement = new Binder[HTMLUnknownElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLUnknownElement = new Binder[HTMLUnknownElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLUnknownElement = new Binder[HTMLUnknownElement, cuechange.type, Event] {}
  implicit val cutOnHTMLUnknownElement = new Binder[HTMLUnknownElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLUnknownElement = new Binder[HTMLUnknownElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLUnknownElement = new Binder[HTMLUnknownElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLUnknownElement = new Binder[HTMLUnknownElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLUnknownElement = new Binder[HTMLUnknownElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLUnknownElement = new Binder[HTMLUnknownElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLUnknownElement = new Binder[HTMLUnknownElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLUnknownElement = new Binder[HTMLUnknownElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLUnknownElement = new Binder[HTMLUnknownElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLUnknownElement = new Binder[HTMLUnknownElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLUnknownElement = new Binder[HTMLUnknownElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLUnknownElement = new Binder[HTMLUnknownElement, emptied.type, Event] {}
  implicit val endedOnHTMLUnknownElement = new Binder[HTMLUnknownElement, ended.type, Event] {}
  implicit val focusOnHTMLUnknownElement = new Binder[HTMLUnknownElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLUnknownElement = new Binder[HTMLUnknownElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLUnknownElement = new Binder[HTMLUnknownElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLUnknownElement = new Binder[HTMLUnknownElement, help.type, Event] {}
  implicit val inputOnHTMLUnknownElement = new Binder[HTMLUnknownElement, input.type, Event] {}
  implicit val keydownOnHTMLUnknownElement = new Binder[HTMLUnknownElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLUnknownElement = new Binder[HTMLUnknownElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLUnknownElement = new Binder[HTMLUnknownElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLUnknownElement = new Binder[HTMLUnknownElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLUnknownElement = new Binder[HTMLUnknownElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLUnknownElement = new Binder[HTMLUnknownElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLUnknownElement = new Binder[HTMLUnknownElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLUnknownElement = new Binder[HTMLUnknownElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLUnknownElement = new Binder[HTMLUnknownElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLUnknownElement = new Binder[HTMLUnknownElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLUnknownElement = new Binder[HTMLUnknownElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLUnknownElement = new Binder[HTMLUnknownElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLUnknownElement = new Binder[HTMLUnknownElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLUnknownElement = new Binder[HTMLUnknownElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLUnknownElement = new Binder[HTMLUnknownElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLUnknownElement = new Binder[HTMLUnknownElement, pause.type, Event] {}
  implicit val playOnHTMLUnknownElement = new Binder[HTMLUnknownElement, play.type, Event] {}
  implicit val playingOnHTMLUnknownElement = new Binder[HTMLUnknownElement, playing.type, Event] {}
  implicit val progressOnHTMLUnknownElement = new Binder[HTMLUnknownElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLUnknownElement = new Binder[HTMLUnknownElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLUnknownElement = new Binder[HTMLUnknownElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLUnknownElement = new Binder[HTMLUnknownElement, reset.type, Event] {}
  implicit val scrollOnHTMLUnknownElement = new Binder[HTMLUnknownElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLUnknownElement = new Binder[HTMLUnknownElement, seeked.type, Event] {}
  implicit val seekingOnHTMLUnknownElement = new Binder[HTMLUnknownElement, seeking.type, Event] {}
  implicit val selectOnHTMLUnknownElement = new Binder[HTMLUnknownElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLUnknownElement = new Binder[HTMLUnknownElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLUnknownElement = new Binder[HTMLUnknownElement, stalled.type, Event] {}
  implicit val submitOnHTMLUnknownElement = new Binder[HTMLUnknownElement, submit.type, Event] {}
  implicit val suspendOnHTMLUnknownElement = new Binder[HTMLUnknownElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLUnknownElement = new Binder[HTMLUnknownElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLUnknownElement = new Binder[HTMLUnknownElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLUnknownElement = new Binder[HTMLUnknownElement, waiting.type, Event] {}
  implicit val abortOnHTMLVideoElement = new Binder[HTMLVideoElement, abort.type, UIEvent] {}
  implicit val activateOnHTMLVideoElement = new Binder[HTMLVideoElement, activate.type, UIEvent] {}
  implicit val beforeactivateOnHTMLVideoElement = new Binder[HTMLVideoElement, beforeactivate.type, UIEvent] {}
  implicit val beforecopyOnHTMLVideoElement = new Binder[HTMLVideoElement, beforecopy.type, DragEvent] {}
  implicit val beforecutOnHTMLVideoElement = new Binder[HTMLVideoElement, beforecut.type, DragEvent] {}
  implicit val beforedeactivateOnHTMLVideoElement = new Binder[HTMLVideoElement, beforedeactivate.type, UIEvent] {}
  implicit val beforepasteOnHTMLVideoElement = new Binder[HTMLVideoElement, beforepaste.type, DragEvent] {}
  implicit val blurOnHTMLVideoElement = new Binder[HTMLVideoElement, blur.type, FocusEvent] {}
  implicit val canplayOnHTMLVideoElement = new Binder[HTMLVideoElement, canplay.type, Event] {}
  implicit val canplaythroughOnHTMLVideoElement = new Binder[HTMLVideoElement, canplaythrough.type, Event] {}
  implicit val changeOnHTMLVideoElement = new Binder[HTMLVideoElement, change.type, Event] {}
  implicit val clickOnHTMLVideoElement = new Binder[HTMLVideoElement, click.type, MouseEvent] {}
  implicit val contextmenuOnHTMLVideoElement = new Binder[HTMLVideoElement, contextmenu.type, MouseEvent] {}
  implicit val copyOnHTMLVideoElement = new Binder[HTMLVideoElement, copy.type, DragEvent] {}
  implicit val cuechangeOnHTMLVideoElement = new Binder[HTMLVideoElement, cuechange.type, Event] {}
  implicit val cutOnHTMLVideoElement = new Binder[HTMLVideoElement, cut.type, DragEvent] {}
  implicit val dblclickOnHTMLVideoElement = new Binder[HTMLVideoElement, dblclick.type, MouseEvent] {}
  implicit val deactivateOnHTMLVideoElement = new Binder[HTMLVideoElement, deactivate.type, UIEvent] {}
  implicit val dragOnHTMLVideoElement = new Binder[HTMLVideoElement, drag.type, DragEvent] {}
  implicit val dragendOnHTMLVideoElement = new Binder[HTMLVideoElement, dragend.type, DragEvent] {}
  implicit val dragenterOnHTMLVideoElement = new Binder[HTMLVideoElement, dragenter.type, DragEvent] {}
  implicit val dragleaveOnHTMLVideoElement = new Binder[HTMLVideoElement, dragleave.type, DragEvent] {}
  implicit val dragoverOnHTMLVideoElement = new Binder[HTMLVideoElement, dragover.type, DragEvent] {}
  implicit val dragstartOnHTMLVideoElement = new Binder[HTMLVideoElement, dragstart.type, DragEvent] {}
  implicit val dropOnHTMLVideoElement = new Binder[HTMLVideoElement, drop.type, DragEvent] {}
  implicit val durationchangeOnHTMLVideoElement = new Binder[HTMLVideoElement, durationchange.type, Event] {}
  implicit val emptiedOnHTMLVideoElement = new Binder[HTMLVideoElement, emptied.type, Event] {}
  implicit val endedOnHTMLVideoElement = new Binder[HTMLVideoElement, ended.type, Event] {}
  implicit val focusOnHTMLVideoElement = new Binder[HTMLVideoElement, focus.type, FocusEvent] {}
  implicit val focusinOnHTMLVideoElement = new Binder[HTMLVideoElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnHTMLVideoElement = new Binder[HTMLVideoElement, focusout.type, FocusEvent] {}
  implicit val helpOnHTMLVideoElement = new Binder[HTMLVideoElement, help.type, Event] {}
  implicit val inputOnHTMLVideoElement = new Binder[HTMLVideoElement, input.type, Event] {}
  implicit val keydownOnHTMLVideoElement = new Binder[HTMLVideoElement, keydown.type, KeyboardEvent] {}
  implicit val keypressOnHTMLVideoElement = new Binder[HTMLVideoElement, keypress.type, KeyboardEvent] {}
  implicit val keyupOnHTMLVideoElement = new Binder[HTMLVideoElement, keyup.type, KeyboardEvent] {}
  implicit val loadeddataOnHTMLVideoElement = new Binder[HTMLVideoElement, loadeddata.type, Event] {}
  implicit val loadedmetadataOnHTMLVideoElement = new Binder[HTMLVideoElement, loadedmetadata.type, Event] {}
  implicit val loadstartOnHTMLVideoElement = new Binder[HTMLVideoElement, loadstart.type, Event] {}
  implicit val mousedownOnHTMLVideoElement = new Binder[HTMLVideoElement, mousedown.type, MouseEvent] {}
  implicit val mouseenterOnHTMLVideoElement = new Binder[HTMLVideoElement, mouseenter.type, MouseEvent] {}
  implicit val mouseleaveOnHTMLVideoElement = new Binder[HTMLVideoElement, mouseleave.type, MouseEvent] {}
  implicit val mousemoveOnHTMLVideoElement = new Binder[HTMLVideoElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnHTMLVideoElement = new Binder[HTMLVideoElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnHTMLVideoElement = new Binder[HTMLVideoElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnHTMLVideoElement = new Binder[HTMLVideoElement, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnHTMLVideoElement = new Binder[HTMLVideoElement, mousewheel.type, WheelEvent] {}
  implicit val pasteOnHTMLVideoElement = new Binder[HTMLVideoElement, paste.type, DragEvent] {}
  implicit val pauseOnHTMLVideoElement = new Binder[HTMLVideoElement, pause.type, Event] {}
  implicit val playOnHTMLVideoElement = new Binder[HTMLVideoElement, play.type, Event] {}
  implicit val playingOnHTMLVideoElement = new Binder[HTMLVideoElement, playing.type, Event] {}
  implicit val progressOnHTMLVideoElement = new Binder[HTMLVideoElement, progress.type, Event] {}
  implicit val ratechangeOnHTMLVideoElement = new Binder[HTMLVideoElement, ratechange.type, Event] {}
  implicit val readystatechangeOnHTMLVideoElement = new Binder[HTMLVideoElement, readystatechange.type, Event] {}
  implicit val resetOnHTMLVideoElement = new Binder[HTMLVideoElement, reset.type, Event] {}
  implicit val scrollOnHTMLVideoElement = new Binder[HTMLVideoElement, scroll.type, UIEvent] {}
  implicit val seekedOnHTMLVideoElement = new Binder[HTMLVideoElement, seeked.type, Event] {}
  implicit val seekingOnHTMLVideoElement = new Binder[HTMLVideoElement, seeking.type, Event] {}
  implicit val selectOnHTMLVideoElement = new Binder[HTMLVideoElement, select.type, UIEvent] {}
  implicit val selectstartOnHTMLVideoElement = new Binder[HTMLVideoElement, selectstart.type, Event] {}
  implicit val stalledOnHTMLVideoElement = new Binder[HTMLVideoElement, stalled.type, Event] {}
  implicit val submitOnHTMLVideoElement = new Binder[HTMLVideoElement, submit.type, Event] {}
  implicit val suspendOnHTMLVideoElement = new Binder[HTMLVideoElement, suspend.type, Event] {}
  implicit val timeupdateOnHTMLVideoElement = new Binder[HTMLVideoElement, timeupdate.type, Event] {}
  implicit val volumechangeOnHTMLVideoElement = new Binder[HTMLVideoElement, volumechange.type, Event] {}
  implicit val waitingOnHTMLVideoElement = new Binder[HTMLVideoElement, waiting.type, Event] {}
  implicit val abortOnIDBDatabase = new Binder[IDBDatabase, abort.type, Event] {}
  implicit val errorOnIDBDatabase = new Binder[IDBDatabase, error.type, ErrorEvent] {}
  implicit val blockedOnIDBOpenDBRequest = new Binder[IDBOpenDBRequest, blocked.type, Event] {}
  implicit val errorOnIDBOpenDBRequest = new Binder[IDBOpenDBRequest, error.type, ErrorEvent] {}
  implicit val successOnIDBOpenDBRequest = new Binder[IDBOpenDBRequest, success.type, Event] {}
  implicit val upgradeneededOnIDBOpenDBRequest = new Binder[IDBOpenDBRequest, upgradeneeded.type, IDBVersionChangeEvent] {}
  implicit val errorOnIDBRequest = new Binder[IDBRequest, error.type, ErrorEvent] {}
  implicit val successOnIDBRequest = new Binder[IDBRequest, success.type, Event] {}
  implicit val abortOnIDBTransaction = new Binder[IDBTransaction, abort.type, Event] {}
  implicit val completeOnIDBTransaction = new Binder[IDBTransaction, complete.type, Event] {}
  implicit val errorOnIDBTransaction = new Binder[IDBTransaction, error.type, ErrorEvent] {}
  implicit val devicechangeOnMediaDevices = new Binder[MediaDevices, devicechange.type, Event] {}
  implicit val addtrackOnMediaStream = new Binder[MediaStream, addtrack.type, Event] {}
  implicit val removetrackOnMediaStream = new Binder[MediaStream, removetrack.type, Event] {}
  implicit val endedOnMediaStreamTrack = new Binder[MediaStreamTrack, ended.type, Event] {}
  implicit val muteOnMediaStreamTrack = new Binder[MediaStreamTrack, mute.type, Event] {}
  implicit val overconstrainedOnMediaStreamTrack = new Binder[MediaStreamTrack, overconstrained.type, Event] {}
  implicit val startedOnMediaStreamTrack = new Binder[MediaStreamTrack, started.type, Event] {}
  implicit val unmuteOnMediaStreamTrack = new Binder[MediaStreamTrack, unmute.type, Event] {}
  implicit val messageOnMessagePort = new Binder[MessagePort, message.type, MessageEvent] {}
  implicit val clickOnNotification = new Binder[Notification, click.type, Event] {}
  implicit val errorOnNotification = new Binder[Notification, error.type, Event] {}
  implicit val completeOnOfflineAudioContext = new Binder[OfflineAudioContext, complete.type, OfflineAudioCompletionEvent] {}
  implicit val endedOnOscillatorNode = new Binder[OscillatorNode, ended.type, Event] {}
  implicit val closeOnRTCDataChannel = new Binder[RTCDataChannel, close.type, Event] {}
  implicit val errorOnRTCDataChannel = new Binder[RTCDataChannel, error.type, Event] {}
  implicit val messageOnRTCDataChannel = new Binder[RTCDataChannel, message.type, MessageEvent] {}
  implicit val openOnRTCDataChannel = new Binder[RTCDataChannel, open.type, Event] {}
  implicit val addstreamOnRTCPeerConnection = new Binder[RTCPeerConnection, addstream.type, MediaStreamEvent] {}
  implicit val datachannelOnRTCPeerConnection = new Binder[RTCPeerConnection, datachannel.type, RTCDataChannelEvent] {}
  implicit val icecandidateOnRTCPeerConnection = new Binder[RTCPeerConnection, icecandidate.type, RTCPeerConnectionIceEvent] {}
  implicit val iceconnectionstatechangeOnRTCPeerConnection = new Binder[RTCPeerConnection, iceconnectionstatechange.type, Event] {}
  implicit val identityresultOnRTCPeerConnection = new Binder[RTCPeerConnection, identityresult.type, Event] {}
  implicit val idpassertionerrorOnRTCPeerConnection = new Binder[RTCPeerConnection, idpassertionerror.type, Event] {}
  implicit val idpvalidationerrorOnRTCPeerConnection = new Binder[RTCPeerConnection, idpvalidationerror.type, Event] {}
  implicit val negotiationneededOnRTCPeerConnection = new Binder[RTCPeerConnection, negotiationneeded.type, Event] {}
  implicit val peeridentityOnRTCPeerConnection = new Binder[RTCPeerConnection, peeridentity.type, Event] {}
  implicit val removestreamOnRTCPeerConnection = new Binder[RTCPeerConnection, removestream.type, MediaStreamEvent] {}
  implicit val signalingstatechangeOnRTCPeerConnection = new Binder[RTCPeerConnection, signalingstatechange.type, Event] {}
  implicit val clickOnSVGAElement = new Binder[SVGAElement, click.type, MouseEvent] {}
  implicit val copyOnSVGAElement = new Binder[SVGAElement, copy.type, DragEvent] {}
  implicit val cutOnSVGAElement = new Binder[SVGAElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGAElement = new Binder[SVGAElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGAElement = new Binder[SVGAElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGAElement = new Binder[SVGAElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGAElement = new Binder[SVGAElement, load.type, Event] {}
  implicit val mousedownOnSVGAElement = new Binder[SVGAElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGAElement = new Binder[SVGAElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGAElement = new Binder[SVGAElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGAElement = new Binder[SVGAElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGAElement = new Binder[SVGAElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGAElement = new Binder[SVGAElement, paste.type, DragEvent] {}
  implicit val clickOnSVGCircleElement = new Binder[SVGCircleElement, click.type, MouseEvent] {}
  implicit val copyOnSVGCircleElement = new Binder[SVGCircleElement, copy.type, DragEvent] {}
  implicit val cutOnSVGCircleElement = new Binder[SVGCircleElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGCircleElement = new Binder[SVGCircleElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGCircleElement = new Binder[SVGCircleElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGCircleElement = new Binder[SVGCircleElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGCircleElement = new Binder[SVGCircleElement, load.type, Event] {}
  implicit val mousedownOnSVGCircleElement = new Binder[SVGCircleElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGCircleElement = new Binder[SVGCircleElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGCircleElement = new Binder[SVGCircleElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGCircleElement = new Binder[SVGCircleElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGCircleElement = new Binder[SVGCircleElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGCircleElement = new Binder[SVGCircleElement, paste.type, DragEvent] {}
  implicit val clickOnSVGClipPathElement = new Binder[SVGClipPathElement, click.type, MouseEvent] {}
  implicit val copyOnSVGClipPathElement = new Binder[SVGClipPathElement, copy.type, DragEvent] {}
  implicit val cutOnSVGClipPathElement = new Binder[SVGClipPathElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGClipPathElement = new Binder[SVGClipPathElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGClipPathElement = new Binder[SVGClipPathElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGClipPathElement = new Binder[SVGClipPathElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGClipPathElement = new Binder[SVGClipPathElement, load.type, Event] {}
  implicit val mousedownOnSVGClipPathElement = new Binder[SVGClipPathElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGClipPathElement = new Binder[SVGClipPathElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGClipPathElement = new Binder[SVGClipPathElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGClipPathElement = new Binder[SVGClipPathElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGClipPathElement = new Binder[SVGClipPathElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGClipPathElement = new Binder[SVGClipPathElement, paste.type, DragEvent] {}
  implicit val clickOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, click.type, MouseEvent] {}
  implicit val copyOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, copy.type, DragEvent] {}
  implicit val cutOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, load.type, Event] {}
  implicit val mousedownOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGComponentTransferFunctionElement = new Binder[SVGComponentTransferFunctionElement, paste.type, DragEvent] {}
  implicit val clickOnSVGDefsElement = new Binder[SVGDefsElement, click.type, MouseEvent] {}
  implicit val copyOnSVGDefsElement = new Binder[SVGDefsElement, copy.type, DragEvent] {}
  implicit val cutOnSVGDefsElement = new Binder[SVGDefsElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGDefsElement = new Binder[SVGDefsElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGDefsElement = new Binder[SVGDefsElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGDefsElement = new Binder[SVGDefsElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGDefsElement = new Binder[SVGDefsElement, load.type, Event] {}
  implicit val mousedownOnSVGDefsElement = new Binder[SVGDefsElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGDefsElement = new Binder[SVGDefsElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGDefsElement = new Binder[SVGDefsElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGDefsElement = new Binder[SVGDefsElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGDefsElement = new Binder[SVGDefsElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGDefsElement = new Binder[SVGDefsElement, paste.type, DragEvent] {}
  implicit val clickOnSVGDescElement = new Binder[SVGDescElement, click.type, MouseEvent] {}
  implicit val copyOnSVGDescElement = new Binder[SVGDescElement, copy.type, DragEvent] {}
  implicit val cutOnSVGDescElement = new Binder[SVGDescElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGDescElement = new Binder[SVGDescElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGDescElement = new Binder[SVGDescElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGDescElement = new Binder[SVGDescElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGDescElement = new Binder[SVGDescElement, load.type, Event] {}
  implicit val mousedownOnSVGDescElement = new Binder[SVGDescElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGDescElement = new Binder[SVGDescElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGDescElement = new Binder[SVGDescElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGDescElement = new Binder[SVGDescElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGDescElement = new Binder[SVGDescElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGDescElement = new Binder[SVGDescElement, paste.type, DragEvent] {}
  implicit val clickOnSVGElement = new Binder[SVGElement, click.type, MouseEvent] {}
  implicit val copyOnSVGElement = new Binder[SVGElement, copy.type, DragEvent] {}
  implicit val cutOnSVGElement = new Binder[SVGElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGElement = new Binder[SVGElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGElement = new Binder[SVGElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGElement = new Binder[SVGElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGElement = new Binder[SVGElement, load.type, Event] {}
  implicit val mousedownOnSVGElement = new Binder[SVGElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGElement = new Binder[SVGElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGElement = new Binder[SVGElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGElement = new Binder[SVGElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGElement = new Binder[SVGElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGElement = new Binder[SVGElement, paste.type, DragEvent] {}
  implicit val clickOnSVGEllipseElement = new Binder[SVGEllipseElement, click.type, MouseEvent] {}
  implicit val copyOnSVGEllipseElement = new Binder[SVGEllipseElement, copy.type, DragEvent] {}
  implicit val cutOnSVGEllipseElement = new Binder[SVGEllipseElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGEllipseElement = new Binder[SVGEllipseElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGEllipseElement = new Binder[SVGEllipseElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGEllipseElement = new Binder[SVGEllipseElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGEllipseElement = new Binder[SVGEllipseElement, load.type, Event] {}
  implicit val mousedownOnSVGEllipseElement = new Binder[SVGEllipseElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGEllipseElement = new Binder[SVGEllipseElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGEllipseElement = new Binder[SVGEllipseElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGEllipseElement = new Binder[SVGEllipseElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGEllipseElement = new Binder[SVGEllipseElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGEllipseElement = new Binder[SVGEllipseElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEBlendElement = new Binder[SVGFEBlendElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEBlendElement = new Binder[SVGFEBlendElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEBlendElement = new Binder[SVGFEBlendElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEBlendElement = new Binder[SVGFEBlendElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEBlendElement = new Binder[SVGFEBlendElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEBlendElement = new Binder[SVGFEBlendElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEBlendElement = new Binder[SVGFEBlendElement, load.type, Event] {}
  implicit val mousedownOnSVGFEBlendElement = new Binder[SVGFEBlendElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEBlendElement = new Binder[SVGFEBlendElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEBlendElement = new Binder[SVGFEBlendElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEBlendElement = new Binder[SVGFEBlendElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEBlendElement = new Binder[SVGFEBlendElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEBlendElement = new Binder[SVGFEBlendElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, load.type, Event] {}
  implicit val mousedownOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEColorMatrixElement = new Binder[SVGFEColorMatrixElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, load.type, Event] {}
  implicit val mousedownOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEComponentTransferElement = new Binder[SVGFEComponentTransferElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFECompositeElement = new Binder[SVGFECompositeElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFECompositeElement = new Binder[SVGFECompositeElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFECompositeElement = new Binder[SVGFECompositeElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFECompositeElement = new Binder[SVGFECompositeElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFECompositeElement = new Binder[SVGFECompositeElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFECompositeElement = new Binder[SVGFECompositeElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFECompositeElement = new Binder[SVGFECompositeElement, load.type, Event] {}
  implicit val mousedownOnSVGFECompositeElement = new Binder[SVGFECompositeElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFECompositeElement = new Binder[SVGFECompositeElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFECompositeElement = new Binder[SVGFECompositeElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFECompositeElement = new Binder[SVGFECompositeElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFECompositeElement = new Binder[SVGFECompositeElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFECompositeElement = new Binder[SVGFECompositeElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, load.type, Event] {}
  implicit val mousedownOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEConvolveMatrixElement = new Binder[SVGFEConvolveMatrixElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, load.type, Event] {}
  implicit val mousedownOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEDiffuseLightingElement = new Binder[SVGFEDiffuseLightingElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, load.type, Event] {}
  implicit val mousedownOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEDisplacementMapElement = new Binder[SVGFEDisplacementMapElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, load.type, Event] {}
  implicit val mousedownOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEDistantLightElement = new Binder[SVGFEDistantLightElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEFloodElement = new Binder[SVGFEFloodElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEFloodElement = new Binder[SVGFEFloodElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEFloodElement = new Binder[SVGFEFloodElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEFloodElement = new Binder[SVGFEFloodElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEFloodElement = new Binder[SVGFEFloodElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEFloodElement = new Binder[SVGFEFloodElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEFloodElement = new Binder[SVGFEFloodElement, load.type, Event] {}
  implicit val mousedownOnSVGFEFloodElement = new Binder[SVGFEFloodElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEFloodElement = new Binder[SVGFEFloodElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEFloodElement = new Binder[SVGFEFloodElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEFloodElement = new Binder[SVGFEFloodElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEFloodElement = new Binder[SVGFEFloodElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEFloodElement = new Binder[SVGFEFloodElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, load.type, Event] {}
  implicit val mousedownOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEFuncAElement = new Binder[SVGFEFuncAElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, load.type, Event] {}
  implicit val mousedownOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEFuncBElement = new Binder[SVGFEFuncBElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, load.type, Event] {}
  implicit val mousedownOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEFuncGElement = new Binder[SVGFEFuncGElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, load.type, Event] {}
  implicit val mousedownOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEFuncRElement = new Binder[SVGFEFuncRElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, load.type, Event] {}
  implicit val mousedownOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEGaussianBlurElement = new Binder[SVGFEGaussianBlurElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEImageElement = new Binder[SVGFEImageElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEImageElement = new Binder[SVGFEImageElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEImageElement = new Binder[SVGFEImageElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEImageElement = new Binder[SVGFEImageElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEImageElement = new Binder[SVGFEImageElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEImageElement = new Binder[SVGFEImageElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEImageElement = new Binder[SVGFEImageElement, load.type, Event] {}
  implicit val mousedownOnSVGFEImageElement = new Binder[SVGFEImageElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEImageElement = new Binder[SVGFEImageElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEImageElement = new Binder[SVGFEImageElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEImageElement = new Binder[SVGFEImageElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEImageElement = new Binder[SVGFEImageElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEImageElement = new Binder[SVGFEImageElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEMergeElement = new Binder[SVGFEMergeElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEMergeElement = new Binder[SVGFEMergeElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEMergeElement = new Binder[SVGFEMergeElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEMergeElement = new Binder[SVGFEMergeElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEMergeElement = new Binder[SVGFEMergeElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEMergeElement = new Binder[SVGFEMergeElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEMergeElement = new Binder[SVGFEMergeElement, load.type, Event] {}
  implicit val mousedownOnSVGFEMergeElement = new Binder[SVGFEMergeElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEMergeElement = new Binder[SVGFEMergeElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEMergeElement = new Binder[SVGFEMergeElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEMergeElement = new Binder[SVGFEMergeElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEMergeElement = new Binder[SVGFEMergeElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEMergeElement = new Binder[SVGFEMergeElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, load.type, Event] {}
  implicit val mousedownOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEMergeNodeElement = new Binder[SVGFEMergeNodeElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, load.type, Event] {}
  implicit val mousedownOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEMorphologyElement = new Binder[SVGFEMorphologyElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, load.type, Event] {}
  implicit val mousedownOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEOffsetElement = new Binder[SVGFEOffsetElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, load.type, Event] {}
  implicit val mousedownOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFEPointLightElement = new Binder[SVGFEPointLightElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, load.type, Event] {}
  implicit val mousedownOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFESpecularLightingElement = new Binder[SVGFESpecularLightingElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, load.type, Event] {}
  implicit val mousedownOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFESpotLightElement = new Binder[SVGFESpotLightElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFETileElement = new Binder[SVGFETileElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFETileElement = new Binder[SVGFETileElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFETileElement = new Binder[SVGFETileElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFETileElement = new Binder[SVGFETileElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFETileElement = new Binder[SVGFETileElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFETileElement = new Binder[SVGFETileElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFETileElement = new Binder[SVGFETileElement, load.type, Event] {}
  implicit val mousedownOnSVGFETileElement = new Binder[SVGFETileElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFETileElement = new Binder[SVGFETileElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFETileElement = new Binder[SVGFETileElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFETileElement = new Binder[SVGFETileElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFETileElement = new Binder[SVGFETileElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFETileElement = new Binder[SVGFETileElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, load.type, Event] {}
  implicit val mousedownOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFETurbulenceElement = new Binder[SVGFETurbulenceElement, paste.type, DragEvent] {}
  implicit val clickOnSVGFilterElement = new Binder[SVGFilterElement, click.type, MouseEvent] {}
  implicit val copyOnSVGFilterElement = new Binder[SVGFilterElement, copy.type, DragEvent] {}
  implicit val cutOnSVGFilterElement = new Binder[SVGFilterElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGFilterElement = new Binder[SVGFilterElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGFilterElement = new Binder[SVGFilterElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGFilterElement = new Binder[SVGFilterElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGFilterElement = new Binder[SVGFilterElement, load.type, Event] {}
  implicit val mousedownOnSVGFilterElement = new Binder[SVGFilterElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGFilterElement = new Binder[SVGFilterElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGFilterElement = new Binder[SVGFilterElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGFilterElement = new Binder[SVGFilterElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGFilterElement = new Binder[SVGFilterElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGFilterElement = new Binder[SVGFilterElement, paste.type, DragEvent] {}
  implicit val clickOnSVGGElement = new Binder[SVGGElement, click.type, MouseEvent] {}
  implicit val copyOnSVGGElement = new Binder[SVGGElement, copy.type, DragEvent] {}
  implicit val cutOnSVGGElement = new Binder[SVGGElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGGElement = new Binder[SVGGElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGGElement = new Binder[SVGGElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGGElement = new Binder[SVGGElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGGElement = new Binder[SVGGElement, load.type, Event] {}
  implicit val mousedownOnSVGGElement = new Binder[SVGGElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGGElement = new Binder[SVGGElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGGElement = new Binder[SVGGElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGGElement = new Binder[SVGGElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGGElement = new Binder[SVGGElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGGElement = new Binder[SVGGElement, paste.type, DragEvent] {}
  implicit val clickOnSVGGradientElement = new Binder[SVGGradientElement, click.type, MouseEvent] {}
  implicit val copyOnSVGGradientElement = new Binder[SVGGradientElement, copy.type, DragEvent] {}
  implicit val cutOnSVGGradientElement = new Binder[SVGGradientElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGGradientElement = new Binder[SVGGradientElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGGradientElement = new Binder[SVGGradientElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGGradientElement = new Binder[SVGGradientElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGGradientElement = new Binder[SVGGradientElement, load.type, Event] {}
  implicit val mousedownOnSVGGradientElement = new Binder[SVGGradientElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGGradientElement = new Binder[SVGGradientElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGGradientElement = new Binder[SVGGradientElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGGradientElement = new Binder[SVGGradientElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGGradientElement = new Binder[SVGGradientElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGGradientElement = new Binder[SVGGradientElement, paste.type, DragEvent] {}
  implicit val clickOnSVGImageElement = new Binder[SVGImageElement, click.type, MouseEvent] {}
  implicit val copyOnSVGImageElement = new Binder[SVGImageElement, copy.type, DragEvent] {}
  implicit val cutOnSVGImageElement = new Binder[SVGImageElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGImageElement = new Binder[SVGImageElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGImageElement = new Binder[SVGImageElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGImageElement = new Binder[SVGImageElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGImageElement = new Binder[SVGImageElement, load.type, Event] {}
  implicit val mousedownOnSVGImageElement = new Binder[SVGImageElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGImageElement = new Binder[SVGImageElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGImageElement = new Binder[SVGImageElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGImageElement = new Binder[SVGImageElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGImageElement = new Binder[SVGImageElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGImageElement = new Binder[SVGImageElement, paste.type, DragEvent] {}
  implicit val clickOnSVGLineElement = new Binder[SVGLineElement, click.type, MouseEvent] {}
  implicit val copyOnSVGLineElement = new Binder[SVGLineElement, copy.type, DragEvent] {}
  implicit val cutOnSVGLineElement = new Binder[SVGLineElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGLineElement = new Binder[SVGLineElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGLineElement = new Binder[SVGLineElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGLineElement = new Binder[SVGLineElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGLineElement = new Binder[SVGLineElement, load.type, Event] {}
  implicit val mousedownOnSVGLineElement = new Binder[SVGLineElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGLineElement = new Binder[SVGLineElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGLineElement = new Binder[SVGLineElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGLineElement = new Binder[SVGLineElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGLineElement = new Binder[SVGLineElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGLineElement = new Binder[SVGLineElement, paste.type, DragEvent] {}
  implicit val clickOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, click.type, MouseEvent] {}
  implicit val copyOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, copy.type, DragEvent] {}
  implicit val cutOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, load.type, Event] {}
  implicit val mousedownOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGLinearGradientElement = new Binder[SVGLinearGradientElement, paste.type, DragEvent] {}
  implicit val clickOnSVGMarkerElement = new Binder[SVGMarkerElement, click.type, MouseEvent] {}
  implicit val copyOnSVGMarkerElement = new Binder[SVGMarkerElement, copy.type, DragEvent] {}
  implicit val cutOnSVGMarkerElement = new Binder[SVGMarkerElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGMarkerElement = new Binder[SVGMarkerElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGMarkerElement = new Binder[SVGMarkerElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGMarkerElement = new Binder[SVGMarkerElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGMarkerElement = new Binder[SVGMarkerElement, load.type, Event] {}
  implicit val mousedownOnSVGMarkerElement = new Binder[SVGMarkerElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGMarkerElement = new Binder[SVGMarkerElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGMarkerElement = new Binder[SVGMarkerElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGMarkerElement = new Binder[SVGMarkerElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGMarkerElement = new Binder[SVGMarkerElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGMarkerElement = new Binder[SVGMarkerElement, paste.type, DragEvent] {}
  implicit val clickOnSVGMaskElement = new Binder[SVGMaskElement, click.type, MouseEvent] {}
  implicit val copyOnSVGMaskElement = new Binder[SVGMaskElement, copy.type, DragEvent] {}
  implicit val cutOnSVGMaskElement = new Binder[SVGMaskElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGMaskElement = new Binder[SVGMaskElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGMaskElement = new Binder[SVGMaskElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGMaskElement = new Binder[SVGMaskElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGMaskElement = new Binder[SVGMaskElement, load.type, Event] {}
  implicit val mousedownOnSVGMaskElement = new Binder[SVGMaskElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGMaskElement = new Binder[SVGMaskElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGMaskElement = new Binder[SVGMaskElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGMaskElement = new Binder[SVGMaskElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGMaskElement = new Binder[SVGMaskElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGMaskElement = new Binder[SVGMaskElement, paste.type, DragEvent] {}
  implicit val clickOnSVGMetadataElement = new Binder[SVGMetadataElement, click.type, MouseEvent] {}
  implicit val copyOnSVGMetadataElement = new Binder[SVGMetadataElement, copy.type, DragEvent] {}
  implicit val cutOnSVGMetadataElement = new Binder[SVGMetadataElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGMetadataElement = new Binder[SVGMetadataElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGMetadataElement = new Binder[SVGMetadataElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGMetadataElement = new Binder[SVGMetadataElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGMetadataElement = new Binder[SVGMetadataElement, load.type, Event] {}
  implicit val mousedownOnSVGMetadataElement = new Binder[SVGMetadataElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGMetadataElement = new Binder[SVGMetadataElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGMetadataElement = new Binder[SVGMetadataElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGMetadataElement = new Binder[SVGMetadataElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGMetadataElement = new Binder[SVGMetadataElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGMetadataElement = new Binder[SVGMetadataElement, paste.type, DragEvent] {}
  implicit val clickOnSVGPathElement = new Binder[SVGPathElement, click.type, MouseEvent] {}
  implicit val copyOnSVGPathElement = new Binder[SVGPathElement, copy.type, DragEvent] {}
  implicit val cutOnSVGPathElement = new Binder[SVGPathElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGPathElement = new Binder[SVGPathElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGPathElement = new Binder[SVGPathElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGPathElement = new Binder[SVGPathElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGPathElement = new Binder[SVGPathElement, load.type, Event] {}
  implicit val mousedownOnSVGPathElement = new Binder[SVGPathElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGPathElement = new Binder[SVGPathElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGPathElement = new Binder[SVGPathElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGPathElement = new Binder[SVGPathElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGPathElement = new Binder[SVGPathElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGPathElement = new Binder[SVGPathElement, paste.type, DragEvent] {}
  implicit val clickOnSVGPatternElement = new Binder[SVGPatternElement, click.type, MouseEvent] {}
  implicit val copyOnSVGPatternElement = new Binder[SVGPatternElement, copy.type, DragEvent] {}
  implicit val cutOnSVGPatternElement = new Binder[SVGPatternElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGPatternElement = new Binder[SVGPatternElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGPatternElement = new Binder[SVGPatternElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGPatternElement = new Binder[SVGPatternElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGPatternElement = new Binder[SVGPatternElement, load.type, Event] {}
  implicit val mousedownOnSVGPatternElement = new Binder[SVGPatternElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGPatternElement = new Binder[SVGPatternElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGPatternElement = new Binder[SVGPatternElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGPatternElement = new Binder[SVGPatternElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGPatternElement = new Binder[SVGPatternElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGPatternElement = new Binder[SVGPatternElement, paste.type, DragEvent] {}
  implicit val clickOnSVGPolygonElement = new Binder[SVGPolygonElement, click.type, MouseEvent] {}
  implicit val copyOnSVGPolygonElement = new Binder[SVGPolygonElement, copy.type, DragEvent] {}
  implicit val cutOnSVGPolygonElement = new Binder[SVGPolygonElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGPolygonElement = new Binder[SVGPolygonElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGPolygonElement = new Binder[SVGPolygonElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGPolygonElement = new Binder[SVGPolygonElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGPolygonElement = new Binder[SVGPolygonElement, load.type, Event] {}
  implicit val mousedownOnSVGPolygonElement = new Binder[SVGPolygonElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGPolygonElement = new Binder[SVGPolygonElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGPolygonElement = new Binder[SVGPolygonElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGPolygonElement = new Binder[SVGPolygonElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGPolygonElement = new Binder[SVGPolygonElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGPolygonElement = new Binder[SVGPolygonElement, paste.type, DragEvent] {}
  implicit val clickOnSVGPolylineElement = new Binder[SVGPolylineElement, click.type, MouseEvent] {}
  implicit val copyOnSVGPolylineElement = new Binder[SVGPolylineElement, copy.type, DragEvent] {}
  implicit val cutOnSVGPolylineElement = new Binder[SVGPolylineElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGPolylineElement = new Binder[SVGPolylineElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGPolylineElement = new Binder[SVGPolylineElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGPolylineElement = new Binder[SVGPolylineElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGPolylineElement = new Binder[SVGPolylineElement, load.type, Event] {}
  implicit val mousedownOnSVGPolylineElement = new Binder[SVGPolylineElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGPolylineElement = new Binder[SVGPolylineElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGPolylineElement = new Binder[SVGPolylineElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGPolylineElement = new Binder[SVGPolylineElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGPolylineElement = new Binder[SVGPolylineElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGPolylineElement = new Binder[SVGPolylineElement, paste.type, DragEvent] {}
  implicit val clickOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, click.type, MouseEvent] {}
  implicit val copyOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, copy.type, DragEvent] {}
  implicit val cutOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, load.type, Event] {}
  implicit val mousedownOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGRadialGradientElement = new Binder[SVGRadialGradientElement, paste.type, DragEvent] {}
  implicit val clickOnSVGRectElement = new Binder[SVGRectElement, click.type, MouseEvent] {}
  implicit val copyOnSVGRectElement = new Binder[SVGRectElement, copy.type, DragEvent] {}
  implicit val cutOnSVGRectElement = new Binder[SVGRectElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGRectElement = new Binder[SVGRectElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGRectElement = new Binder[SVGRectElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGRectElement = new Binder[SVGRectElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGRectElement = new Binder[SVGRectElement, load.type, Event] {}
  implicit val mousedownOnSVGRectElement = new Binder[SVGRectElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGRectElement = new Binder[SVGRectElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGRectElement = new Binder[SVGRectElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGRectElement = new Binder[SVGRectElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGRectElement = new Binder[SVGRectElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGRectElement = new Binder[SVGRectElement, paste.type, DragEvent] {}
  implicit val abortOnSVGSVGElement = new Binder[SVGSVGElement, abort.type, UIEvent] {}
  implicit val clickOnSVGSVGElement = new Binder[SVGSVGElement, click.type, MouseEvent] {}
  implicit val copyOnSVGSVGElement = new Binder[SVGSVGElement, copy.type, DragEvent] {}
  implicit val cutOnSVGSVGElement = new Binder[SVGSVGElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGSVGElement = new Binder[SVGSVGElement, dblclick.type, MouseEvent] {}
  implicit val errorOnSVGSVGElement = new Binder[SVGSVGElement, error.type, Event] {}
  implicit val focusinOnSVGSVGElement = new Binder[SVGSVGElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGSVGElement = new Binder[SVGSVGElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGSVGElement = new Binder[SVGSVGElement, load.type, Event] {}
  implicit val mousedownOnSVGSVGElement = new Binder[SVGSVGElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGSVGElement = new Binder[SVGSVGElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGSVGElement = new Binder[SVGSVGElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGSVGElement = new Binder[SVGSVGElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGSVGElement = new Binder[SVGSVGElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGSVGElement = new Binder[SVGSVGElement, paste.type, DragEvent] {}
  implicit val resizeOnSVGSVGElement = new Binder[SVGSVGElement, resize.type, UIEvent] {}
  implicit val scrollOnSVGSVGElement = new Binder[SVGSVGElement, scroll.type, UIEvent] {}
  implicit val unloadOnSVGSVGElement = new Binder[SVGSVGElement, unload.type, Event] {}
  implicit val zoomOnSVGSVGElement = new Binder[SVGSVGElement, zoom.type, Event] {}
  implicit val clickOnSVGScriptElement = new Binder[SVGScriptElement, click.type, MouseEvent] {}
  implicit val copyOnSVGScriptElement = new Binder[SVGScriptElement, copy.type, DragEvent] {}
  implicit val cutOnSVGScriptElement = new Binder[SVGScriptElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGScriptElement = new Binder[SVGScriptElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGScriptElement = new Binder[SVGScriptElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGScriptElement = new Binder[SVGScriptElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGScriptElement = new Binder[SVGScriptElement, load.type, Event] {}
  implicit val mousedownOnSVGScriptElement = new Binder[SVGScriptElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGScriptElement = new Binder[SVGScriptElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGScriptElement = new Binder[SVGScriptElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGScriptElement = new Binder[SVGScriptElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGScriptElement = new Binder[SVGScriptElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGScriptElement = new Binder[SVGScriptElement, paste.type, DragEvent] {}
  implicit val clickOnSVGStopElement = new Binder[SVGStopElement, click.type, MouseEvent] {}
  implicit val copyOnSVGStopElement = new Binder[SVGStopElement, copy.type, DragEvent] {}
  implicit val cutOnSVGStopElement = new Binder[SVGStopElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGStopElement = new Binder[SVGStopElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGStopElement = new Binder[SVGStopElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGStopElement = new Binder[SVGStopElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGStopElement = new Binder[SVGStopElement, load.type, Event] {}
  implicit val mousedownOnSVGStopElement = new Binder[SVGStopElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGStopElement = new Binder[SVGStopElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGStopElement = new Binder[SVGStopElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGStopElement = new Binder[SVGStopElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGStopElement = new Binder[SVGStopElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGStopElement = new Binder[SVGStopElement, paste.type, DragEvent] {}
  implicit val clickOnSVGStyleElement = new Binder[SVGStyleElement, click.type, MouseEvent] {}
  implicit val copyOnSVGStyleElement = new Binder[SVGStyleElement, copy.type, DragEvent] {}
  implicit val cutOnSVGStyleElement = new Binder[SVGStyleElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGStyleElement = new Binder[SVGStyleElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGStyleElement = new Binder[SVGStyleElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGStyleElement = new Binder[SVGStyleElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGStyleElement = new Binder[SVGStyleElement, load.type, Event] {}
  implicit val mousedownOnSVGStyleElement = new Binder[SVGStyleElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGStyleElement = new Binder[SVGStyleElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGStyleElement = new Binder[SVGStyleElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGStyleElement = new Binder[SVGStyleElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGStyleElement = new Binder[SVGStyleElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGStyleElement = new Binder[SVGStyleElement, paste.type, DragEvent] {}
  implicit val clickOnSVGSwitchElement = new Binder[SVGSwitchElement, click.type, MouseEvent] {}
  implicit val copyOnSVGSwitchElement = new Binder[SVGSwitchElement, copy.type, DragEvent] {}
  implicit val cutOnSVGSwitchElement = new Binder[SVGSwitchElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGSwitchElement = new Binder[SVGSwitchElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGSwitchElement = new Binder[SVGSwitchElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGSwitchElement = new Binder[SVGSwitchElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGSwitchElement = new Binder[SVGSwitchElement, load.type, Event] {}
  implicit val mousedownOnSVGSwitchElement = new Binder[SVGSwitchElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGSwitchElement = new Binder[SVGSwitchElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGSwitchElement = new Binder[SVGSwitchElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGSwitchElement = new Binder[SVGSwitchElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGSwitchElement = new Binder[SVGSwitchElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGSwitchElement = new Binder[SVGSwitchElement, paste.type, DragEvent] {}
  implicit val clickOnSVGSymbolElement = new Binder[SVGSymbolElement, click.type, MouseEvent] {}
  implicit val copyOnSVGSymbolElement = new Binder[SVGSymbolElement, copy.type, DragEvent] {}
  implicit val cutOnSVGSymbolElement = new Binder[SVGSymbolElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGSymbolElement = new Binder[SVGSymbolElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGSymbolElement = new Binder[SVGSymbolElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGSymbolElement = new Binder[SVGSymbolElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGSymbolElement = new Binder[SVGSymbolElement, load.type, Event] {}
  implicit val mousedownOnSVGSymbolElement = new Binder[SVGSymbolElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGSymbolElement = new Binder[SVGSymbolElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGSymbolElement = new Binder[SVGSymbolElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGSymbolElement = new Binder[SVGSymbolElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGSymbolElement = new Binder[SVGSymbolElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGSymbolElement = new Binder[SVGSymbolElement, paste.type, DragEvent] {}
  implicit val clickOnSVGTSpanElement = new Binder[SVGTSpanElement, click.type, MouseEvent] {}
  implicit val copyOnSVGTSpanElement = new Binder[SVGTSpanElement, copy.type, DragEvent] {}
  implicit val cutOnSVGTSpanElement = new Binder[SVGTSpanElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGTSpanElement = new Binder[SVGTSpanElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGTSpanElement = new Binder[SVGTSpanElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGTSpanElement = new Binder[SVGTSpanElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGTSpanElement = new Binder[SVGTSpanElement, load.type, Event] {}
  implicit val mousedownOnSVGTSpanElement = new Binder[SVGTSpanElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGTSpanElement = new Binder[SVGTSpanElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGTSpanElement = new Binder[SVGTSpanElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGTSpanElement = new Binder[SVGTSpanElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGTSpanElement = new Binder[SVGTSpanElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGTSpanElement = new Binder[SVGTSpanElement, paste.type, DragEvent] {}
  implicit val clickOnSVGTextContentElement = new Binder[SVGTextContentElement, click.type, MouseEvent] {}
  implicit val copyOnSVGTextContentElement = new Binder[SVGTextContentElement, copy.type, DragEvent] {}
  implicit val cutOnSVGTextContentElement = new Binder[SVGTextContentElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGTextContentElement = new Binder[SVGTextContentElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGTextContentElement = new Binder[SVGTextContentElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGTextContentElement = new Binder[SVGTextContentElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGTextContentElement = new Binder[SVGTextContentElement, load.type, Event] {}
  implicit val mousedownOnSVGTextContentElement = new Binder[SVGTextContentElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGTextContentElement = new Binder[SVGTextContentElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGTextContentElement = new Binder[SVGTextContentElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGTextContentElement = new Binder[SVGTextContentElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGTextContentElement = new Binder[SVGTextContentElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGTextContentElement = new Binder[SVGTextContentElement, paste.type, DragEvent] {}
  implicit val clickOnSVGTextElement = new Binder[SVGTextElement, click.type, MouseEvent] {}
  implicit val copyOnSVGTextElement = new Binder[SVGTextElement, copy.type, DragEvent] {}
  implicit val cutOnSVGTextElement = new Binder[SVGTextElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGTextElement = new Binder[SVGTextElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGTextElement = new Binder[SVGTextElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGTextElement = new Binder[SVGTextElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGTextElement = new Binder[SVGTextElement, load.type, Event] {}
  implicit val mousedownOnSVGTextElement = new Binder[SVGTextElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGTextElement = new Binder[SVGTextElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGTextElement = new Binder[SVGTextElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGTextElement = new Binder[SVGTextElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGTextElement = new Binder[SVGTextElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGTextElement = new Binder[SVGTextElement, paste.type, DragEvent] {}
  implicit val clickOnSVGTextPathElement = new Binder[SVGTextPathElement, click.type, MouseEvent] {}
  implicit val copyOnSVGTextPathElement = new Binder[SVGTextPathElement, copy.type, DragEvent] {}
  implicit val cutOnSVGTextPathElement = new Binder[SVGTextPathElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGTextPathElement = new Binder[SVGTextPathElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGTextPathElement = new Binder[SVGTextPathElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGTextPathElement = new Binder[SVGTextPathElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGTextPathElement = new Binder[SVGTextPathElement, load.type, Event] {}
  implicit val mousedownOnSVGTextPathElement = new Binder[SVGTextPathElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGTextPathElement = new Binder[SVGTextPathElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGTextPathElement = new Binder[SVGTextPathElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGTextPathElement = new Binder[SVGTextPathElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGTextPathElement = new Binder[SVGTextPathElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGTextPathElement = new Binder[SVGTextPathElement, paste.type, DragEvent] {}
  implicit val clickOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, click.type, MouseEvent] {}
  implicit val copyOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, copy.type, DragEvent] {}
  implicit val cutOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, load.type, Event] {}
  implicit val mousedownOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGTextPositioningElement = new Binder[SVGTextPositioningElement, paste.type, DragEvent] {}
  implicit val clickOnSVGTitleElement = new Binder[SVGTitleElement, click.type, MouseEvent] {}
  implicit val copyOnSVGTitleElement = new Binder[SVGTitleElement, copy.type, DragEvent] {}
  implicit val cutOnSVGTitleElement = new Binder[SVGTitleElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGTitleElement = new Binder[SVGTitleElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGTitleElement = new Binder[SVGTitleElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGTitleElement = new Binder[SVGTitleElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGTitleElement = new Binder[SVGTitleElement, load.type, Event] {}
  implicit val mousedownOnSVGTitleElement = new Binder[SVGTitleElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGTitleElement = new Binder[SVGTitleElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGTitleElement = new Binder[SVGTitleElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGTitleElement = new Binder[SVGTitleElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGTitleElement = new Binder[SVGTitleElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGTitleElement = new Binder[SVGTitleElement, paste.type, DragEvent] {}
  implicit val clickOnSVGUseElement = new Binder[SVGUseElement, click.type, MouseEvent] {}
  implicit val copyOnSVGUseElement = new Binder[SVGUseElement, copy.type, DragEvent] {}
  implicit val cutOnSVGUseElement = new Binder[SVGUseElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGUseElement = new Binder[SVGUseElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGUseElement = new Binder[SVGUseElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGUseElement = new Binder[SVGUseElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGUseElement = new Binder[SVGUseElement, load.type, Event] {}
  implicit val mousedownOnSVGUseElement = new Binder[SVGUseElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGUseElement = new Binder[SVGUseElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGUseElement = new Binder[SVGUseElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGUseElement = new Binder[SVGUseElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGUseElement = new Binder[SVGUseElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGUseElement = new Binder[SVGUseElement, paste.type, DragEvent] {}
  implicit val clickOnSVGViewElement = new Binder[SVGViewElement, click.type, MouseEvent] {}
  implicit val copyOnSVGViewElement = new Binder[SVGViewElement, copy.type, DragEvent] {}
  implicit val cutOnSVGViewElement = new Binder[SVGViewElement, cut.type, DragEvent] {}
  implicit val dblclickOnSVGViewElement = new Binder[SVGViewElement, dblclick.type, MouseEvent] {}
  implicit val focusinOnSVGViewElement = new Binder[SVGViewElement, focusin.type, FocusEvent] {}
  implicit val focusoutOnSVGViewElement = new Binder[SVGViewElement, focusout.type, FocusEvent] {}
  implicit val loadOnSVGViewElement = new Binder[SVGViewElement, load.type, Event] {}
  implicit val mousedownOnSVGViewElement = new Binder[SVGViewElement, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnSVGViewElement = new Binder[SVGViewElement, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnSVGViewElement = new Binder[SVGViewElement, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnSVGViewElement = new Binder[SVGViewElement, mouseover.type, MouseEvent] {}
  implicit val mouseupOnSVGViewElement = new Binder[SVGViewElement, mouseup.type, MouseEvent] {}
  implicit val pasteOnSVGViewElement = new Binder[SVGViewElement, paste.type, DragEvent] {}
  implicit val statechangeOnServiceWorker = new Binder[ServiceWorker, statechange.type, Event] {}
  implicit val controllerchangeOnServiceWorkerContainer = new Binder[ServiceWorkerContainer, controllerchange.type, Event] {}
  implicit val errorOnServiceWorkerContainer = new Binder[ServiceWorkerContainer, error.type, ErrorEvent] {}
  implicit val messageOnServiceWorkerContainer = new Binder[ServiceWorkerContainer, message.type, ServiceWorkerMessageEvent] {}
  implicit val activateOnServiceWorkerGlobalScope = new Binder[ServiceWorkerGlobalScope, activate.type, ExtendableEvent] {}
  implicit val errorOnServiceWorkerGlobalScope = new Binder[ServiceWorkerGlobalScope, error.type, ErrorEvent] {}
  implicit val fetchOnServiceWorkerGlobalScope = new Binder[ServiceWorkerGlobalScope, fetch.type, FetchEvent] {}
  implicit val installOnServiceWorkerGlobalScope = new Binder[ServiceWorkerGlobalScope, install.type, ExtendableEvent] {}
  implicit val languagechangeOnServiceWorkerGlobalScope = new Binder[ServiceWorkerGlobalScope, languagechange.type, Event] {}
  implicit val messageOnServiceWorkerGlobalScope = new Binder[ServiceWorkerGlobalScope, message.type, ServiceWorkerMessageEvent] {}
  implicit val offlineOnServiceWorkerGlobalScope = new Binder[ServiceWorkerGlobalScope, offline.type, Event] {}
  implicit val onlineOnServiceWorkerGlobalScope = new Binder[ServiceWorkerGlobalScope, online.type, Event] {}
  implicit val updatefoundOnServiceWorkerRegistration = new Binder[ServiceWorkerRegistration, updatefound.type, Event] {}
  implicit val errorOnSharedWorker = new Binder[SharedWorker, error.type, ErrorEvent] {}
  implicit val connectOnSharedWorkerGlobalScope = new Binder[SharedWorkerGlobalScope, connect.type, ExtendableMessageEvent] {}
  implicit val errorOnSharedWorkerGlobalScope = new Binder[SharedWorkerGlobalScope, error.type, ErrorEvent] {}
  implicit val languagechangeOnSharedWorkerGlobalScope = new Binder[SharedWorkerGlobalScope, languagechange.type, Event] {}
  implicit val offlineOnSharedWorkerGlobalScope = new Binder[SharedWorkerGlobalScope, offline.type, Event] {}
  implicit val onlineOnSharedWorkerGlobalScope = new Binder[SharedWorkerGlobalScope, online.type, Event] {}
  implicit val cuechangeOnTextTrack = new Binder[TextTrack, cuechange.type, Event] {}
  implicit val errorOnTextTrack = new Binder[TextTrack, error.type, ErrorEvent] {}
  implicit val loadOnTextTrack = new Binder[TextTrack, load.type, Event] {}
  implicit val enterOnTextTrackCue = new Binder[TextTrackCue, enter.type, Event] {}
  implicit val exitOnTextTrackCue = new Binder[TextTrackCue, exit.type, Event] {}
  implicit val closeOnWebSocket = new Binder[WebSocket, close.type, CloseEvent] {}
  implicit val errorOnWebSocket = new Binder[WebSocket, error.type, ErrorEvent] {}
  implicit val messageOnWebSocket = new Binder[WebSocket, message.type, MessageEvent] {}
  implicit val openOnWebSocket = new Binder[WebSocket, open.type, Event] {}
  implicit val abortOnWindow = new Binder[Window, abort.type, UIEvent] {}
  implicit val afterprintOnWindow = new Binder[Window, afterprint.type, Event] {}
  implicit val beforeprintOnWindow = new Binder[Window, beforeprint.type, Event] {}
  implicit val beforeunloadOnWindow = new Binder[Window, beforeunload.type, BeforeUnloadEvent] {}
  implicit val blurOnWindow = new Binder[Window, blur.type, FocusEvent] {}
  implicit val canplayOnWindow = new Binder[Window, canplay.type, Event] {}
  implicit val canplaythroughOnWindow = new Binder[Window, canplaythrough.type, Event] {}
  implicit val changeOnWindow = new Binder[Window, change.type, Event] {}
  implicit val clickOnWindow = new Binder[Window, click.type, MouseEvent] {}
  implicit val contextmenuOnWindow = new Binder[Window, contextmenu.type, MouseEvent] {}
  implicit val dblclickOnWindow = new Binder[Window, dblclick.type, MouseEvent] {}
  implicit val dragOnWindow = new Binder[Window, drag.type, DragEvent] {}
  implicit val dragendOnWindow = new Binder[Window, dragend.type, DragEvent] {}
  implicit val dragenterOnWindow = new Binder[Window, dragenter.type, DragEvent] {}
  implicit val dragleaveOnWindow = new Binder[Window, dragleave.type, DragEvent] {}
  implicit val dragoverOnWindow = new Binder[Window, dragover.type, DragEvent] {}
  implicit val dragstartOnWindow = new Binder[Window, dragstart.type, DragEvent] {}
  implicit val dropOnWindow = new Binder[Window, drop.type, DragEvent] {}
  implicit val durationchangeOnWindow = new Binder[Window, durationchange.type, Event] {}
  implicit val emptiedOnWindow = new Binder[Window, emptied.type, Event] {}
  implicit val endedOnWindow = new Binder[Window, ended.type, Event] {}
  implicit val errorOnWindow = new Binder[Window, error.type, Event] {}
  implicit val focusOnWindow = new Binder[Window, focus.type, FocusEvent] {}
  implicit val hashchangeOnWindow = new Binder[Window, hashchange.type, HashChangeEvent] {}
  implicit val inputOnWindow = new Binder[Window, input.type, Event] {}
  implicit val keydownOnWindow = new Binder[Window, keydown.type, KeyboardEvent] {}
  implicit val keypressOnWindow = new Binder[Window, keypress.type, KeyboardEvent] {}
  implicit val keyupOnWindow = new Binder[Window, keyup.type, KeyboardEvent] {}
  implicit val loadOnWindow = new Binder[Window, load.type, Event] {}
  implicit val loadeddataOnWindow = new Binder[Window, loadeddata.type, Event] {}
  implicit val loadedmetadataOnWindow = new Binder[Window, loadedmetadata.type, Event] {}
  implicit val loadstartOnWindow = new Binder[Window, loadstart.type, Event] {}
  implicit val messageOnWindow = new Binder[Window, message.type, MessageEvent] {}
  implicit val mousedownOnWindow = new Binder[Window, mousedown.type, MouseEvent] {}
  implicit val mousemoveOnWindow = new Binder[Window, mousemove.type, MouseEvent] {}
  implicit val mouseoutOnWindow = new Binder[Window, mouseout.type, MouseEvent] {}
  implicit val mouseoverOnWindow = new Binder[Window, mouseover.type, MouseEvent] {}
  implicit val mouseupOnWindow = new Binder[Window, mouseup.type, MouseEvent] {}
  implicit val mousewheelOnWindow = new Binder[Window, mousewheel.type, WheelEvent] {}
  implicit val offlineOnWindow = new Binder[Window, offline.type, Event] {}
  implicit val onlineOnWindow = new Binder[Window, online.type, Event] {}
  implicit val pauseOnWindow = new Binder[Window, pause.type, Event] {}
  implicit val playOnWindow = new Binder[Window, play.type, Event] {}
  implicit val playingOnWindow = new Binder[Window, playing.type, Event] {}
  implicit val popstateOnWindow = new Binder[Window, popstate.type, PopStateEvent] {}
  implicit val progressOnWindow = new Binder[Window, progress.type, Event] {}
  implicit val ratechangeOnWindow = new Binder[Window, ratechange.type, Event] {}
  implicit val readystatechangeOnWindow = new Binder[Window, readystatechange.type, Event] {}
  implicit val resetOnWindow = new Binder[Window, reset.type, Event] {}
  implicit val resizeOnWindow = new Binder[Window, resize.type, UIEvent] {}
  implicit val scrollOnWindow = new Binder[Window, scroll.type, UIEvent] {}
  implicit val seekedOnWindow = new Binder[Window, seeked.type, Event] {}
  implicit val seekingOnWindow = new Binder[Window, seeking.type, Event] {}
  implicit val selectOnWindow = new Binder[Window, select.type, UIEvent] {}
  implicit val stalledOnWindow = new Binder[Window, stalled.type, Event] {}
  implicit val storageOnWindow = new Binder[Window, storage.type, StorageEvent] {}
  implicit val submitOnWindow = new Binder[Window, submit.type, Event] {}
  implicit val suspendOnWindow = new Binder[Window, suspend.type, Event] {}
  implicit val timeupdateOnWindow = new Binder[Window, timeupdate.type, Event] {}
  implicit val unloadOnWindow = new Binder[Window, unload.type, Event] {}
  implicit val volumechangeOnWindow = new Binder[Window, volumechange.type, Event] {}
  implicit val waitingOnWindow = new Binder[Window, waiting.type, Event] {}
  implicit val errorOnWorker = new Binder[Worker, error.type, ErrorEvent] {}
  implicit val messageOnWorker = new Binder[Worker, message.type, MessageEvent] {}
  implicit val errorOnWorkerGlobalScope = new Binder[WorkerGlobalScope, error.type, ErrorEvent] {}
  implicit val languagechangeOnWorkerGlobalScope = new Binder[WorkerGlobalScope, languagechange.type, Event] {}
  implicit val offlineOnWorkerGlobalScope = new Binder[WorkerGlobalScope, offline.type, Event] {}
  implicit val onlineOnWorkerGlobalScope = new Binder[WorkerGlobalScope, online.type, Event] {}
  implicit val abortOnXMLHttpRequest = new Binder[XMLHttpRequest, abort.type, Event] {}
  implicit val errorOnXMLHttpRequest = new Binder[XMLHttpRequest, error.type, ErrorEvent] {}
  implicit val loadOnXMLHttpRequest = new Binder[XMLHttpRequest, load.type, Event] {}
  implicit val loadendOnXMLHttpRequest = new Binder[XMLHttpRequest, loadend.type, ProgressEvent] {}
  implicit val loadstartOnXMLHttpRequest = new Binder[XMLHttpRequest, loadstart.type, Event] {}
  implicit val progressOnXMLHttpRequest = new Binder[XMLHttpRequest, progress.type, ProgressEvent] {}
  implicit val readystatechangeOnXMLHttpRequest = new Binder[XMLHttpRequest, readystatechange.type, Event] {}
  implicit val timeoutOnXMLHttpRequest = new Binder[XMLHttpRequest, timeout.type, Event] {}
  implicit val abortOnXMLHttpRequestEventTarget = new Binder[XMLHttpRequestEventTarget, abort.type, Event] {}
  implicit val errorOnXMLHttpRequestEventTarget = new Binder[XMLHttpRequestEventTarget, error.type, ErrorEvent] {}
  implicit val loadOnXMLHttpRequestEventTarget = new Binder[XMLHttpRequestEventTarget, load.type, Event] {}
  implicit val loadendOnXMLHttpRequestEventTarget = new Binder[XMLHttpRequestEventTarget, loadend.type, ProgressEvent] {}
  implicit val loadstartOnXMLHttpRequestEventTarget = new Binder[XMLHttpRequestEventTarget, loadstart.type, Event] {}
  implicit val progressOnXMLHttpRequestEventTarget = new Binder[XMLHttpRequestEventTarget, progress.type, ProgressEvent] {}
  implicit val timeoutOnXMLHttpRequestEventTarget = new Binder[XMLHttpRequestEventTarget, timeout.type, Event] {}
}
